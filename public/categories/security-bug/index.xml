<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Security-Bug</title>
    <link>//localhost:1313/categories/security-bug/</link>
    <description>Recent content in Security-Bug on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 21 Dec 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/security-bug/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-43042 – IBM Backup Products Superuser Information Disclosure&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; 8.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.ibm.com/support/pages/node/7064976&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ibm.com/support/pages/node/7064976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-43042&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 08/12/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.0 Score:&lt;/strong&gt; 7.5 AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Max Corbridge&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC’s Head of Adversarial Simulation (&lt;a href=&#34;https://twitter.com/CorbridgeMax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CorbridgeMax&lt;/a&gt;) discovered that an unauthenticated user can determine whether the default superuser password has been changed on IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products. These products were found to be a single point of failure for backup and disaster recovery processes within client environments, and as such are highly critical systems. &lt;/p&gt;
&lt;p&gt;This only affects the 8.3.1 release as it is impossible for the default password to still be configured on an active system running later releases, since the user must change this either as part of first time setup or prior to upgrading from 8.3.1 or earlier. However, IBM has removed the ability to query this status from all releases listed in the Mitigation section of this advisory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IBM web servers related to backup/storage products respond to unauthenticated GET requests to the &lt;em&gt;/login&lt;/em&gt; page with the name of the superuser account and if the default password has been changed or not. This could allow unauthenticated attackers on the network with the necessary information to compromise what is often a business-critical asset, with superuser permissions. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 
Cache-Control: no-cache, no-store, must-revalidate
Strict-Transport-Security: max-age=778000; includeSubDomains
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: no-referrer-when-downgrade
Pragma: no-cache
X-Content-Type-Options: nosniff
SET-COOKIE: JSESSIONID=[REDACTED];Path=/;Secure;SameSite=Lax
SET-COOKIE: _sync=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _redirect=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _sync=[REDACTED]; HttpOnly; Secure
X-FRAME-OPTIONS: DENY
Cache-Control: post-check=0, pre-check=0
vary: accept-encoding
Content-Type: text/html;charset=UTF-8
Content-Language: en-US
Date: Fri, 08 Sep 2023 12:28:27 GMT
Connection: close
Content-Length: 70858



&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
[SNIPPED_FOR_BREVITY]
&amp;#34;superuserPasswordChanged&amp;#34;:true,&amp;#34;hasEnvironmentals&amp;#34;:true,
[SNIPPED_FOR_BREVITY]
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1: HTTP Response from IBM FlashSystem Webserver&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a priority, change the superuser password if it is still set to the default.&lt;/p&gt;
&lt;p&gt;IBM also recommends that you fix this vulnerability by upgrading affected versions of IBM SAN Volume Controller, IBM Storwize V7000, IBM Storwize V5000 and V5100, IBM Storwize V5000E, IBM Spectrum Virtualize Software, IBM Spectrum Virtualize for Public Cloud, IBM FlashSystem V9000, IBM FlashSystem 9500, IBM FlashSystem 9100 Family, IBM FlashSystem 9200, IBM FlashSystem 7300, IBM FlashSystem 7200, IBM FlashSystem 5200 and IBM FlashSystem 5000 to the following code levels or higher:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.5.0.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.4.0.12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.3.1.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please note that it is necessary to change the superuser password before upgrading from 8.3.1 to 8.4.0 or later, which is the reason why this upgrade remediates the vulnerability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;08/09/2023: Vulnerability submitted through IBM’s Vulnerability Disclosure Program&lt;/p&gt;
&lt;p&gt;13/12/2023: Vulnerability remediated and public notice created by IBM.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory: IDOR in Microsoft Teams Allows for External Tenants to Introduce Malware</title>
      <link>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</guid>
      <description>
        
        
        &lt;h3&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Max Corbridge (@CorbridgeMax) and Tom Ellson (@tde_sec) of JUMPSEC’s Red Team recently discovered a vulnerability in the latest version of Microsoft Teams which allows for the possible introduction of malware into any organisations using Microsoft Teams in its default configuration. This is done by bypassing client-side security controls which prevent external tenants from sending files (malware in this case) to staff in your organisation. JUMPSEC has detailed remediation options, as well as some detection opportunities. &lt;/p&gt;
&lt;h3&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Introducing malware into target organisations is becoming increasingly difficult. Many of the traditional payload types (.exe, Office Macros, etc) are now heavily-scrutinised or have been proactively addressed to reduce their &lt;a href=&#34;https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;efficacy&lt;/em&gt;&lt;/a&gt;. Similarly, payload delivery avenues such as phishing are becoming increasingly monitored and secured to reduce the ease with which threat actors’ malware can reach end-user devices. Mail security controls, IP blocklists, domain reputation, email HTML, content inspection, third-party mail security products, URL filtering and many more must be bypassed for a phishing campaign to traverse all anti-phishing security controls and land in a target’s inbox. &lt;/p&gt;
&lt;p&gt;As such, threat actors and red teams alike are looking for newer and potentially overlooked avenues of payload delivery. One such novel avenue is Microsoft Teams External Tenants. Organisations that use Microsoft Teams (91% of the Fortune 100 according to &lt;a href=&#34;https://www.linkedin.com/pulse/91-fortune-100-companies-use-teams-techbanditshack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;this article&lt;/em&gt;&lt;/a&gt;) inherit Microsoft’s default configuration which allows users from outside of their organisation to reach out to their staff members. By allowing this, an entirely new avenue of social engineering (and now payload delivery as this blog will explain) is created.&lt;/p&gt;
&lt;h3&gt;Detail&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detail&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detail&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Microsoft Teams allows any user with a Microsoft account to reach out to ‘external tenancies’. Here, external tenancies can be thought of as any business or organisation using Microsoft Teams. These organisations each have their own Microsoft tenancy, and users from one tenancy are able to send messages to users in another tenancy. When doing so, an ‘External’ banner appears alongside the name as seen below. &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19671&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;391&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/external.png&#34; title=&#34;External banner on incoming message&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;External banner on incoming message&lt;/figcaption&gt;
  &lt;/figure&gt; External banner applied to incoming message requests[/caption]&lt;/p&gt;
&lt;p&gt;As someone who spent a long time doing purely social engineering (phishing, vishing, smshing, etc.) this is not a show stopper by any means. In my experience, whilst this banner (and the subsequent pop-up) may deter a handful of targets, there is still a significant percentage of staff that would click on a message from an external tenant and accept the subsequent warning that the user is ‘external’. In fact, this was proven only last month, as the techniques used in this blog post were successfully used to gain an initial foothold in a client’s environment as part of a red team engagement. This is especially true if the malicious party is impersonating a known member of your organisation, and has purchased and registered a brand-impersonation domain as red teams often do.&lt;/p&gt;
&lt;p&gt;When messaging staff in another organisation you are blocked from sending files to them, unlike with members of your own tenancy. See below the difference:&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19672&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1496&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Messaging a member of the same organisation&#34; alt=&#34;Messaging a member of the same organisation &#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Messaging a member of the same organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Messaging a member of the same organisation[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19673&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1421&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2.png&#34; title=&#34;Restrictions when messaging someone in a different organisation&#34; alt=&#34;Restrictions when messaging someone in a different organisation&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Restrictions when messaging someone in a different organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Restrictions when messaging someone in a different organisation[/caption]&lt;/p&gt;
&lt;p&gt;So far, this is nothing new. However, having leveraged this social engineering avenue in the past I began wondering if this security control could be bypassed to allow for seamless delivery of payloads directly into a target&amp;rsquo;s inbox on our red team engagements. I began looking online, and articles &lt;a href=&#34;https://aadinternals.com/post/teams-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;like this&lt;/em&gt;&lt;/a&gt; suggested that certain security controls are actually implemented client-side in Microsoft Teams.&lt;/p&gt;
&lt;p&gt;I raised this with JUMPSEC’s Head of Offensive Security (Tom Ellson) and no more than 10 minutes later we had bypassed the security control and were able to send files into a target organisation. Exploitation of the vulnerability was straightforward using a traditional IDOR technique of switching the internal and external recipient ID on the POST request, usually here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;/v1/users/ME/conversations/&amp;lt;RECIPIENT_ID&amp;gt;/messages &lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19674&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1429&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3.png&#34; title=&#34;3&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;3&lt;/figcaption&gt;
  &lt;/figure&gt; Payload delivered directly into a target inbox[/caption]&lt;/p&gt;
&lt;p&gt;When sending the payload like this, it is actually hosted on a Sharepoint domain and the target downloads it from there. It appears, however, in the target inbox as a file, not a link. &lt;/p&gt;
&lt;p&gt;Having identified the issue, I wanted to validate that this vulnerability would work as intended as an avenue for payload delivery into a target organisation, and not fall short for some unknown reason when used in a mature client environment. As such, last month I used this vulnerability to deliver our red team C2 (malware) payload directly into a target inbox to gain our initial foothold on a covert red team engagement. This allowed for a much more simple, reliable, and user-friendly payload delivery avenue than traditional phishing journeys. &lt;/p&gt;
&lt;h3&gt;Why is this a big deal?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-is-this-a-big-deal&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-is-this-a-big-deal&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The true reason I see this to be a potentially lucrative avenue for threat actors to deliver payloads is the fact that this bypasses nearly all modern anti-phishing security controls mentioned in the introduction of this advisory. &lt;/p&gt;
&lt;p&gt;Firstly, it is very straightforward to buy a domain similar to your target organisations and register it with M365. It avoids the need to use mature domains, with web servers, landing pages, CAPTCHAs, domain categorisation, and URL filtering. This is a huge time saver, as this can cost several days or more on a red team engagement when setting up the various bits of infrastructure needed for a convincing phishing campaign. &lt;/p&gt;
&lt;p&gt;Secondly, it avoids the now-rightfully-dangerous act of clicking on a link in an email, something that staff have been trained to avoid for years now, greatly reducing the likelihood of a typical staff member detecting this as a phishing attack. The payload will now be served by a trusted Sharepoint domain, and will arrive in the form of a file in a target’s Teams inbox. As such, the payload inherits the trust reputation of Sharepoint, not a malicious phishing website.&lt;/p&gt;
&lt;p&gt;Finally, when this vulnerability is combined with social engineering via Teams it becomes very easy to start a back-and-forth conversation, jump on a call, share screens, and more. By comparison, it makes social engineering via email feel very stagnant, and stop-start. When using this on a real engagement the pretext of an IT technician was used to ask the target if they could jump on a call to update some critical software. Once on the call this vulnerability was leveraged to deliver a payload and, when combined with a full social engineering attack, was implicitly trusted by the target. &lt;/p&gt;
&lt;h3&gt;Impact&lt;span class=&#34;absolute -mt-20&#34; id=&#34;impact&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#impact&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability affects every organisation using Teams in the default configuration. As such it has huge potential reach, and could be leveraged by threat actors to bypass many traditional payload delivery security controls. Having now proven this hypothesis, and used this vulnerability to successfully deliver malware that compromised a target machine in a client&amp;rsquo;s environment, I feel this has been successfully demonstrated as an exploitable finding.&lt;/p&gt;
&lt;h3&gt;Remediation and Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;remediation-and-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#remediation-and-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability was reported to Microsoft, who validated that the vulnerability is legitimate, but said that it ‘did not meet the bar for immediate servicing’. I think this is a shame, but was nonetheless expected. As such, JUMPSEC has added this section to help organisations who might be concerned about the above findings. &lt;/p&gt;
&lt;p&gt;Firstly, I urge you to review if there is a business requirement for external tenants to have permission to message your staff in the first place. Of course, many businesses do legitimately require communication with other organisations, service providers, and more. That is not the case, however, for all businesses that use Teams. If you are not currently using Teams for regular communication with external tenants, tighten up your security controls and remove the option altogether. This can be done in Microsoft Teams Admin Center &amp;gt; External Access.&lt;/p&gt;
&lt;p&gt;If you do require communication with external tenants, but there are only a handful of organisations that you regularly communicate with, then you can change the security settings to only allow communication with certain allow-listed domains. This would be a good middle ground for shutting down this attack path, without affecting your business operations. This can be done in Microsoft Teams Admin Center &amp;gt; External Access. &lt;/p&gt;
&lt;p&gt;If either of the above will not work in your unique business case you have a few options. Firstly, endeavour to educate staff on the possibility of productivity apps such as Teams, Slack, Sharepoint, etc, for launching social engineering campaigns. It is not just email that is being abused any more, and yet it seems, in my personal opinion, that when using alternative avenues to email there is an inherent trust, due to the rich history connecting phishing and emails. &lt;/p&gt;
&lt;p&gt;Regarding detections, there is currently limited support from Microsoft. Whilst there are plenty of Teams logs (see here for a full list &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&lt;/a&gt;) these do not currently cover the crucial ‘External Tenants Messaging your Staff’, or even better ‘Staff Member Accepts Message Request from External Tenant’. The latter would be preferable, as it would eliminate alerts from previously-known external tenants (your service providers, etc) and focus just on new message requests. I have reached out to Microsoft to attempt to turn on these logs so that they can be monitored in line with the increased usage of Teams for social engineering. If you agree that this should be made available, then please give the feature request a thumbs up (&lt;a href=&#34;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Whilst not a perfect solution, it would be possible to use web proxy logs to alert on, or more likely gain some baseline visibility into, staff members accepting external message requests. In EMEA, when a Teams user accepts a message request from an external tenant it sends a POST request to a unique URI which you can monitor:&lt;/p&gt;
&lt;p&gt;/api/mt/emea/beta/userSettings/acceptlist/manage&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19675&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;947&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/request_clean.png&#34; title=&#34;request clean&#34; alt=&#34;request clean&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;request clean&lt;/figcaption&gt;
  &lt;/figure&gt; URI for accepting external message requests[/caption]&lt;/p&gt;
&lt;p&gt;The difficulty, at present, is turning this into a useful piece of telemetry with usernames, and the message in question. Monitoring this will, however, give you an idea of how common this transaction is in your estate, and allow you to potentially implement some of the mitigation factors mentioned above with a more educated understanding. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As a Red Teamer regularly tasked with achieving an initial foothold in a target organisation, I have a unique appreciation and concern for the above-mentioned finding. With over 270 million active monthly users, Teams is incredibly common in target organisations. JUMPSEC’s Detection and Response Team (DART) have seen a trend towards novel phishing and payload delivery techniques leveraged in the wild, including but not limited to using Teams external tenancies for social engineering. With threat actors continually experimenting with new social engineering attacks, organisations are having to expand their security awareness to cover previously-overlooked frontiers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41550 Leostream Connection Broker - Authenticated Remote Code Execution</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41550&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41550&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the Leostream Connection Broker version: 9.0.40.17 allowed an attacker to upload any content through Third Party Content functionality, it was found that the application allowed the listed filenames below the ability to execute Perl programming language by default on the web application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions as soon as possible. Leostream&amp;rsquo;s release notes and advisories can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving remote code execution, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload Perl files to be executed server-side. The default web server configuration in use by the web application (which is accessible by downloading the archive at &amp;ldquo;Download Technical Support Package&amp;rdquo; link on the left menu bar from Leostream&amp;rsquo;s website) contained the httpd.conf, which shows that the following filenames can be executed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all_back.pl&lt;/li&gt;
&lt;li&gt;clients.pl&lt;/li&gt;
&lt;li&gt;config.pl&lt;/li&gt;
&lt;li&gt;database_error.pl&lt;/li&gt;
&lt;li&gt;error_document.pl&lt;/li&gt;
&lt;li&gt;fastlist.pl&lt;/li&gt;
&lt;li&gt;index.pl&lt;/li&gt;
&lt;li&gt;invite.pl&lt;/li&gt;
&lt;li&gt;license.pl&lt;/li&gt;
&lt;li&gt;logout.pl&lt;/li&gt;
&lt;li&gt;pcoip_broker.pl&lt;/li&gt;
&lt;li&gt;plan.pl&lt;/li&gt;
&lt;li&gt;rest.pl&lt;/li&gt;
&lt;li&gt;rpc.pl&lt;/li&gt;
&lt;li&gt;sam.pl&lt;/li&gt;
&lt;li&gt;saml.pl&lt;/li&gt;
&lt;li&gt;search.pl&lt;/li&gt;
&lt;li&gt;server.pl&lt;/li&gt;
&lt;li&gt;status.pl&lt;/li&gt;
&lt;li&gt;support.pl&lt;/li&gt;
&lt;li&gt;syslog_server.pl&lt;/li&gt;
&lt;li&gt;user.pl&lt;/li&gt;
&lt;li&gt;view.pl&lt;/li&gt;
&lt;li&gt;webquery.pl&lt;/li&gt;
&lt;li&gt;Welcome.pl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The malicious file will be made available under the /tpc/ directory on the web server. The attacker can then trigger the malicious code execution by visiting the uploaded files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41551 Leostream Connection Broker - Authenticated Zip Slip</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41551&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41551&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: path traversal, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Leostream Connection Broker 9.0.40.17 allows administrators to conduct directory traversal attacks by uploading a ZIP file that contains a symbolic link.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions to this new version as soon as possible. Leostream&amp;rsquo;s advice and release notes can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving local file inclusion, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload zip files to be extracted in the web server directory. The attackers uploaded zip file should be created with a symbolic link by executing “ln -s /etc/passwd passwd”, which can then be zipped using “zip &amp;ndash;symlink -r upload.zip passwd” to create the archive. After supplying the zip file to the application, the archive will be extracted and the target file (in this case /etc/passwd) will be accessible in the /tpc/ directory of the web server, in this example /tpc/passwd.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>CVE 2015-7547 glibc getaddrinfo() DNS Vulnerability</title>
      <link>//localhost:1313/articles/2016/03/2016-03-07-cve-2015-7547-glibc-getaddrinfo-dns-vulnerability/</link>
      <pubDate>Mon, 07 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2016/03/2016-03-07-cve-2015-7547-glibc-getaddrinfo-dns-vulnerability/</guid>
      <description>
        
        
        &lt;p&gt;Hello w0rld! JUMPSEC researchers have spent some time on the glibc DNS vulnerability indexed as CVE 2015-7547 (It hasn’t got a cool name like GHOST unfortunately…). It appears to be a highly critical vulnerability and covers a large number of systems. It allows remote code execution by a stack-based overflow in the client side DNS resolver. In this post we would like to present our analysis.&lt;/p&gt;
&lt;h2&gt;Google POC overview&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-overview&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-overview&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/1sts.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/1sts.png&#34; alt=&#34;1sts&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google POC Network Exploitation Timeline&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-network-exploitation-timeline&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-network-exploitation-timeline&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/draw-io_glibc-1.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/draw-io_glibc-1.png&#34; alt=&#34;draw-io_glibc (1)&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Google POC Exploit Code Analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-exploit-code-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-exploit-code-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;First response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;first-response&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#first-response&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_184&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;741&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/test.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/test.png&#34; alt=&#34;test&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter1.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter1.png&#34; alt=&#34;alter1&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Packet capture snippet&lt;/p&gt;
&lt;p&gt;The dw() function calls a “struct” module from python library. According to the documentation, it performs conversion between python values and C structs represented as python strings. In this case, it interprets python integer and pack it into little-endian short type binary data. This is a valid response sent by the “malicious” DNS server when it receives any initial queries. This response packet is constructed intentionally in large size (with 2500 bytes of null), it forces the client to retry over TCP and allocate additional memory buffer for the next response. This also triggers the dual DNS query from getaddrinfo() on the client side, which is a single request containing A and AAAA queries concatnated.&lt;/p&gt;
&lt;h3&gt;Second Response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;second-response&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#second-response&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_162&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;531&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter3.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter3.png&#34; alt=&#34;alter3&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_163&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;484&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter4.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter4.png&#34; alt=&#34;alter4&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Packet capture snippet[/caption]&lt;/p&gt;
&lt;p&gt;This is the second response sent by the malicious DNS server. It is a malformed packet sending large numbers of “fake records” (184 Answer RRs) back to the client. According to google, this forces __libc_res_nsend to retry the query.&lt;/p&gt;
&lt;h3&gt;Third response&lt;span class=&#34;absolute -mt-20&#34; id=&#34;thirdresponse&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#thirdresponse&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[caption id=&amp;ldquo;attachment_164&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;482&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter5.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter5.png&#34; alt=&#34;alter5&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Code snippet[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_165&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;493&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter5b.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter5b.png&#34; alt=&#34;alter5b&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Packet capture snippet[/caption]&lt;/p&gt;
&lt;p&gt;This is the third response sent by the “malicious” DNS server. It is another malformed packet which is carrying the payload. JUMPSEC researcher has modified the Google POC code to identify the the number of bytes to cause a segmentation fault (possibly overwriting the RET address) of the buffer. It is found that the RET address is being overwritten on the 2079th byte. With the addition of return_to_libc technique, an attacker can bypass OS protection such as NX bit or ASLR and perform remote code execution.&lt;/p&gt;
&lt;h2&gt;Google POC debugging and crash analysis&lt;span class=&#34;absolute -mt-20&#34; id=&#34;google-poc-debugging-and-crash-analysis&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#google-poc-debugging-and-crash-analysis&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;JUMPSEC has run it through the trusty gdb. It crashes with a SEGMENTATION FAULT which verifies that the DNS response has smashed the stack of the vulnerable client application when running getaddrinfo(). The vulnerable buffer is operated in gaih_getanswer. The entry address has been overwritten with 0x4443424144434241 (ABCDABCD). The state of the register also showing the overflowed bytes.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_166&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;888&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter6.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter6.png&#34; alt=&#34;alter6&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; SEGFAULT from vulnerable client. RET address is overwritten with “ABCDABCD”[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_167&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;889&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter7.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter7.png&#34; alt=&#34;alter7&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Backtrack[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_194&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;666&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/cropped.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/cropped.png&#34; alt=&#34;cropped&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Registers[/caption]&lt;/p&gt;
&lt;p&gt;JUMPSEC has also tested it on a few other applications. It was found that the getaddrinfo() function in glibc is commonly used…&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter9.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter9.png&#34; alt=&#34;alter9&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_170&amp;rdquo; align=&amp;ldquo;alignleft&amp;rdquo; width=&amp;ldquo;938&amp;rdquo;]&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2016/03/alter10.png&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/alter10.png&#34; alt=&#34;alter10&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt; Iceweasel crashing[/caption]&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The best way to mitigate this issue is to enforce proper patching management. Make sure to update all your systems with the latest version of glibc . If you have any systems exposed on the internet and you want to make sure that this vulnerability is not triggered then the following Wireshark filter could be useful: (DNS.length&amp;gt;2048 to see malformed packets). A DNS response has a maximum of 512 bytes (typically), note that the DNS reply is truncated. Even if the client does not accept large response, smaller responses can be combine into a large one which can also trigger the vulnerability. A possible filter is to monitor the size of the entire conversation as a distinct amount of bytes in total is require to trigger specific responses from vulnerable client and all of them requires more than 2048 bytes.&lt;/p&gt;
&lt;p&gt;The above vulnerability can be fixed by patching. If you are running RedHat or CentOS a simple&lt;/p&gt;
&lt;p&gt;&lt;em&gt;yum -y update glibc&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;will update the libc and resolve the issue (remember to restart the service right after the update!).&lt;/p&gt;
&lt;h2&gt;Reference links&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reference-links&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reference-links&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7547&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-7547&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://pubs.opengroup.org/onlinepubs/9699919799/functions/freeaddrinfo.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://googleonlinesecurity.blogspot.co.uk/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://googleonlinesecurity.blogspot.co.uk/2016/02/cve-2015-7547-glibc-getaddrinfo-stack.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://sourceware.org/ml/libc-alpha/2016-02/msg00416.html&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Microsoft Onenote Image Caching Bug (Confidential Information Leakage)</title>
      <link>//localhost:1313/articles/2015/03/2015-03-01-microsoft-onenote-image-caching-bug-confidential-information-leakage/</link>
      <pubDate>Sun, 01 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2015/03/2015-03-01-microsoft-onenote-image-caching-bug-confidential-information-leakage/</guid>
      <description>
        
        
        &lt;h2&gt;Bug Summary&lt;span class=&#34;absolute -mt-20&#34; id=&#34;bugsummary&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bugsummary&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A security bug in the Microsoft Onenote allows images placed in user-created password-protected sections to be cached persistently in the user profile temporary directory folder:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;C:\Users\%username%\AppData\Local\Temp.&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Analysing the content the temporary folder will reveal images that should be securely protected by Onenote.&lt;/p&gt;
&lt;h2&gt;Bug Scope&lt;span class=&#34;absolute -mt-20&#34; id=&#34;bug-scope&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bug-scope&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This has only been tested with Microsoft Onenote 2013 with all known updates installed. Last testing on 01/03/2015.&lt;/p&gt;
&lt;h2&gt;Find the Bug Guide&lt;span class=&#34;absolute -mt-20&#34; id=&#34;find-the-bug-guide&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#find-the-bug-guide&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Open Onenote and add a section to any existing notebook this will automatically create a page too.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_95&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;501&amp;rdquo;]&lt;img src=&#34;images/1-Create-Section-in-Onenote.png&#34; alt=&#34;Create Section in Onenote&#34; loading=&#34;lazy&#34; /&gt; Create Section in Onenote[/caption]&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Navigate to the REVIEW tab in the main menu and click password button (see image above), the pane on the right will appear and allow you to set a new section password (see image below). You should set one now.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_96&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;557&amp;rdquo;]&lt;img src=&#34;images/2-Set-a-section-password.png&#34; alt=&#34;Set a section password&#34; loading=&#34;lazy&#34; /&gt; Set a section password[/caption]&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;Exit Onenote, then reopen it and enter password to unlock section. Now we are secure right!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Open your explorer, and navigate to the following location:   &lt;em&gt;C:\Users\%username%\AppData\Local\Temp&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Leave this window open, your images will appear here shortly!&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_107&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;574&amp;rdquo;]&lt;img src=&#34;images/5-Navigate-to-Temporary-Directory-Fixed.png&#34; alt=&#34;Navigate to Temporary Directory&#34; loading=&#34;lazy&#34; /&gt; Navigate to Temporary Directory[/caption]&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;Open your web browser/explorer, find some images and copy and paste them into OneNote.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_97&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;188&amp;rdquo;]&lt;img src=&#34;images/4-Copy-and-Paste-Image-into-Onenote-188x300.png&#34; alt=&#34;Copy and Paste Image into Onenote&#34; loading=&#34;lazy&#34; /&gt; Copy and Paste Image into Onenote[/caption]&lt;/p&gt;
&lt;p&gt;On some occasions Onenote will cache the image immediately in the temp folder, you can delete these since they will be back shortly.&lt;/p&gt;
&lt;ol start=&#34;6&#34;&gt;
&lt;li&gt;Now close and reopen Onenote, you should enter the password to unlock section. During this stage Onenote caches the images in this password protected section in the temporary directory. Go take a look.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_108&amp;rdquo; align=&amp;ldquo;alignnone&amp;rdquo; width=&amp;ldquo;707&amp;rdquo;]&lt;img src=&#34;images/7-Microsoft-Onenote-Caches-Image-Fixed.png&#34; alt=&#34;Microsoft Onenote Caches Image&#34; loading=&#34;lazy&#34; /&gt; Microsoft Onenote Caches Image[/caption]&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Everything saved here is suppose to be in a password-protected section, but image are saved &lt;strong&gt;persistently&lt;/strong&gt; in the temp directory and could potentially leak confidential information.&lt;/p&gt;
&lt;h2&gt;Scenario&lt;span class=&#34;absolute -mt-20&#34; id=&#34;scenario&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#scenario&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a number of problems that arise from this security bug, a few example could be a scanned image of a handwritten form reveals confidential information or a screenshot of usernames/passwords/finances saved in Onenote.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
