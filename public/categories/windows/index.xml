<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Windows</title>
    <link>//localhost:1313/categories/windows/</link>
    <description>Recent content in Windows on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 21 Jun 2023 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Advisory: IDOR in Microsoft Teams Allows for External Tenants to Introduce Malware</title>
      <link>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</link>
      <pubDate>Wed, 21 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/06/2023-06-21-advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/</guid>
      <description>
        
        
        &lt;h3&gt;&lt;strong&gt;TL;DR&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Max Corbridge (@CorbridgeMax) and Tom Ellson (@tde_sec) of JUMPSEC’s Red Team recently discovered a vulnerability in the latest version of Microsoft Teams which allows for the possible introduction of malware into any organisations using Microsoft Teams in its default configuration. This is done by bypassing client-side security controls which prevent external tenants from sending files (malware in this case) to staff in your organisation. JUMPSEC has detailed remediation options, as well as some detection opportunities. &lt;/p&gt;
&lt;h3&gt;Introduction&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Introducing malware into target organisations is becoming increasingly difficult. Many of the traditional payload types (.exe, Office Macros, etc) are now heavily-scrutinised or have been proactively addressed to reduce their &lt;a href=&#34;https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;efficacy&lt;/em&gt;&lt;/a&gt;. Similarly, payload delivery avenues such as phishing are becoming increasingly monitored and secured to reduce the ease with which threat actors’ malware can reach end-user devices. Mail security controls, IP blocklists, domain reputation, email HTML, content inspection, third-party mail security products, URL filtering and many more must be bypassed for a phishing campaign to traverse all anti-phishing security controls and land in a target’s inbox. &lt;/p&gt;
&lt;p&gt;As such, threat actors and red teams alike are looking for newer and potentially overlooked avenues of payload delivery. One such novel avenue is Microsoft Teams External Tenants. Organisations that use Microsoft Teams (91% of the Fortune 100 according to &lt;a href=&#34;https://www.linkedin.com/pulse/91-fortune-100-companies-use-teams-techbanditshack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;this article&lt;/em&gt;&lt;/a&gt;) inherit Microsoft’s default configuration which allows users from outside of their organisation to reach out to their staff members. By allowing this, an entirely new avenue of social engineering (and now payload delivery as this blog will explain) is created.&lt;/p&gt;
&lt;h3&gt;Detail&lt;span class=&#34;absolute -mt-20&#34; id=&#34;detail&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#detail&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Microsoft Teams allows any user with a Microsoft account to reach out to ‘external tenancies’. Here, external tenancies can be thought of as any business or organisation using Microsoft Teams. These organisations each have their own Microsoft tenancy, and users from one tenancy are able to send messages to users in another tenancy. When doing so, an ‘External’ banner appears alongside the name as seen below. &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19671&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;391&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/external.png&#34; title=&#34;External banner on incoming message&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;External banner on incoming message&lt;/figcaption&gt;
  &lt;/figure&gt; External banner applied to incoming message requests[/caption]&lt;/p&gt;
&lt;p&gt;As someone who spent a long time doing purely social engineering (phishing, vishing, smshing, etc.) this is not a show stopper by any means. In my experience, whilst this banner (and the subsequent pop-up) may deter a handful of targets, there is still a significant percentage of staff that would click on a message from an external tenant and accept the subsequent warning that the user is ‘external’. In fact, this was proven only last month, as the techniques used in this blog post were successfully used to gain an initial foothold in a client’s environment as part of a red team engagement. This is especially true if the malicious party is impersonating a known member of your organisation, and has purchased and registered a brand-impersonation domain as red teams often do.&lt;/p&gt;
&lt;p&gt;When messaging staff in another organisation you are blocked from sending files to them, unlike with members of your own tenancy. See below the difference:&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19672&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1496&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Messaging a member of the same organisation&#34; alt=&#34;Messaging a member of the same organisation &#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Messaging a member of the same organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Messaging a member of the same organisation[/caption]&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19673&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1421&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2.png&#34; title=&#34;Restrictions when messaging someone in a different organisation&#34; alt=&#34;Restrictions when messaging someone in a different organisation&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Restrictions when messaging someone in a different organisation&lt;/figcaption&gt;
  &lt;/figure&gt; Restrictions when messaging someone in a different organisation[/caption]&lt;/p&gt;
&lt;p&gt;So far, this is nothing new. However, having leveraged this social engineering avenue in the past I began wondering if this security control could be bypassed to allow for seamless delivery of payloads directly into a target&amp;rsquo;s inbox on our red team engagements. I began looking online, and articles &lt;a href=&#34;https://aadinternals.com/post/teams-policies/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;like this&lt;/em&gt;&lt;/a&gt; suggested that certain security controls are actually implemented client-side in Microsoft Teams.&lt;/p&gt;
&lt;p&gt;I raised this with JUMPSEC’s Head of Offensive Security (Tom Ellson) and no more than 10 minutes later we had bypassed the security control and were able to send files into a target organisation. Exploitation of the vulnerability was straightforward using a traditional IDOR technique of switching the internal and external recipient ID on the POST request, usually here:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;/v1/users/ME/conversations/&amp;lt;RECIPIENT_ID&amp;gt;/messages &lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19674&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;1429&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3.png&#34; title=&#34;3&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;3&lt;/figcaption&gt;
  &lt;/figure&gt; Payload delivered directly into a target inbox[/caption]&lt;/p&gt;
&lt;p&gt;When sending the payload like this, it is actually hosted on a Sharepoint domain and the target downloads it from there. It appears, however, in the target inbox as a file, not a link. &lt;/p&gt;
&lt;p&gt;Having identified the issue, I wanted to validate that this vulnerability would work as intended as an avenue for payload delivery into a target organisation, and not fall short for some unknown reason when used in a mature client environment. As such, last month I used this vulnerability to deliver our red team C2 (malware) payload directly into a target inbox to gain our initial foothold on a covert red team engagement. This allowed for a much more simple, reliable, and user-friendly payload delivery avenue than traditional phishing journeys. &lt;/p&gt;
&lt;h3&gt;Why is this a big deal?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-is-this-a-big-deal&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-is-this-a-big-deal&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The true reason I see this to be a potentially lucrative avenue for threat actors to deliver payloads is the fact that this bypasses nearly all modern anti-phishing security controls mentioned in the introduction of this advisory. &lt;/p&gt;
&lt;p&gt;Firstly, it is very straightforward to buy a domain similar to your target organisations and register it with M365. It avoids the need to use mature domains, with web servers, landing pages, CAPTCHAs, domain categorisation, and URL filtering. This is a huge time saver, as this can cost several days or more on a red team engagement when setting up the various bits of infrastructure needed for a convincing phishing campaign. &lt;/p&gt;
&lt;p&gt;Secondly, it avoids the now-rightfully-dangerous act of clicking on a link in an email, something that staff have been trained to avoid for years now, greatly reducing the likelihood of a typical staff member detecting this as a phishing attack. The payload will now be served by a trusted Sharepoint domain, and will arrive in the form of a file in a target’s Teams inbox. As such, the payload inherits the trust reputation of Sharepoint, not a malicious phishing website.&lt;/p&gt;
&lt;p&gt;Finally, when this vulnerability is combined with social engineering via Teams it becomes very easy to start a back-and-forth conversation, jump on a call, share screens, and more. By comparison, it makes social engineering via email feel very stagnant, and stop-start. When using this on a real engagement the pretext of an IT technician was used to ask the target if they could jump on a call to update some critical software. Once on the call this vulnerability was leveraged to deliver a payload and, when combined with a full social engineering attack, was implicitly trusted by the target. &lt;/p&gt;
&lt;h3&gt;Impact&lt;span class=&#34;absolute -mt-20&#34; id=&#34;impact&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#impact&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability affects every organisation using Teams in the default configuration. As such it has huge potential reach, and could be leveraged by threat actors to bypass many traditional payload delivery security controls. Having now proven this hypothesis, and used this vulnerability to successfully deliver malware that compromised a target machine in a client&amp;rsquo;s environment, I feel this has been successfully demonstrated as an exploitable finding.&lt;/p&gt;
&lt;h3&gt;Remediation and Detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;remediation-and-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#remediation-and-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This vulnerability was reported to Microsoft, who validated that the vulnerability is legitimate, but said that it ‘did not meet the bar for immediate servicing’. I think this is a shame, but was nonetheless expected. As such, JUMPSEC has added this section to help organisations who might be concerned about the above findings. &lt;/p&gt;
&lt;p&gt;Firstly, I urge you to review if there is a business requirement for external tenants to have permission to message your staff in the first place. Of course, many businesses do legitimately require communication with other organisations, service providers, and more. That is not the case, however, for all businesses that use Teams. If you are not currently using Teams for regular communication with external tenants, tighten up your security controls and remove the option altogether. This can be done in Microsoft Teams Admin Center &amp;gt; External Access.&lt;/p&gt;
&lt;p&gt;If you do require communication with external tenants, but there are only a handful of organisations that you regularly communicate with, then you can change the security settings to only allow communication with certain allow-listed domains. This would be a good middle ground for shutting down this attack path, without affecting your business operations. This can be done in Microsoft Teams Admin Center &amp;gt; External Access. &lt;/p&gt;
&lt;p&gt;If either of the above will not work in your unique business case you have a few options. Firstly, endeavour to educate staff on the possibility of productivity apps such as Teams, Slack, Sharepoint, etc, for launching social engineering campaigns. It is not just email that is being abused any more, and yet it seems, in my personal opinion, that when using alternative avenues to email there is an inherent trust, due to the rich history connecting phishing and emails. &lt;/p&gt;
&lt;p&gt;Regarding detections, there is currently limited support from Microsoft. Whilst there are plenty of Teams logs (see here for a full list &lt;a href=&#34;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-teams-audit-log-events?view=o365-worldwide&lt;/a&gt;) these do not currently cover the crucial ‘External Tenants Messaging your Staff’, or even better ‘Staff Member Accepts Message Request from External Tenant’. The latter would be preferable, as it would eliminate alerts from previously-known external tenants (your service providers, etc) and focus just on new message requests. I have reached out to Microsoft to attempt to turn on these logs so that they can be monitored in line with the increased usage of Teams for social engineering. If you agree that this should be made available, then please give the feature request a thumbs up (&lt;a href=&#34;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://feedbackportal.microsoft.com/feedback/idea/16fe3111-4410-ee11-a81c-000d3a7a48db&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Whilst not a perfect solution, it would be possible to use web proxy logs to alert on, or more likely gain some baseline visibility into, staff members accepting external message requests. In EMEA, when a Teams user accepts a message request from an external tenant it sends a POST request to a unique URI which you can monitor:&lt;/p&gt;
&lt;p&gt;/api/mt/emea/beta/userSettings/acceptlist/manage&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19675&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;947&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/request_clean.png&#34; title=&#34;request clean&#34; alt=&#34;request clean&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;request clean&lt;/figcaption&gt;
  &lt;/figure&gt; URI for accepting external message requests[/caption]&lt;/p&gt;
&lt;p&gt;The difficulty, at present, is turning this into a useful piece of telemetry with usernames, and the message in question. Monitoring this will, however, give you an idea of how common this transaction is in your estate, and allow you to potentially implement some of the mitigation factors mentioned above with a more educated understanding. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As a Red Teamer regularly tasked with achieving an initial foothold in a target organisation, I have a unique appreciation and concern for the above-mentioned finding. With over 270 million active monthly users, Teams is incredibly common in target organisations. JUMPSEC’s Detection and Response Team (DART) have seen a trend towards novel phishing and payload delivery techniques leveraged in the wild, including but not limited to using Teams external tenancies for social engineering. With threat actors continually experimenting with new social engineering attacks, organisations are having to expand their security awareness to cover previously-overlooked frontiers.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Butting Heads with a Threat Actor on an Engagement</title>
      <link>//localhost:1313/articles/2023/04/2023-04-17-butting-heads-with-a-threat-actor-on-an-engagement/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2023/04/2023-04-17-butting-heads-with-a-threat-actor-on-an-engagement/</guid>
      <description>
        
        
        &lt;p&gt;At the time of writing I am enjoying some non-billable time in the wake of a demanding engagement spanning across several months. As such, I thought it would be a good time to write up a war story from a recent project in which we came head to head against genuine and active threat actors whilst on an engagement.&lt;/p&gt;
&lt;p&gt;To set the scene, I am working on a purple team project in which we are to cover both the external and internal estate. This tale comes from the external portion of the engagement and as such my colleague and I are going about our usual external red team attack methodology. During this external phase we identify several instances of servers running a software that will remain unnamed for confidentiality’s sake. I will say that this was a third-party software that is used for Identity Access Management, and it appeared to be used in several environments (pre-prod, production, etc) within the client’s estate.&lt;/p&gt;
&lt;p&gt;We fingerprint the exact version of the technology in-use and find that it is in fact vulnerable and outdated. Specifically, it is vulnerable to an unrestricted file upload vulnerability. As is so often the case, metasploit had created a module for the automated exploitation of this vulnerability - great news! As this is not a covert red team, and therefore getting detected is not an issue, I attempt to exploit the file upload vulnerability using meterpreter and msfvenom. Alas, the exploit fails. Undeterred, I look to manually verify the vulnerability myself as I so often find myself doing when metasploit fails me.&lt;/p&gt;
&lt;p&gt;I find a proof-of-concept script on Github and read through the code. It looks good so I quickly write (steal) a JSP webshell to accompany the script and point the pair at my client’s vulnerable servers. This time, it works. With what feels like ‘too good to be true’ ease I’ve got remote code execution on the production Single Sign On (SSO) and Identity Access Management (IAM) server! As always in these cases I let the client know immediately before digging a little bit deeper.&lt;/p&gt;
&lt;p&gt;When landing on an unknown machine I want to immediately perform some situational awareness. From an external perspective this may look slightly different to internal. Some of the main questions include: What OS/distribution am I using? What user and permissions do I have? Am I domain-joined? Do I have visibility into the internal network?&lt;/p&gt;
&lt;p&gt;I quickly determine these answers and find that I am running as a low-privileged user, on a unix machine, that is not domain-joined. Not as juicy as I originally thought, but this is still the production SSO and IAM box so I am hopeful. At this point I get my first inclination that maybe such a trivial exploit chain may have already been abused. I run an &lt;em&gt;ls&lt;/em&gt; to look for the existence of other webshells beyond just my own.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19445&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;663&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/1.png&#34; title=&#34;Figure 1&#34; alt=&#34;Output of ’ls’ command&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 1&lt;/figcaption&gt;
  &lt;/figure&gt; Output of &amp;rsquo;ls&amp;rsquo; command[/caption]&lt;/p&gt;
&lt;p&gt;As you can see it appears that I am in the site root of the server. However, what I do not see is the name of my own webshell (cmd.jsp) meaning that my file must not have been uploaded to the site root, more likely it is in the webroot.&lt;/p&gt;
&lt;p&gt;To find the location of the webroot I simply use my webshell to search for the location of my webshell file name to find where all files uploaded via this exploit would land on the file system. Sure enough, I found the appearance of my webshell in a folder that we will falsely call &lt;em&gt;/home/UserName/AppName/Authenticated.&lt;/em&gt; The natural next step is to list the contents of this directory as seen in the screenshot below.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19451&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;265&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/2-1.png&#34; title=&#34;Figure 2&#34; alt=&#34;2 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 2&lt;/figcaption&gt;
  &lt;/figure&gt; Contents of Webroot[/caption]&lt;/p&gt;
&lt;p&gt;Whilst this was useful, it was listing the files in alphabetical order which made it difficult to process which file could be a malicious JSP file versus one naturally used for webserver installation. I do another &lt;em&gt;ls&lt;/em&gt; command but this time listing the contents of the directory in descending order of date modified. That helps clear things up!&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19452&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;556&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/3-1.png&#34; title=&#34;Figure 3&#34; alt=&#34;3 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 3&lt;/figcaption&gt;
  &lt;/figure&gt; Contents sorted by Date Modified[/caption]&lt;/p&gt;
&lt;p&gt;I immediately notice the large number of files that have the exact same last modified date and time on Feb 9th. My assumption is that Feb 9th was when the webserver was installed, as all the installation files share this modification date. This leaves 8 files that have been uploaded in the 21 days since installation. The top entry (cmd.jsp) is my webshell and can be excluded. Judging by the time stamps and similar file names this still leaves several unaccounted for JSP files. Naturally, I did a &lt;em&gt;cat&lt;/em&gt; on those files and sure enough…they were also webshells.&lt;/p&gt;
&lt;p&gt;[caption id=&amp;ldquo;attachment_19453&amp;rdquo; align=&amp;ldquo;aligncenter&amp;rdquo; width=&amp;ldquo;477&amp;rdquo;]&lt;figure&gt;
    &lt;img src=&#34;images/4-1.png&#34; title=&#34;Figure 4&#34; alt=&#34;4 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;Figure 4&lt;/figcaption&gt;
  &lt;/figure&gt; Threat Actor Webshells[/caption]&lt;/p&gt;
&lt;p&gt;At this point I know we have stumbled upon something bad. I phone the client and let them know the news whilst I continue trying to attribute some of the webshells. Due to the fact that some of the files had very similar names and were uploaded consecutively I can safely assume that they belong to the same threat actor. When grouping as such, I arrive at the conclusion that there have been 4 threat actors who have exploited this in the last 5 days!&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/5-1.png&#34; title=&#34;5 1&#34; alt=&#34;5 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;5 1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is, of course, not counting any threat actors who had deleted their webshells when not in use like I had done. In the same vein, it is important to bear in mind that this was only one of several appearances of this vulnerable server in the estate.&lt;/p&gt;
&lt;p&gt;I reach out to the client to ask permission to repeat the same process on the other vulnerable instances, but by this point the client has engaged their Managed Detection and Response (MDR) provider who has already begun the digital forensics work of identifying the extent of the damage,  whilst the client’s security team begin working on a patch. I write up a professional document containing all my findings, remediation steps, etc., and hand it over to both parties.&lt;/p&gt;
&lt;p&gt;Later that evening I receive an email saying that the vulnerability has been patched and, thankfully, it appears it was caught before it became too much of an issue. However, the MDR provider did see attempts to jump from the external box to the internal network, and confirmed that the box had been enrolled in a crypto mining bot network to use its resources for crypto mining. All things considered this was a pretty good outcome after the initial shock of compromising such a sensitive system.&lt;/p&gt;
&lt;p&gt;And with that quick turnaround my brief headbutt with a genuine and active threat actor(s) came to an end. It is not every day that you get findings like this but it lit the fire in me to get more exposure to the Incident Response side of things, and the client was happy we’d found and fixed a critical vulnerability in just a handful of hours. Wins all round!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>No Logs? No Problem! Incident Response without Windows Event Logs</title>
      <link>//localhost:1313/articles/2021/11/2021-11-22-no-logs-no-problem-incident-response-without-windows-event-logs/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/11/2021-11-22-no-logs-no-problem-incident-response-without-windows-event-logs/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Incident-Response.png&#34; alt=&#34;Jumpsec icons Incident Response&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this article, we discuss some Digital Forensics and Incident Response (DFIR) techniques you can leverage when you encounter an environment &lt;strong&gt;without Windows event logs&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Where are the logs?&lt;/h1&gt;&lt;p&gt;At JUMPSEC, we regularly respond to security &lt;strong&gt;incidents with ineffective logging&lt;/strong&gt; and auditing for the purposes of a cyber incident. In some cases, organisations we encounter don’t have any recognisable SIEM or centralised log repository. In others, organisations with otherwise sufficient logging have seen &lt;strong&gt;adversaries intentionally manipulate the logs on an endpoint to prevent analysis&lt;/strong&gt; - sometimes even wiping them entirely. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clearing the event logs on a Windows machine &lt;a href=&#34;https://www.youtube.com/watch?v=00EwvDKaKyQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is trivial&lt;/a&gt;. It is a recognised behaviour of adversaries [&lt;a href=&#34;https://attack.mitre.org/techniques/T1070/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;T1070.001&lt;/a&gt;] who wish to evade and frustrate investigators’ efforts to unravel the TTPs of a malicious campaign. Without the event logs on a machine, you cannot use beautiful tools &lt;a href=&#34;https://github.com/countercept/chainsaw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;like Chainsaw&lt;/a&gt; to easily piece together the story for your client. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thankfully, our guidance is relevant to all situations where logs are unavailable to support an investigation. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/bat.png&#34; alt=&#34;bat&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Log-less investigations&lt;/h1&gt;&lt;p&gt;For the rest of this article, I would like us to &lt;strong&gt;operate under a log-free paradigm - where the event logs cannot be utilised in an investigation&lt;/strong&gt;. I’d like us to discuss &lt;strong&gt;three&lt;/strong&gt; DFIR techniques that you can easily deploy when next conducting analysis on a machine that an adversary has tampered with. The machine may or may not have the required logs, or you may not trust the evidence - meaning we must verify past events through other means.  &lt;/p&gt;
&lt;p&gt;As we do not have the permanency that event logs offer, we are left with volatile forensic data. Simply put, &lt;strong&gt;if you do not get to most forensic data as quickly as possible then it may be gone forever&lt;/strong&gt;. If the machine is rebooted, the data can be lost; if the machine is left on and is used, many pieces of forensic evidence may be overwritten and lost forever.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackingarticles.in/comprehensive-guide-on-ftk-imager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Taking a forensic image&lt;/a&gt; is out of scope for this article, however it may be advisable to do it as quickly as possible to ensure you can access the volatile, capricious data consistently throughout an investigation. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are many techniques for digital forensics. To understand and deploy the more advanced tools, there are many wise sages who I would recommend, such as &lt;a href=&#34;https://www.youtube.com/channel/UCy8ntxFEudOCRZYT1f7ya9Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richard Davis’ 13Cubed&lt;/a&gt;. In particular, there are three (or &lt;strong&gt;four, if you’re feeling brave&lt;/strong&gt;) post-log techniques I consider to have a &lt;strong&gt;low barrier&lt;/strong&gt; to entry in terms of technical capability, have general &lt;strong&gt;resiliency&lt;/strong&gt; to adversarial manipulation, and are &lt;strong&gt;relevant&lt;/strong&gt; to Windows endpoints and servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#PSReadLine&#34; &gt;&lt;strong&gt;PSReadLine&lt;/strong&gt;&lt;/a&gt; (PowerShell History)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prefetch&#34; &gt;&lt;strong&gt;Prefetch&lt;/strong&gt;&lt;/a&gt; (PEcmd)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shimcache&#34; &gt;&lt;strong&gt;Shimcache&lt;/strong&gt;&lt;/a&gt; (AppCompatcache)&lt;/li&gt;
&lt;li&gt;BONUS: &lt;a href=&#34;#usn-journal&#34; &gt;&lt;strong&gt;USN Journal&lt;/strong&gt;&lt;/a&gt; (via Velociraptor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;PSReadLine&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;This first one is a technique I do not see discussed that much&lt;/strong&gt;. And I’m not sure why. It has definitely illuminated parts of an attack that were once a mystery to me in the early stages of an investigation. The only detailed post I can find is &lt;a href=&#34;https://community.sophos.com/sophos-labs/b/blog/posts/powershell-command-history-forensics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a blog by Sophos&lt;/a&gt;, but I find it lacks some of the operational guidance that an investigator needs. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psreadline/?view=powershell-7.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PsReadLine is a PowerShell module&lt;/a&gt; that can do lots of cool things. Most pertinent for our conversation is its ability to &lt;strong&gt;offer insight into the history of the PowerShell&lt;/strong&gt; commands previously run.&lt;/p&gt;
&lt;p&gt;If we run some commands, we can instantly recall them via &lt;code&gt;history&lt;/code&gt; (this isn’t the DFIR part, I promise).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-file-1024x330.png&#34; alt=&#34;unnamed file&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, if the machine is rebooted (&lt;code&gt;`Restart-Computer`&lt;/code&gt;), or the history cleared (&lt;code&gt;`Clear-History`&lt;/code&gt;) then that history is lost. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moreover, running the &lt;code&gt;history&lt;/code&gt; command &lt;strong&gt;will only return the history of the current user and session&lt;/strong&gt; - so other users who sign into the machine and run commands will remain a mystery… &lt;em&gt;Or maybe not?&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;PSReadLine: Retrieve PowerShell History&lt;span class=&#34;absolute -mt-20&#34; id=&#34;psreadline-retrieve-powershell-history&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#psreadline-retrieve-powershell-history&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PSReadLine will save the &lt;a href=&#34;https://social.technet.microsoft.com/Forums/en-US/7c3cd614-f793-4b99-b826-3dff917ebe88/powershell-commands-history-windows-10-1809-psreadline?forum=win10itprogeneral#:~:text=By%20default%2C%20the%20PowerShell%20in,separately%20for%20PowerShell%20and%20ISE.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last four thousand commands&lt;/a&gt; a user has run into a particular file. &lt;strong&gt;If you query each users’ &lt;em&gt;ConsoleHost_history.txt&lt;/em&gt;, you can retrieve these commands.&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;get-content&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\*\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Roaming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSReadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConsoleHost_history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/4-edited.png&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, we can see the commands I ran above. These were &lt;strong&gt;previously lost&lt;/strong&gt; to us when the machine was rebooted and/or the history wiped… &lt;strong&gt;but here they are available for us&lt;/strong&gt; to piece together what the adversary did!&lt;/p&gt;
&lt;p&gt;I wouldn’t want you to have to manually do this for every user’s history - that would waste your precious time! On an endpoint, we can &lt;strong&gt;run a quick loop&lt;/strong&gt; that will print every user &lt;em&gt;ConsoleHost_history&lt;/em&gt; file:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Users&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Gci &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\*\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Roaming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSReadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConsoleHost_history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FullName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Pasts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Pasts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;----User Pwsh History Path &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;---&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ForegroundColor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;get-content&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/5-edited-1.png&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From our short script, in the pink text we&amp;rsquo;ve printed the users’ Console History file. This will snitch on last four thousand commands from each &lt;strong&gt;user account&lt;/strong&gt;. We can also see that in the red arrow and box &lt;strong&gt;Frank’s account&lt;/strong&gt; is highlighted for &lt;strong&gt;deploying Mimikatz!&lt;/strong&gt; Below Frank’s commands, we can see the IEUser’s PowerShell history begins to also be printed. &lt;/p&gt;
&lt;p&gt;This was the first technique to trace the steps of the adversary. But keep in mind some caveats: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, an attacker may just delete this file as part of their clean up operation; &lt;/li&gt;
&lt;li&gt;Second, it will only record PowerShell - not cmd or wmic; &lt;/li&gt;
&lt;li&gt;Third, it will only record up to 4096 PowerShell commands; &lt;/li&gt;
&lt;li&gt;and finally, &lt;strong&gt;the console host history text file will &lt;a href=&#34;https://www.cloudsavvyit.com/8722/using-psreadline-in-powershell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;not be available on all Windows OS’ and builds&lt;/a&gt;&lt;/strong&gt;&lt;a href=&#34;https://www.cloudsavvyit.com/8722/using-psreadline-in-powershell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Prefetch&lt;/h1&gt;&lt;p&gt;If you go to the directory &lt;code&gt;C:\Windows\Prefetch&lt;/code&gt; on a Windows &lt;strong&gt;endpoint&lt;/strong&gt;, you&amp;rsquo;re in for a treat. &lt;/p&gt;
&lt;p&gt;Prefetch (also known as prefetcher) is &lt;strong&gt;a caching technique&lt;/strong&gt; whereby an application is monitored and catalogued for the first few seconds it is launched, to make &lt;strong&gt;re-launching more efficient.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If this sounds like something awesome for &lt;a href=&#34;https://www.youtube.com/watch?v=f4RAtR_3zcs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a log-less investigation&lt;/a&gt;, then you’re right!&lt;/p&gt;
&lt;p&gt;If you sort by the prefetch files recently written to, &lt;strong&gt;you can see the executables recently deployed by both the user and the computer itself.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;dir &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:\Windows\Prefetch&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sort &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LastWriteTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-desc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/6-1024x683.png&#34; alt=&#34;6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we look very closely at the prefetch files (.PF), we can see that &lt;strong&gt;Mimikatz&lt;/strong&gt; makes a special guest appearance!! This &lt;strong&gt;evidences that Mimikatz has been executed&lt;/strong&gt;, but we don&amp;rsquo;t get any more context from the name of the prefetch file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7-edited-1.png&#34; alt=&#34;7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Prefetch: PECmd&lt;span class=&#34;absolute -mt-20&#34; id=&#34;prefetch-pecmd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#prefetch-pecmd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The contents of a prefetch file cannot be simply read to gather more execution context! This is where &lt;a href=&#34;https://github.com/EricZimmerman/PECmd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eric Zimmerman’s PEcmd&lt;/a&gt; comes to save the day. &lt;strong&gt;This tool will carve through the prefetch directory or a prefetch file&lt;/strong&gt;, and &lt;strong&gt;make it easier for investigators&lt;/strong&gt; to see the discrete info about the prefetched data. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# I’d advise picking the -f flag, and picking on one of the prefetch files you see in the directory
.\PECmd .exe -f &amp;#39;C:\Windows\prefetch\MIMIKATZ.EXE-599C44B5.pf&amp;#39; 

#get granular timestamps by adding -mp flag
.\PECmd .exe -f &amp;#39;C:\Windows\prefetch\MIMIKATZ.EXE-599C44B5.pf&amp;#39; -mp

# If you don’t know what file you want to process, get the whole directory. Will be noisy though and I wouldn’t recommend
.\PECmd .exe -d &amp;#39;C:\Windows\Prefetch&amp;#39; --csv . #dot at the end means write in current directory&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/8-edited.png&#34; alt=&#34;8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You get a whole load more with PECmd. Let’s look in more detail at what you’re given. &lt;/p&gt;
&lt;p&gt;First, we can see the various times associated with this executable (creation, modification etc). We’re also told about the executable name and file size. Interestingly, on the last line &lt;strong&gt;we can see the amount of times the executable has been run&lt;/strong&gt; (once, on our instance) as well as the time it was last run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/9.png&#34; alt=&#34;9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, we are given &lt;strong&gt;insight into the directories and then the files that were involved in this execution&lt;/strong&gt; - this is again another excellent way to better map the granular behaviour the adversary had during their attack. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.png&#34; alt=&#34;10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that Eric Zimmerman is kind enough to highlight the offending executable. PEcmd can do even more if you want to &lt;a href=&#34;https://binaryforay.blogspot.com/2016/01/introducing-pecmd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check out some other blog posts and docs&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/11-1024x433.png&#34; alt=&#34;11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some caveats for this second technique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, prefetch exists from Windows XP onwards, but PEcmd &lt;strong&gt;will only work from Windows 8 above;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Second, &lt;strong&gt;you don’t retrieve the arguments or parameters used&lt;/strong&gt; and so can only know the base executable that the adversary leveraged;&lt;/li&gt;
&lt;li&gt;Third, the relevancy of prefetch is &lt;strong&gt;time-based&lt;/strong&gt; - so if you do not collect it after an incident and the machine continues to be used then you may lose the evidence;&lt;/li&gt;
&lt;li&gt;Fourth and most important, &lt;strong&gt;prefetch has to be enabled on servers, as &lt;a href=&#34;https://www.forensicfocus.com/forums/mobile-forensics/prefetch-on-windows-servers/#:~:text=1.-,Is%20there%20a%20technical%20reason%20that%20this%20is%20off%3F,like%2C%20well%E2%80%A6running%20applications.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft disables recording prefetch on Windows servers by default&lt;/a&gt;. It is enabled on normal Windows endpoints.&lt;/strong&gt; You can &lt;strong&gt;&lt;a href=&#34;https://truesecdev.wordpress.com/2015/11/25/how-to-enable-prefetch-in-windows-server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;enable prefetch recording&lt;/a&gt;&lt;/strong&gt; with the following on a Windows Server:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EnablePrefetcher&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REG_DWORD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Prefetcher&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaxPrefetchFiles&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REG_DWORD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;8192&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Enable-MMAgent&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OperationAPI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;start &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sysmain&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Shimcache&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.fireeye.com/content/dam/fireeye-www/services/freeware/shimcache-whitepaper.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shimcache&lt;/a&gt; analysis is our third technique to gather insight into an attacker’s past activities. &lt;/p&gt;
&lt;p&gt;Shimcache - called AppCompatCache on a Windows machine - was originally made to determine interoperability issues between Windows versions and applications.  Like prefetch, &lt;a href=&#34;https://www.youtube.com/watch?v=7byz1dR_CLg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;we can leverage shimcache to identify evidence of execution&lt;/a&gt; on a machine when we do not have event logs. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ericzimmerman.github.io/#!index.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Another Eric Zimmerman tool&lt;/a&gt; called &lt;strong&gt;AppCompatCacheParser&lt;/strong&gt; can give us insight into what was run on the system. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppCompatCacheParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-csvf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shimcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csv&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/12-edited.png&#34; alt=&#34;12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This will create a CSV, which you could import to your spreadsheet of choice… but some quick PowerShell can give you some visibility. There will be a lot of noise here, but if we filter through we can find something quite interesting.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;import-csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shimcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sort &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lastmodified&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Descending&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/13-edited.png&#34; alt=&#34;13&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Despite not having access to the event logs, if we query &lt;strong&gt;shimcache we can see proof of Mimikatz’ execution&lt;/strong&gt;, once again. Shimcache is a relatively straightforward artefact to query. It does however have &lt;strong&gt;some complications&lt;/strong&gt;, as its implementation varies in Windows versions over the years. And again, if an investigator is not quick enough to gather the shimcache data then it may be lost!&lt;/p&gt;
&lt;h1&gt;BONUS: USN Journal&lt;/h1&gt;&lt;p&gt;The USN journal isn’t as easy an artefact to investigate as it is &lt;strong&gt;extremely&lt;/strong&gt; &lt;strong&gt;verbose.&lt;/strong&gt; I’ve included it as &lt;strong&gt;a bonus fourth tip&lt;/strong&gt;, in case the above three techniques fail to deliver you any insight for your log-less investigation. &lt;/p&gt;
&lt;p&gt;The USN journal leverages some of the artefacts we have previously encountered (like prefetch). &lt;strong&gt;It also can reach much further back&lt;/strong&gt; into the past, compared to other volatile artefacts, and identify files that were long deleted - excellent for DFIR purposes [&lt;a href=&#34;https://www.youtube.com/watch?v=1mwiShxREm8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=_qElVZJqlGY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Velocidex/velociraptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr Michael Cohen’s Velociraptor&lt;/a&gt; is an excellent tool to help us leverage the USN journal to see what an adversary did. Fortunately, there is &lt;a href=&#34;https://velociraptor.velocidex.com/carving-usn-journal-entries-72d5c66971da&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a dedicated blog&lt;/a&gt; that offers step-by-step advice on how best to leverage Velociraptor to hunt USN details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I’d recommend Velociraptor for its low technical barrier&lt;/strong&gt; to &lt;a href=&#34;https://www.hackingarticles.in/threat-hunting-velociraptor-for-endpoint-monitoring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deploy many other advanced forensic techniques&lt;/a&gt;, including prefetch hunts.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;USN Journal: Velociraptor&lt;span class=&#34;absolute -mt-20&#34; id=&#34;usn-journal-velociraptor&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#usn-journal-velociraptor&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can download Velociraptor on a machine we are investigating and launch it straight there - n&lt;strong&gt;o need to set up any server-client infrastructure&lt;/strong&gt;, when in an emergency: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;velociraptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gui&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#spin this up as admin&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/14-1024x395.png&#34; alt=&#34;14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The web browser will pop up, and we will be met with Velociraptor&amp;rsquo;s GUI. We can traverse to the main hunting page and name our hunt. We can then pick the &lt;strong&gt;USN&lt;/strong&gt; &lt;strong&gt;forensic&lt;/strong&gt; &lt;strong&gt;hunt&lt;/strong&gt;, and fire it off.&lt;/p&gt;
&lt;p&gt;Whilst the results are being collected and parsed, we can write some VQL (&lt;a href=&#34;https://velociraptor.velocidex.com/the-velociraptor-query-language-pt-1-d721bff100bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Velociraptor Query Language&lt;/a&gt;) to &lt;strong&gt;sort the results by timestamp&lt;/strong&gt;, and filter out some other headers we don’t care about: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Usn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fullpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileAttributes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Reason&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SourceInfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In our USN journal results, we can see &lt;strong&gt;the relics of a Mimikatz&lt;/strong&gt; execution, along with the timestamp that we can use to map the adversaries timeline. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/15-edited-1.png&#34; alt=&#34;15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the USN journal is often &lt;strong&gt;challenging to navigate when used in a real life incident.&lt;/strong&gt; My arbitrary example with Mimikatz doesn’t quite convey the &lt;strong&gt;complexity&lt;/strong&gt; and &lt;strong&gt;verbosity&lt;/strong&gt; that you will face when leveraging the USN journal in a real investigation. For example, in our artificial scenario, just &lt;strong&gt;a few runs&lt;/strong&gt; of Mimikatz resulted in near &lt;strong&gt;97 rows&lt;/strong&gt; in the USN journal, via Velociraptor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/16.png&#34; alt=&#34;16&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Burn the logs, see if I care!&lt;/h1&gt;&lt;p&gt;This has been an overview into a number of &lt;strong&gt;easy to use, highly-reliable, rapid digital forensics techniques&lt;/strong&gt;. I have found these techniques &lt;strong&gt;useful in investigations where the event logs can no longer be trusted or accessed&lt;/strong&gt; due to adversarial tampering, or perhaps where &lt;strong&gt;logging was not set up&lt;/strong&gt; in the first place by the client. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/elmo.png&#34; alt=&#34;elmo&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have barely scratched the surface of digital forensics and incident response. There are still a whole load of techniques you can deploy when you find that Windows event logs cannot deliver you the puzzle pieces you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to read about &lt;strong&gt;amcache,&lt;/strong&gt; I can recommend this &lt;a href=&#34;https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;excellent paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checkout the rest of &lt;a href=&#34;https://ericzimmerman.github.io/#!index.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eric Zimmerman’s awesome tools!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you need to explore a &lt;strong&gt;forensic&lt;/strong&gt; &lt;strong&gt;image&lt;/strong&gt; or &lt;strong&gt;memory dump&lt;/strong&gt;, I can recommend some &lt;a href=&#34;https://github.com/Purp1eW0lf/Blue-Team-Notes#Digital-Forensics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheets&lt;/a&gt; (shameless plug) on leveraging tools like &lt;a href=&#34;https://github.com/volatilityfoundation/volatility/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Volatility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For more information on DFIR techniques, &lt;a href=&#34;https://www.youtube.com/c/13cubed/videos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richard Davis 13Cubed videos&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/13cubed/videos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;are essential educational resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you’re next tasked with &lt;strong&gt;a log-less investigation&lt;/strong&gt;, see if you can leverage &lt;strong&gt;PowerShell history, prefetch, shimcache, and the USN journal&lt;/strong&gt; to identify any undiscovered nuance to your adversaries’ campaign. &lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>PowerShell Jobs</title>
      <link>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Detection-1.png&#34; alt=&#34;Jumpsec icons Detection 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC investigators recently observed an adversary weaponising PowerShell Jobs to schedule their attack, whilst responding to an incident. In this article, we discuss what PowerShell jobs are, how they can be leveraged for malicious purposes, and how defenders can protect, detect, and respond to neutralise the threat. &lt;/p&gt;
&lt;h1&gt;What are PowerShell Jobs&lt;/h1&gt;&lt;p&gt;Adversaries are known to &lt;a href=&#34;https://attack.mitre.org/techniques/T1053/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schedule parts&lt;/a&gt; of their campaign once they have infiltrated a target network. They may timetable their attack for an opportune moment (such as during unsociable hours, based on the region in which the infrastructure is hosted, or support teams reside) or set up a recurring task to ensure ongoing &lt;a href=&#34;https://attack.mitre.org/tactics/TA0003/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;persistence&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psscheduledjob/?view=powershell-5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PowerShell jobs&lt;/a&gt; aren’t designed to be inherently malicious and have many legitimate use cases. However, as is often the case in cyber security, the innate functionality of PowerShell Jobs and its susceptibility to abuse means it can also be leveraged by an adversary. &lt;/p&gt;
&lt;h2&gt;Using legitimately&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-legitimately&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-legitimately&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When using the command line for most operating systems, users have to run a command and wait a microsecond for the system to return with a reply. This can be inconvenient - for example, when running a script that will take a while to run, or when you know that you want to run the command at a specific time or date in the future. &lt;/p&gt;
&lt;p&gt;When using PowerShell, a job allows you to push a task into the background. PowerShell will continue to work on your query behind the scenes and allow you to continue using the shell for other things. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Push command to the background&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Start-Job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Retrieve the results of the backgrounded command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Receive-job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image6-1024x407.png&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;According to schedule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;according-to-schedule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#according-to-schedule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PowerShell jobs can also be &lt;strong&gt;scheduled&lt;/strong&gt; to execute on very particular conditions&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#organise when the task should trigger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Daily&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4:15 AM&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DaysInterval&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#register the PowerShell job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collect_date&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image15-1-1024x234.png&#34; alt=&#34;image15 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are numerous ways to go and find where our scheduled job is located&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Either of these work just fine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-taskname&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image14-1024x155.png&#34; alt=&#34;image14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image10-1024x166.png&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also find out a scheduled job’s date, time, and frequency are due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image4.png&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Malicious scheduled jobs&lt;/h1&gt;&lt;p&gt;In the above example, we’re completing the rather boring scheduled job of collecting the date. A more interesting representative example of how PowerShell jobs can be leveraged by attackers was found during our response to a recent incident. &lt;/p&gt;
&lt;p&gt;Whilst this article won’t recreate the exact syntax the attacker used for obvious reasons, we’ve provided a functionally similar example below.&lt;/p&gt;
&lt;h2&gt;Using for evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let’s schedule a malicious PowerShell Job to run at &lt;strong&gt;3 o’clock in the morning on Christmas Day&lt;/strong&gt; - a gift to incident responders and sysadmins everywhere!&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#schedule the job for Christmas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Once&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12/25/2021 3:00 AM&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#point to the malicious script to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SuperEvil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#try to hide this job from the Task Scheduler GUI….will still show up in the command line and GUI (if the right options are selected in ‘View’)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HideInTaskScheduler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#and now schedule the job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-FilePath&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image13-1024x228.png&#34; alt=&#34;image13&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ve emulated how an adversary could weaponise a PowerShell job to strike when the defenders are less likely to be able to manually react and respond. In these cases, automated measures to prevent and detect the threat are essential.&lt;/p&gt;
&lt;h1&gt;Hunting Malicious Jobs&lt;/h1&gt;&lt;p&gt;Now, you know me, I&amp;rsquo;m not about to show you something malicious without showing you the defensive counterpart! Let&amp;rsquo;s put our Blue Team hat on&lt;/p&gt;
&lt;h2&gt;Monitoring&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;From a monitoring and detection point of view, if we combine &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sysmon&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Florian Roth’s&lt;/a&gt; config of rules, we can see how a PowerShell job would be flagged&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image11.png&#34; alt=&#34;image11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BLUE arrows: event info
&lt;ul&gt;
&lt;li&gt;The Event ID 11 involves file creation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The RED arrows: specific info
&lt;ul&gt;
&lt;li&gt;TargetFileName shows that the scheduled job has been written to the Task directory&lt;/li&gt;
&lt;li&gt;Notice, however, we have no visibility to WHAT this task does….we just know it has been registered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The PINK arrow: MITRE ATT&amp;amp;CK reference
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However Florian Roth includes the MITRE ATT&amp;amp;CK tactic number in a particular event. This allows security analysts to schematise the event data they are observing with the wider TTPs of an adversary. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above sysmon/endpoint log based SIEM, we would &lt;em&gt;have&lt;/em&gt; some visibility of scheduled jobs. However this data won&amp;rsquo;t be enough for an analyst to work with. We need to dig deeper beyond &lt;strong&gt;passive monitoring&lt;/strong&gt; to &lt;strong&gt;active threat hunting&lt;/strong&gt; to identify exactly what this scheduled job is about. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image8.png&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Hunting&lt;span class=&#34;absolute -mt-20&#34; id=&#34;hunting&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hunting&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our JUMPSEC clients’ environments, we have found no system-level usage of scheduled jobs. This suggests that scheduled jobs you identify are deliberately put there and are worth investigation.&lt;/p&gt;
&lt;p&gt;You can query the scheduled jobs on a machine with this straight forward command&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image5-1024x177.png&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also examine &lt;em&gt;when&lt;/em&gt; this scheduled job is due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Ft &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Property&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ScheduledJob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;JobDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;At&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DaysOfWeek&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image7-1024x162.png&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Knowing that this premeditated attack will ruin Christmas for an incident responder, let’s neutralise the malicious PowerShell job that has been scheduled. &lt;/p&gt;
&lt;h2&gt;Responding&lt;span class=&#34;absolute -mt-20&#34; id=&#34;responding&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#responding&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can remove a PowerShell scheduled job in two different ways, neither of which present a disadvantage. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TaskName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option two&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image3-1024x95.png&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image12-1024x79.png&#34; alt=&#34;image12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can confirm that the malicious tasks have been eradicated from this machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image9.png&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Scheduling Security&lt;/h1&gt;&lt;p&gt;This article took inspiration from a real life attack, and examined how an adversary could abuse PowerShell scheduled Jobs to both gain persistence, and quietly dwell on a network before picking the opportune moment to strike. Scripted attacks must be proactively identified and eliminated, as automated attack chains can be speedily operated by an attacker, reducing the opportunity for defenders to respond. &lt;strong&gt;It’s important you are scouring your network for the recurring tasks that can give an attack a backdoor into your environment.&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Related articles&lt;/strong&gt;: We recently wrote about how &lt;a href=&#34;https://labs.jumpsec.com/running-once-running-twice-pwned-windows-registry-run-keys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;registry run keys&lt;/a&gt; can offer adversaries a stealthy persistence mechanism&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Detect and investigate any recurring tasks you see in your environment, and you may just catch an adversarial campaign before they can cause any damage. Deny them the pleasure of striking on Christmas Day!&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image2.png&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Running Once, &lt;del&gt;Running Twice&lt;/del&gt;, Pwned! Windows Registry Run Keys</title>
      <link>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Physical-security-2.png&#34; alt=&#34;Jumpsec icons Physical security 2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Windows registry is a vast and complex topic and cannot be understood and defended in one article. One particular area of interest from a security perspective is registry run keys. In this article, we discuss who uses run keys, how to uncover abuse, and how to eradicate evil from them. &lt;/p&gt;
&lt;h2&gt;An Introduction to Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;an-introduction-to-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#an-introduction-to-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are registry run keys?&lt;/em&gt;&lt;/strong&gt; Run keys are an obscure mechanism of the registry to execute something on a Windows system when a user logs in or the machine boots up. &lt;/p&gt;
&lt;p&gt;A number of advanced adversaries have abused run keys due to their problematic nature. For example, &lt;a href=&#34;https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Fancy Bear&lt;/strong&gt;&lt;/a&gt; (also known as &lt;a href=&#34;https://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender_In-depth_analysis_of_APT28%E2%80%93The_Political_Cyber-Espionage.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;APT28&lt;/strong&gt;&lt;/a&gt;), &lt;a href=&#34;https://www.proofpoint.com/us/blog/threat-insight/i-knew-you-were-trouble-ta456-targets-defense-contractor-alluring-social-media&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;TA456&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://blog.talosintelligence.com/2018/01/korea-in-crosshairs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Group 123&lt;/strong&gt;&lt;/a&gt; enjoy weaponizing run keys to achieve persistent access to a compromised network. Run keys have housed all manner of malicious content - from simple executables to macro-riddled spreadsheets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MITRE ATT&amp;amp;CK® records this particular persistence tactic as the sub-technique &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;T1547.001&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; It is not a super common technique for adversarial campaigns, however it can offer ardent persistence - all the more reason for you and I to explore this obscurity further. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-53.png&#34; alt=&#34;2021 07 28 16 53&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Though advanced attackers abuse run keys on occasion, &lt;strong&gt;I find it is a mechanism that is not discussed widely enough, even though it is quite straightforward to query run keys for evil.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The silence on this registry capability isn’t from technical gaps across the infosec community. &lt;strong&gt;Rather, run keys are an unexpected executable component of the ‘config database’ that is the Windows registry.&lt;/strong&gt; This means they often don’t get the same level of attention compared to bigger, more well-known attacker techniques and OS components. However, I recently came across this interesting snippet on the infosec social circuit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_17-15.png&#34; alt=&#34;2021 08 02 17 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before we get into how to hunt for malicious run keys, &lt;strong&gt;let’s detour down the Windows registry.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;The Windows Registry&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-windows-registry&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-windows-registry&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Windows registry is a labyrinthine place. On the surface it presents itself as a &lt;a href=&#34;https://docs.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;centralised database&lt;/strong&gt;&lt;/a&gt; to store information pertaining to user and machine settings. &lt;strong&gt;The reality is that it’s more a menagerie of weird and wonderful capabilities&lt;/strong&gt; that Microsoft sometimes obscurely document, despite these capabilities possessing devastating potential.&lt;/p&gt;
&lt;p&gt;I could spend hours writing about the inconsistencies and capriciousness of the Windows registry. Trying to understand the limits and parameters of its potential is truly maddening. It seems like the byzantine &lt;strong&gt;nature of the registry offers an adversary an unfair advantage&lt;/strong&gt; to stash away their persistence mechanisms and skulk outside the network until the Blue Team has averted their gaze. &lt;/p&gt;
&lt;p&gt;Trying to decipher what is benign and what is malevolent in the windows registry can be considered Sisyphean, especially during an incident.&lt;/p&gt;
&lt;h2&gt;Run keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I hope so far I have conveyed just how difficult it is to tame the registry. To make matters worse, run key capabilities are criminally under-documented by Microsoft, who &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;devote a mere six paragraphs&lt;/strong&gt;&lt;/a&gt; to them.&lt;/p&gt;
&lt;p&gt;Run keys live in the registry. They are configurable to allow a program to execute when a user logs in or the computer is turned on.  “&lt;em&gt;But hold on!&lt;/em&gt;”, I hear you angrily cry, “&lt;em&gt;Windows already has a&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Task Scheduler&lt;/em&gt;&lt;/strong&gt;, &lt;em&gt;THAT’S how you schedule tasks!!!&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Well, not according to our Lord and Saviour Bill Gates. Moreover, run keys have some crucial differences that make comparisons to Windows’ &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/taskschd/task-scheduler-start-page&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Task Scheduler&lt;/strong&gt;&lt;/a&gt; somewhat limited.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/memes-1.png&#34; alt=&#34;memes 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In contrast to Windows Task Scheduler, &lt;strong&gt;registry run keys possess a number of unique characteristics&lt;/strong&gt;:&lt;/p&gt;
&lt;h3&gt;Character Limitations&lt;span class=&#34;absolute -mt-20&#34; id=&#34;character-limitations&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#character-limitations&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Run keys can only store commands that are less than 280 characters.&lt;/strong&gt; So an adversaries’ one-liner must form as few characters as a Tweet. I hope Microsoft didn’t intend for THAT to be a low-tier defence mechanism, as your basic script-kiddie reverse shell will barely cost you 50 characters. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-43.png&#34; alt=&#34;2021 07 28 15 43&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moreover, compiling your own malicious executable and firing it off via the run keys will cost you very few characters but achieve maximum effect. So whilst the character limitation is unique compared to other system timers, it’s a trivial obstacle. &lt;/p&gt;
&lt;h3&gt;Special Character Behaviour&lt;span class=&#34;absolute -mt-20&#34; id=&#34;special-character-behaviour&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#special-character-behaviour&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Another unique feature of run key considers how special characters change the behaviour of the scheduled command.&lt;/strong&gt; Specifically, the &lt;strong&gt;exclamation mark&lt;/strong&gt;  ( ! ) and the &lt;strong&gt;asterisk /&lt;/strong&gt; &lt;strong&gt;wildcard&lt;/strong&gt; ( * ). By default, the run key wipes itself after execution - whether it fails to execute its task or not. These two special characters can be deployed to alter this behaviour.&lt;/p&gt;
&lt;p&gt;If, on your next threat hunting session or incident response, you see this bad boy right here with an exclamation mark, you have encountered a run key that will persist until it has run its allocated command for sure. &lt;strong&gt;If for whatever reason the evil command does not run, the exclamation mark ensures that it will not delete itself until it runs successfully.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-24.png&#34; alt=&#34;2021 07 28 09 24&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The prefixed exclamation of a run key can be defeated by booting the computer in Safe Mode.&lt;/strong&gt; To ensure that a run key is executed regardless of boot mode, &lt;strong&gt;an adversary can leverage an asterisk / wildcard which forces the command to run.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-26.png&#34; alt=&#34;2021 07 28 09 26&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Run keys are configured to wipe themselves after running, by default, which means that unless your logging and detection is sharp, these kinds of malicious activities could go by unnoticed, unless you go through the painstaking  process of forensically recovering the image of the machine&lt;/p&gt;
&lt;h1&gt;Hunting Run Keys&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-11.png&#34; alt=&#34;2021 07 28 16 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Is this your face right now? This was my face when I first encountered run keys. This may actually be my face all the time, to be honest. &lt;em&gt;#blueteamproblems&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although run keys may seem complicated and obscure, &lt;strong&gt;I promise you they are anything but.&lt;/strong&gt; They are wonderfully easy to query and monitor, and they show up fabulously in a SIEM when an adversary manipulates their values. &lt;strong&gt;Let’s prove it together.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a number of places where malicious run keys can be deployed. We’re just going to focus on the top four locations, but if you read some &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;red team documentation&lt;/strong&gt;&lt;/a&gt; you’ll find some more registry locations to deploy run key persistence. &lt;/p&gt;
&lt;p&gt;Anyway, in the Windows registry, if you look under HKey Local Machine and Current User, and traverse a couple of directories, you’ll find &lt;strong&gt;Run&lt;/strong&gt; and &lt;strong&gt;RunOnce.&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The directories are important here.&lt;/strong&gt; The behaviour of the run key is contingent on the registry location it is written in: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;HKLM:\&lt;/strong&gt; it means this was written as a &lt;strong&gt;high-privileged&lt;/strong&gt; user (most likely Admin) or SYSTEM.
&lt;ul&gt;
&lt;li&gt;Run keys written here can &lt;strong&gt;execute when the machine boots up&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something something written in &lt;strong&gt;HKCU:\&lt;/strong&gt; it means this was written as just a &lt;strong&gt;normal user&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Run keys written here will &lt;strong&gt;only execute when the user logs in&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something written to &lt;strong&gt;\RunOnce&lt;/strong&gt; it &lt;strong&gt;will&lt;/strong&gt; be removed after execution&lt;/li&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;\Run&lt;/strong&gt; it &lt;strong&gt;will not&lt;/strong&gt; be removed after execution
&lt;ul&gt;
&lt;li&gt;These can be complicated by the &lt;strong&gt;special character behaviour&lt;/strong&gt; that we already discussed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What do Run Keys look like IRL ?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;what-do-run-keys-look-like-irl-&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-do-run-keys-look-like-irl-&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;In real life, you actually have to sift a little bit of the registry’s noise to get to the meat of a run key.&lt;/strong&gt; Allow me to share with you two examples, where the first has not been filtered with PowerShell, and the second is enjoying a luxurious yet temporal life as filtered PowerShell.&lt;/p&gt;
&lt;p&gt;Look at this mess. What even is this? &lt;strong&gt;We don’t even need the stuff highlighted in the red box, it’s just noise.&lt;/strong&gt; We know this is the ‘HKLM’ Drive and ‘Run’ ChildName…&amp;hellip;we know that because we are the ones who traversed here! Honestly…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-20-1024x349.png&#34; alt=&#34;2021 07 28 17 20&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s filter out the noise with some PowerShell:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/124326535-76c64680-db7e-11eb-9b98-261b3704d30a.png&#34; alt=&#34;124326535 76c64680 db7e 11eb 9b98 261b3704d30a&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Look at how superior this is. Imagine running this glorious filtered-one-liner, and getting thousands of endpoints returning information in this kind of clear, noise-free way; the stuff Blue Team dreams are made of. &lt;strong&gt;This kind of filtered PowerShell is fantastically suited to be run enterprise-wide to identify anomalies beyond the standard builds across your network.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If you look in the run keys, you&amp;rsquo;ll find the entries’ name and accompanying commands &lt;em&gt;(name: command).&lt;/em&gt; The legitimate contents of the run keys can vary and it’s your task to understand what is normal in your enterprise, as this will allow abnormal inconsistencies to stand out. &lt;/p&gt;
&lt;p&gt;As you hunt, you may want to filter out legitimate startup items in the registry runkeys. This is easily done. Using the same PowerShell as above, we can use the `-exclude` flag which already removes `PS*`. Just add a comma, and remove the other run key names that you don’t want to see. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vmware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bginfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-03_16-21.png&#34; alt=&#34;2021 08 03 16 21&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Malicious Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;malicious-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#malicious-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let us emulate some of the adversaries&amp;rsquo; behaviour. We will insert some malice onto a run key, and then I will show you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; how to loop through and find it automatically;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Second,&lt;/strong&gt; how you eradicate it from the machine without damaging the other legitimate run keys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretend we have pwned a machine, and are looking to maintain persistence. We compile evilcommand.exe, which bypasses all anti-virus known to man and gives us a reverse shell. &lt;strong&gt;We can force one of the run keys to execute our malicious program&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!Delete After Running&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evilcommand.exe&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you append `-whatif` to the end of a lot of powershell one-liners, it will not actually run your command. Instead, it will show you what the effect COULD be if you ran it. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-04-1024x110.png&#34; alt=&#34;2021 07 28 09 04&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you want to really run something, tag on `-verbose` so you can get confirmation that the PowerShell you expected has taken effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-06-1024x128.png&#34; alt=&#34;2021 07 28 09 06&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Without all of the noise, this is what we have forcibly co-opted the run key to do for us: we have created a run key named “&lt;strong&gt;Delete_After_Running&lt;/strong&gt;”, whose execution &lt;strong&gt;value&lt;/strong&gt; will be “&lt;strong&gt;evilcommand.exe&lt;/strong&gt;”. Notice the &lt;strong&gt;exclamation point&lt;/strong&gt;, which as we have discussed will ensure the program will run before it self-deletes, guaranteeing our successful re-entry to this compromised machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-11-1024x142.png&#34; alt=&#34;2021 07 28 09 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Task Scheduler is oblivious to this&lt;/strong&gt;. It does not and cannot recognise that this run key task has been scheduled. If I were Microsoft, I’d probably include that functionality in Task Scheduler…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-36-1024x491.png&#34; alt=&#34;2021 07 28 15 36&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Key evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A quick Powershell ‘for loop’ can collect the contents of these four registry locations.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When drafting this script, I (and now you, too) made life easier by ensuring the code produced output that was &lt;strong&gt;pre-filtered and added colours&lt;/strong&gt;. This will make our task that bit easier to determine &lt;strong&gt;IF&lt;/strong&gt; something &lt;strong&gt;abnormal&lt;/strong&gt; (read: evil) exists and &lt;strong&gt;WHERE&lt;/strong&gt; it exists.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;----Reg location is &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;----&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ForegroundColor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;get-itemproperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-22.png&#34; alt=&#34;2021 07 28 09 22&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And if we look hard enough, &lt;strong&gt;we identify something abnormal&lt;/strong&gt;. Once we take the executable and reverse engineer it, we can determine it is a malicious executable from the adversary. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-42-1024x315.png&#34; alt=&#34;2021 07 28 17 42&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you identify a malicious run key, you are of course obliged to remove it from the machine. Let’s discuss how in a moment, &lt;strong&gt;after we discuss what this evil looks like from a SIEM / SOC perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Monitoring for Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Let’s discuss what this looks like from a detection and monitoring perspective.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;For our example, we are using the built-in &lt;strong&gt;Windows Event Viewer&lt;/strong&gt;, and then adding &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Sysmon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Florian&lt;/strong&gt; &lt;strong&gt;Roth’s&lt;/strong&gt;&lt;/a&gt; config of rules for detection. You could then feed this sysmon log data into a SIEM, and monitor hundreds of thousands of endpoints for run key malice (and other stuff too).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_18-15.png&#34; alt=&#34;2021 07 28 18 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is a wealth of information here worth considering: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;BLUE&lt;/strong&gt; arrows: event info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Event ID 13 involves registry values&lt;/strong&gt; &lt;strong&gt;modification&lt;/strong&gt;, and this ID will be consistent in any environment. &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;EventType&lt;/strong&gt; and &lt;strong&gt;Task Category&lt;/strong&gt; spell out exactly what is happening here too: &lt;strong&gt;a registry value is being set&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;RED&lt;/strong&gt; arrows**:** specific info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;TargetObject&lt;/strong&gt; shows the &lt;strong&gt;full path&lt;/strong&gt; for the run key registry we are changing. It also shows the &lt;strong&gt;name&lt;/strong&gt; we called it, and includes the special character that modifies the behaviour&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Details&lt;/strong&gt; section shows the command / executable the run key is forced to run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;PINK&lt;/strong&gt; arrow: MITRE ATT&amp;amp;CK reference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However &lt;strong&gt;Florian Roth&lt;/strong&gt; includes the MITRE ATT&amp;amp;CK tactic number in a particular event.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rather than get attack alerts for every Event 13, I’d recommend you go on a bit of a discovery exercise of what the run keys in your environment normally do.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Across the entire enterprise do they have the same consistent contents? &lt;/p&gt;
&lt;p&gt;Or does the finance department run software that legitimately alters the run key? &lt;/p&gt;
&lt;p&gt;Would you be able to baseline this and then create a small alert for any new, inconsistent run key changes to a workstation in the finance department?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This has greater value than hoping to catch one rogue Event 13 out of a million.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Interactive detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;interactive-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#interactive-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you want a more interactive detection experience, might I recommend a tool like &lt;a href=&#34;https://docs.velociraptor.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Dr Michael Cohen’s Velociraptor?&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Velocitaptor is a tool (and philosophy) that deserves its own article, so I will be brief here. Velociraptor is an endpoint response agent that you can install on every single endpoint across your enterprise, and orchestrate from one server via a web-app. This distributed tool allows us to then query thousands of machines at once. &lt;/p&gt;
&lt;p&gt;Built in to Velociraptor is a hunt that queries every Windows machine specifically for their startup process, and part of this hunt includes &lt;a href=&#34;https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/Sys/StartupItems.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;querying run keys&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;  As you can see, this hunt targets a number of the registry run keys that our previous PowerShell query also hunted for. Velociraptor targets an additional few run keys, as well as some other startup locations (but I leave that to you to investigate this all further).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-30-1024x519.png&#34; alt=&#34;2021 08 02 10 30&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we fire off this startup detection hunt, we will be given a beautifully formatted table of results. In real production environments, you will find more noise than this so be warned! But look at what we detected - a single machine in our domain currently running &lt;strong&gt;C:\evil.exe&lt;/strong&gt;, shocking stuff. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-18-1024x665.png&#34; alt=&#34;2021 08 02 10 18&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortunately now we know and can eradicate it from the host - I’ll show you how.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Eradicating Run Key Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;eradicating-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#eradicating-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It’s time. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/showtime.png&#34; alt=&#34;showtime&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be surgical here.&lt;/strong&gt; If you aren’t precise in your commands, you will &lt;strong&gt;accidentally remove&lt;/strong&gt; run key entries that are &lt;strong&gt;legitimate&lt;/strong&gt;.  It&amp;rsquo;s important you remove with &lt;strong&gt;-verbose&lt;/strong&gt; too and double-check it has gone, to make sure you have removed what you think you have. &lt;/p&gt;
&lt;p&gt;Off the back of our PowerShell for loop, copy and paste the &lt;strong&gt;full path&lt;/strong&gt; location that the evil was detected. And double check this is where the malicious run key resides.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-07-1024x276.png&#34; alt=&#34;2021 07 28 19 07&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then pick the EXACT name of the run key entry you want to remove. Copy paste it, include any special characters too please. &lt;strong&gt;Don’t copy&lt;/strong&gt; the executable details that come &lt;strong&gt;after the colon&lt;/strong&gt; ( : )&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*Run Safe Mode too&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-11-1024x202.png&#34; alt=&#34;2021 07 28 19 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We get our verbose message returned to us confirming that we are indeed removing the run key we think we are.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-12-1024x127.png&#34; alt=&#34;2021 07 28 19 12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then check again to be sure it&amp;rsquo;s gone. If you still have the malicious run key here, double check you have copied and pasted appropriately, as fat-fingering paths and registry names are very real problems.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/empty-1024x124.png&#34; alt=&#34;empty&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Unpicking Run Keys&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Run keys are obscure mechanisms of persistence for sure. But I hope this article has instilled confidence in how straightforward it is to monitor, detect, control, and remove any malicious activity involving your run keys.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a defender, sometimes our roles are framed as being consistently at a disadvantage compared to the adversary. They can leverage zero-days, they can trick users, they can run across time zones with bigger budgets. &lt;strong&gt;Whilst we must consistently be at the top of our game, they only need to be lucky once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this is true, but I find that sometimes we could invert this framing to focus on the advantages we possess compared to the attacker.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;OUR&lt;/strong&gt; environment. This is &lt;strong&gt;OUR&lt;/strong&gt; registry. And these are &lt;strong&gt;OUR&lt;/strong&gt; run keys. We know how it all works, and we should be here waiting for the adversary to so much as sneeze in our domain without us knowing about it. Sure, have a foothold. But we aren’t naive, we expect compromise. And we will catch you, kick you out, and ensure your future attempts at re-entry are that bit harder. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/sparta-1024x577.jpg&#34; alt=&#34;sparta&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand what is normal for your environment so you know when a registry run key manipulation is out of place, and foster a hostile network so an adversary can’t move an inch without you knowing about it and containing them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot to do and never enough time or resource to do it, but that’s why we’re in infosec right? &lt;/p&gt;
&lt;h2&gt;Some Bedside Reading&lt;span class=&#34;absolute -mt-20&#34; id=&#34;some-bedside-reading&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#some-bedside-reading&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are so many other janky registry entries that can do weird things with run keys. We didn’t mention, for example, how entire folders can become mechanisms of persistence via registry run keys! You can read more &lt;a href=&#34;https://www.picussecurity.com/resource/blog/picus-10-critical-mitre-attck-techniques-t1060-registry-run-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you enjoyed this article or especially if you DIDN’T enjoy this article, give these other ones a go: looking at &lt;a href=&#34;https://labs.jumpsec.com/car-hacking-manual-bypass-of-modern-rolling-code-implementations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;hacking cars&lt;/strong&gt;&lt;/a&gt; and breaking their keyfob encryption; evaluating the potential &lt;a href=&#34;https://labs.jumpsec.com/can-depix-deobfuscate-your-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;de-obfuscate redacted text&lt;/strong&gt;&lt;/a&gt; in sensitive documents; and advanced techniques to defend your &lt;a href=&#34;https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;C2&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; honour.&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-10_21-10.png&#34; alt=&#34;2021 08 10 21 10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
