<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Detection</title>
    <link>//localhost:1313/tags/detection/</link>
    <description>Recent content in Detection on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Fri, 13 Nov 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/tags/detection/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Detecting known DLL hijacking and named pipe token impersonation attacks with Sysmon</title>
      <link>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2020/11/2020-11-13-detecting-known-dll-hijacking-and-named-pipe-token-impersonation-attacks-with-sysmon/</guid>
      <description>
        
        
        &lt;p&gt;Background&lt;/p&gt;
&lt;p&gt;Recently we posted a bunch of &lt;a href=&#34;https://labs.jumpsec.com/tag/ivanti/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;advisories&lt;/a&gt; relating to Ivanti Unified Endpoint Manager, a couple of which are for vulnerabilities which can be used to achieve local privilege escalation.&lt;/p&gt;
&lt;p&gt;At JUMPSEC, whenever we find a new vulnerability, we like to challenge ourselves to write rules to detect it being exploited. We learn a lot doing this, it’s kind of fun tweaking the exploit to try and evade detection and really challenges us to write good detection rulesets.&lt;/p&gt;
&lt;p&gt;Naturally, with the right signatures you can detect future exploitation of an issue, but it’s also fun/scary (delete as appropriate!) to run this on historical data and find out if someone else got there first and the vulnerability has been exploited in the wild already…&lt;/p&gt;
&lt;p&gt;We enjoy doing it, we know it is valuable to our clients and we’d love to see more of it being done which is why we’re making an effort to share some detail relating to our recent Ivanti advisories.&lt;/p&gt;
&lt;p&gt;Introduction&lt;/p&gt;
&lt;p&gt;Because of the high number of components that make up an operating system, attackers with local access have a very wide array of possible ways to interact with the system in malicious ways, even when limited to low privileges. This corresponds to a greater effort required to properly monitor for suspicious behaviour and detect attacks.&lt;/p&gt;
&lt;p&gt;In light of the recent vulnerabilities affecting Ivanti Unified Endpoint Manager we want to briefly touch on how it is possible to detect local privilege escalation attack, specifically addressing &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13770-ivanti-uem-named-pipe-token-impersonation/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13770&lt;/a&gt; and &lt;a href=&#34;https://labs.jumpsec.com/advisory-cve-2020-13771-ivanti-uem-dll-hijacking/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CVE-2020-13771&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You have probably heard of Sysmon already, but in case you have not, it is a handy tool available in the Windows Sysinternals toolsuite which can track, record and store detailed system events. These events can then be viewed within Windows Event Viewer, and are usually collected by SIEM software for aggregation and analysis.&lt;/p&gt;
&lt;p&gt;We’re focused on Sysmon in this writeup.&lt;/p&gt;
&lt;p&gt;Technical details&lt;/p&gt;
&lt;p&gt;In this section we give a brief explanation of the vulnerabilities and an example of Sysmon configuration rules to log exploitation attempts, along with the rationale behind them so you can adapt them to your existing configuration if needed. These will act as a solid first point of detection, and while the events thereby generated will be by themselves a confident indicator for malicious activity, they can be further correlated with other events for even more precise monitoring.&lt;/p&gt;
&lt;p&gt;CVE-2020-13771 - DLL search order hijacking&lt;/p&gt;
&lt;p&gt;To exploit this vulnerability a local attacker needs to create a malicious DLL library and place it in a particular path on the filesystem. This path is entirely dependent on the host configuration; the vulnerable software relies on Windows&amp;rsquo; &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/dlls/dynamic-link-library-search-order#search-order-for-desktop-applications&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DLL Search Order for desktop applications&lt;/a&gt;, reported below, for locating and loading a DLL file.&lt;/p&gt;
&lt;p&gt;With SafeDllSearchMode enabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;With SafeDllSearchMode disabled:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The directory from which the application loaded.&lt;/li&gt;
&lt;li&gt;The process&amp;rsquo; current directory.&lt;/li&gt;
&lt;li&gt;The system directory. This is usually C:\Windows\System32\ and/or C:\Windows\SysWow64\ depending on the OS and process architecture.&lt;/li&gt;
&lt;li&gt;The 16-bit system directory. This is usually C:\Windows\System\&lt;/li&gt;
&lt;li&gt;The Windows directory. This is usually C:\Windows&lt;/li&gt;
&lt;li&gt;The directories that are listed in the PATH environment variable. Note that this does not include the per-application path specified by the App Paths registry key. The App Paths key is not used when computing the DLL search path.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;SafeDllSearchMode is essentially a setting, enabled by default, which places the process&amp;rsquo; current directory later in the search order to try mitigate this type of vulnerabilities. Its value can be set to 1 (enabled) or 0 (disabled) in the following registry key:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;HKEY_LOCAL_MACHINE\System\CurrentControlSet\Control\Session Manager\SafeDllSearchMode&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In both circumstances the OS will look for a DLL file in the directories listed in the PATH environment variable, in the order as they appear, in case the library has not been not found yet. This variable needs particular attention, as it is easy to end up with directories writable by Everyone; moreover many software installers will silently append their directories to it.&lt;/p&gt;
&lt;p&gt;If a local attacker - or a remote one with an arbitrary filesystem write primitive - is able to place the malicious library in one of these paths, taking precedence over the path where the legitimate library is found - or regardless of precedence, if the legitimate library is not found at all - the file will be loaded by the vulnerable process, which will execute its DllMain function in its own context.&lt;/p&gt;
&lt;p&gt;Going back to the Ivanti Unified Endpoint Manager instance, the DLL files referenced in the advisory are not found by the processes, leaving the attacker a handful of possible paths to place his implant.&lt;/p&gt;
&lt;p&gt;To log exploitation attempts we can instruct Sysmon to record ImageLoad events; as the DLL file needs to have the precise filename the process is looking for, or else it will not be loaded, the filename is a good attribute to set filters on. Since legitimate libraries usually are signed by the software vendor or publisher, we can filter on this criteria to only log unsigned or untrusted images. The following rules will record library loading events on any process for all unsigned/untrusted libraries with these specific filenames, found anywhere in the filesystem:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13771&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;ImageLoad onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Only log unsigned / invalid signature images --&amp;gt;
                &amp;lt;SignatureStatus condition=&amp;#34;is not&amp;#34;&amp;gt;Valid&amp;lt;/SignatureStatus&amp;gt;
                &amp;lt;!-- Only log these images --&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;wfapi.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;DMIAPI32.DLL&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;logonsrv.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;ldprofileui.dll&amp;lt;/ImageLoaded&amp;gt;
                &amp;lt;ImageLoaded condition=&amp;#34;image&amp;#34;&amp;gt;OOBCredentials.dll&amp;lt;/ImageLoaded&amp;gt;
            &amp;lt;/ImageLoad&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_dll_hijacking_event-1024x593.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;DLL Hijacking event captured by Sysmon. The image will show up as unsigned if the certificate is not trusted.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;CVE-2020-13770 - Named pipe token impersonation&lt;/p&gt;
&lt;p&gt;This vulnerability is another classic in privilege escalation techniques; in fact, it is one of the methods meterpreter attempts when one runs &amp;ldquo;getsystem&amp;rdquo;. The issue takes place when a process opens a named pipe object without explicitly specifying proper security attributes. These security attributes can be specified when calling &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/api/fileapi/nf-fileapi-createfilea&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CreateFile&lt;/a&gt; on the &amp;ldquo;dwFlagsAndAttributes&amp;rdquo; parameter; among them, the following two are interesting from an attacker&amp;rsquo;s perspective:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SECURITY_DELEGATION - Impersonates a client at the Delegation impersonation level.&lt;/li&gt;
&lt;li&gt;SECURITY_IMPERSONATION - Impersonate a client at the impersonation level. This is the default behavior if no other flags are specified along with the SECURITY_SQOS_PRESENT flag.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The first effectively allows for impersonation on remote hosts, while the second only allows that to happen locally. The problem relies on the fact that &amp;ldquo;SECURITY_IMPERSONATION&amp;rdquo; is the default value when no other attribute is specified, or when the &amp;ldquo;SECURITY_SQOS_PRESENT&amp;rdquo; flag is not set, which leads to this vulnerability being often introduced unwarily.&lt;/p&gt;
&lt;p&gt;Upon opening a named pipe with one of these two security attributes, the server has the access to obtain the client&amp;rsquo;s token and use it during subsequent access checks; in cases where the client has higher privileges than the server, the server would effectively obtain elevation of privileges. Any process can open a new named pipe object, granted that one with the same name does not already exist, although the impersonation process requires the server process to hold the SeImpersonatePrivilege privilege. By default this is assigned to service users, such as &amp;ldquo;nt authority\network service&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;A further requirement for the privilege escalation process is that the client must write some data to the named pipe before the impersonation process can take place. It is therefore possible for a process to open the pipe with insecure security attributes but not be exploitable to achieve EoP.&lt;/p&gt;
&lt;p&gt;With regards to detecting exploitation on Unified Endpoint Manager, having identified on which named pipe object the impersonation takes place, pipe creation events can be filtered on their name. Any process other than the legitimate pipe servers can be appended to the exclude rules to be filtered out. Since the pipe is specific to Ivanti software, such a configuration will be effective in giving no false positive. Further events can optionally be correlated to the one targeted here, such as process creations or file operation performed by the same process creating the named pipe object. Note that the exclude rule might need to be edited to the reader&amp;rsquo;s version of SQL Server.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;Sysmon schemaversion=&amp;#34;4.22&amp;#34;&amp;gt;
    &amp;lt;EventFiltering&amp;gt;
        &amp;lt;RuleGroup name=&amp;#34;CVE-2020-13770&amp;#34; groupRelation=&amp;#34;and&amp;#34;&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;include&amp;#34;&amp;gt;
                &amp;lt;!-- Monitor CreatePipe events --&amp;gt;
                &amp;lt;EventType condition=&amp;#34;is&amp;#34;&amp;gt;CreatePipe&amp;lt;/EventType&amp;gt;
                &amp;lt;!-- Only log these named pipes --&amp;gt;
                &amp;lt;PipeName condition=&amp;#34;is&amp;#34;&amp;gt;\SQLLocal\ldmsdata&amp;lt;/PipeName&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
            &amp;lt;PipeEvent onmatch=&amp;#34;exclude&amp;#34;&amp;gt;
                &amp;lt;!-- Only log if the pipe is not created by these (legitimate) processes --&amp;gt;
                &amp;lt;Image condition=&amp;#34;is&amp;#34;&amp;gt;C:\Program Files\Microsoft SQL Server\MSSQL13.LDMSDATA\MSSQL\Binn\sqlservr.exe&amp;lt;/Image&amp;gt;
            &amp;lt;/PipeEvent&amp;gt;
        &amp;lt;/RuleGroup&amp;gt;
    &amp;lt;/EventFiltering&amp;gt;
&amp;lt;/Sysmon&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/17330_named_pipe-1024x609.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;CreatePipe event captured by Sysmon.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;

      </description>
    </item>
    
    <item>
      <title>Enhanced logging to detect common attacks on Active Directory– Part 1</title>
      <link>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</link>
      <pubDate>Wed, 06 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2019/02/2019-02-06-enhanced-logging-to-detect-common-attacks-on-active-directory-part-1/</guid>
      <description>
        
        
        &lt;p&gt;In this blog post I am going to tackle the topic of detecting common attacks using Active Directory logs. It is important to understand the power of data in InfoSec world. Too much data means you’ll be spending rest of the week digging through millions of log entries to try and figure out what the adversary was up to. You can set filters to help you through this, however it can get computationally expensive very fast depending on how your filters operate. It also requires you to know what to specifically look out for! You need to have confidence in your filters and test them thoroughly from time to time to make sure they actually work.&lt;/p&gt;
&lt;p&gt;On the other hand, too little data means you might not have enough log entries to investigate and provide full evidence of what malicious techniques were attempted. For this reason, it is a constant battle of finding the middle ground of having hard evidence and not overwhelming your SIEM. Another golden question to ask is: are we even logging the correct events?&lt;/p&gt;
&lt;p&gt;One of the ways to get around this problem is configuring the correct Group Policies on the Domain Controllers. In this blog post I want to focus solely on command line logging because it is a quick win and it shows immense amount of detail into what processes and commands are executed. We start off by enabling the correct settings in the Group Policy using Group Policy Editor. The steps are detailed below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Administrative Templates → System → Audit Process Creation. And enable “include command line in process creation events”&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the path &lt;strong&gt;&lt;em&gt;Policies → Windows Settings → Security Settings → Advanced Audit Policy Configuration → Audit Policies → System Audit Policies → Detailed Tracking&lt;/em&gt;&lt;/strong&gt;. And enable both &lt;strong&gt;&lt;em&gt;Successful&lt;/em&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;em&gt;Failure&lt;/em&gt;&lt;/strong&gt; configuration for “&lt;strong&gt;&lt;em&gt;Audit Process Creation&lt;/em&gt;&lt;/strong&gt;” and “&lt;em&gt;&lt;strong&gt;Audit Process Termination&lt;/strong&gt;&lt;/em&gt;” as shown below.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After configuring these settings, run the good old group policy update on command prompt as administrator using the command &lt;strong&gt;&lt;em&gt;gpupdate /force&lt;/em&gt;&lt;/strong&gt;. At this point, you should be able to see all commands being executed via command prompt.&lt;/p&gt;
&lt;p&gt;We can test this by running some commands and viewing the logs to verify as shown below by running some test commands. We can see that by running test commands &lt;strong&gt;event ID 4688&lt;/strong&gt; (New process created) event is generated showing what was typed in the command prompt.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5-3.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;img src=&#34;images/6-2.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we can move forward and test this with the psexec module from Metasploit using the &lt;em&gt;exploit/windows/smb/psexec&lt;/em&gt; module as shown below.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;After setting the correct parameters, we execute the exploit and observe the logs produced from this action.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/8.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now this will generate a lot of events and keeping up with the incoming logs using Windows Event Viewer will be almost impossible. The best way to analyse these events is to parse these events through a SIEM solution for better log management. After everything is set up correctly, we can now begin the hunt! Monitoring the recent activity on the target machine, we see some interesting events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Event ID 7045&lt;/strong&gt; – A service was installed in the system&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/9.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The details around this event shows that the service named &lt;strong&gt;&lt;em&gt;yReAMNiNjOyqeWQI&lt;/em&gt;&lt;/strong&gt; was installed by the user root (which we know is the user used for this exploit). There are some interesting parameters defined here such as &lt;strong&gt;-nop&lt;/strong&gt;, &lt;strong&gt;-hidden&lt;/strong&gt; and &lt;strong&gt;-noni&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Such parameters can be used for obfuscation purposes. However, it becomes harder to detect these obfuscation parameters with keyword matching when there are multiple valid execution argument aliases for them. For example, for &lt;strong&gt;-NoProfile&lt;/strong&gt; argument alone, argument substrings such as &lt;strong&gt;-NoP&lt;/strong&gt;, &lt;strong&gt;-NoPr&lt;/strong&gt; &lt;strong&gt;-NoPro&lt;/strong&gt;, &lt;strong&gt;-NoProf&lt;/strong&gt;, &lt;strong&gt;-NoProfi&lt;/strong&gt; and &lt;strong&gt;-NoProfil&lt;/strong&gt; are all valid! This is where we chuck keyword matching filters out of the window and look towards regular expressions for detection.&lt;/p&gt;
&lt;p&gt;Focusing more on the name of the service being installed (&lt;em&gt;&lt;strong&gt;yReAMNiNjOyqeWQI&lt;/strong&gt;&lt;/em&gt;) looks like gibberish which is exactly what it is. Looking at the source code of the psexec module for Metasploit framework, we see that the display name is essentially 16 character long random text! We just found another possible filter that could help us detect these types of exploits.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Furthermore, we can also see a new process created (with &lt;strong&gt;event ID 4688&lt;/strong&gt;) which logs the actual command being executed during this attack!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/11.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Do you remember the thing we did with the group policies earlier? It wasn’t just to fill this blog post with random text and screenshots…nope… instead setting those group policies accordingly will allow you to log what was executed in command prompt as shown above! This is very useful in monitoring what crazy things are being executed on your windows network.&lt;/p&gt;
&lt;p&gt;That’s all for now, I hope you found this helpful as well as interesting. In the next part of this blog post series I will reveal more ingesting detection techniques.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
