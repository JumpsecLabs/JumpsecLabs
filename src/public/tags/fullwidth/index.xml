<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Fullwidth</title>
    <link>//localhost:1313/tags/fullwidth/</link>
    <description>Recent content in Fullwidth on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Mon, 22 Nov 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/tags/fullwidth/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>No Logs? No Problem! Incident Response without Windows Event Logs</title>
      <link>//localhost:1313/articles/2021/11/2021-11-22-no-logs-no-problem-incident-response-without-windows-event-logs/</link>
      <pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/11/2021-11-22-no-logs-no-problem-incident-response-without-windows-event-logs/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Incident-Response.png&#34; alt=&#34;Jumpsec icons Incident Response&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In this article, we discuss some Digital Forensics and Incident Response (DFIR) techniques you can leverage when you encounter an environment &lt;strong&gt;without Windows event logs&lt;/strong&gt;.&lt;/p&gt;
&lt;h1&gt;Where are the logs?&lt;/h1&gt;&lt;p&gt;At JUMPSEC, we regularly respond to security &lt;strong&gt;incidents with ineffective logging&lt;/strong&gt; and auditing for the purposes of a cyber incident. In some cases, organisations we encounter don’t have any recognisable SIEM or centralised log repository. In others, organisations with otherwise sufficient logging have seen &lt;strong&gt;adversaries intentionally manipulate the logs on an endpoint to prevent analysis&lt;/strong&gt; - sometimes even wiping them entirely. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Clearing the event logs on a Windows machine &lt;a href=&#34;https://www.youtube.com/watch?v=00EwvDKaKyQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;is trivial&lt;/a&gt;. It is a recognised behaviour of adversaries [&lt;a href=&#34;https://attack.mitre.org/techniques/T1070/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;T1070.001&lt;/a&gt;] who wish to evade and frustrate investigators’ efforts to unravel the TTPs of a malicious campaign. Without the event logs on a machine, you cannot use beautiful tools &lt;a href=&#34;https://github.com/countercept/chainsaw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;like Chainsaw&lt;/a&gt; to easily piece together the story for your client. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Thankfully, our guidance is relevant to all situations where logs are unavailable to support an investigation. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/bat.png&#34; alt=&#34;bat&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Log-less investigations&lt;/h1&gt;&lt;p&gt;For the rest of this article, I would like us to &lt;strong&gt;operate under a log-free paradigm - where the event logs cannot be utilised in an investigation&lt;/strong&gt;. I’d like us to discuss &lt;strong&gt;three&lt;/strong&gt; DFIR techniques that you can easily deploy when next conducting analysis on a machine that an adversary has tampered with. The machine may or may not have the required logs, or you may not trust the evidence - meaning we must verify past events through other means.  &lt;/p&gt;
&lt;p&gt;As we do not have the permanency that event logs offer, we are left with volatile forensic data. Simply put, &lt;strong&gt;if you do not get to most forensic data as quickly as possible then it may be gone forever&lt;/strong&gt;. If the machine is rebooted, the data can be lost; if the machine is left on and is used, many pieces of forensic evidence may be overwritten and lost forever.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://www.hackingarticles.in/comprehensive-guide-on-ftk-imager/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Taking a forensic image&lt;/a&gt; is out of scope for this article, however it may be advisable to do it as quickly as possible to ensure you can access the volatile, capricious data consistently throughout an investigation. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;There are many techniques for digital forensics. To understand and deploy the more advanced tools, there are many wise sages who I would recommend, such as &lt;a href=&#34;https://www.youtube.com/channel/UCy8ntxFEudOCRZYT1f7ya9Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richard Davis’ 13Cubed&lt;/a&gt;. In particular, there are three (or &lt;strong&gt;four, if you’re feeling brave&lt;/strong&gt;) post-log techniques I consider to have a &lt;strong&gt;low barrier&lt;/strong&gt; to entry in terms of technical capability, have general &lt;strong&gt;resiliency&lt;/strong&gt; to adversarial manipulation, and are &lt;strong&gt;relevant&lt;/strong&gt; to Windows endpoints and servers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#PSReadLine&#34; &gt;&lt;strong&gt;PSReadLine&lt;/strong&gt;&lt;/a&gt; (PowerShell History)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#prefetch&#34; &gt;&lt;strong&gt;Prefetch&lt;/strong&gt;&lt;/a&gt; (PEcmd)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#shimcache&#34; &gt;&lt;strong&gt;Shimcache&lt;/strong&gt;&lt;/a&gt; (AppCompatcache)&lt;/li&gt;
&lt;li&gt;BONUS: &lt;a href=&#34;#usn-journal&#34; &gt;&lt;strong&gt;USN Journal&lt;/strong&gt;&lt;/a&gt; (via Velociraptor)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;PSReadLine&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;This first one is a technique I do not see discussed that much&lt;/strong&gt;. And I’m not sure why. It has definitely illuminated parts of an attack that were once a mystery to me in the early stages of an investigation. The only detailed post I can find is &lt;a href=&#34;https://community.sophos.com/sophos-labs/b/blog/posts/powershell-command-history-forensics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a blog by Sophos&lt;/a&gt;, but I find it lacks some of the operational guidance that an investigator needs. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psreadline/?view=powershell-7.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PsReadLine is a PowerShell module&lt;/a&gt; that can do lots of cool things. Most pertinent for our conversation is its ability to &lt;strong&gt;offer insight into the history of the PowerShell&lt;/strong&gt; commands previously run.&lt;/p&gt;
&lt;p&gt;If we run some commands, we can instantly recall them via &lt;code&gt;history&lt;/code&gt; (this isn’t the DFIR part, I promise).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-file-1024x330.png&#34; alt=&#34;unnamed file&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, if the machine is rebooted (&lt;code&gt;`Restart-Computer`&lt;/code&gt;), or the history cleared (&lt;code&gt;`Clear-History`&lt;/code&gt;) then that history is lost. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moreover, running the &lt;code&gt;history&lt;/code&gt; command &lt;strong&gt;will only return the history of the current user and session&lt;/strong&gt; - so other users who sign into the machine and run commands will remain a mystery… &lt;em&gt;Or maybe not?&lt;/em&gt;&lt;/p&gt;
&lt;h3&gt;PSReadLine: Retrieve PowerShell History&lt;span class=&#34;absolute -mt-20&#34; id=&#34;psreadline-retrieve-powershell-history&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#psreadline-retrieve-powershell-history&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;PSReadLine will save the &lt;a href=&#34;https://social.technet.microsoft.com/Forums/en-US/7c3cd614-f793-4b99-b826-3dff917ebe88/powershell-commands-history-windows-10-1809-psreadline?forum=win10itprogeneral#:~:text=By%20default%2C%20the%20PowerShell%20in,separately%20for%20PowerShell%20and%20ISE.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;last four thousand commands&lt;/a&gt; a user has run into a particular file. &lt;strong&gt;If you query each users’ &lt;em&gt;ConsoleHost_history.txt&lt;/em&gt;, you can retrieve these commands.&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;get-content&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\*\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Roaming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSReadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConsoleHost_history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/4-edited.png&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Here, we can see the commands I ran above. These were &lt;strong&gt;previously lost&lt;/strong&gt; to us when the machine was rebooted and/or the history wiped… &lt;strong&gt;but here they are available for us&lt;/strong&gt; to piece together what the adversary did!&lt;/p&gt;
&lt;p&gt;I wouldn’t want you to have to manually do this for every user’s history - that would waste your precious time! On an endpoint, we can &lt;strong&gt;run a quick loop&lt;/strong&gt; that will print every user &lt;em&gt;ConsoleHost_history&lt;/em&gt; file:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Users&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Gci &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\*\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Roaming&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Windows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PowerShell&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PSReadline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ConsoleHost_history&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;txt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FullName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$Pasts&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Users&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Pasts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;`n&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;----User Pwsh History Path &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;---&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ForegroundColor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nb&#34;&gt;get-content&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$Past&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/5-edited-1.png&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From our short script, in the pink text we&amp;rsquo;ve printed the users’ Console History file. This will snitch on last four thousand commands from each &lt;strong&gt;user account&lt;/strong&gt;. We can also see that in the red arrow and box &lt;strong&gt;Frank’s account&lt;/strong&gt; is highlighted for &lt;strong&gt;deploying Mimikatz!&lt;/strong&gt; Below Frank’s commands, we can see the IEUser’s PowerShell history begins to also be printed. &lt;/p&gt;
&lt;p&gt;This was the first technique to trace the steps of the adversary. But keep in mind some caveats: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, an attacker may just delete this file as part of their clean up operation; &lt;/li&gt;
&lt;li&gt;Second, it will only record PowerShell - not cmd or wmic; &lt;/li&gt;
&lt;li&gt;Third, it will only record up to 4096 PowerShell commands; &lt;/li&gt;
&lt;li&gt;and finally, &lt;strong&gt;the console host history text file will &lt;a href=&#34;https://www.cloudsavvyit.com/8722/using-psreadline-in-powershell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;not be available on all Windows OS’ and builds&lt;/a&gt;&lt;/strong&gt;&lt;a href=&#34;https://www.cloudsavvyit.com/8722/using-psreadline-in-powershell/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/a&gt;  &lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Prefetch&lt;/h1&gt;&lt;p&gt;If you go to the directory &lt;code&gt;C:\Windows\Prefetch&lt;/code&gt; on a Windows &lt;strong&gt;endpoint&lt;/strong&gt;, you&amp;rsquo;re in for a treat. &lt;/p&gt;
&lt;p&gt;Prefetch (also known as prefetcher) is &lt;strong&gt;a caching technique&lt;/strong&gt; whereby an application is monitored and catalogued for the first few seconds it is launched, to make &lt;strong&gt;re-launching more efficient.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If this sounds like something awesome for &lt;a href=&#34;https://www.youtube.com/watch?v=f4RAtR_3zcs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a log-less investigation&lt;/a&gt;, then you’re right!&lt;/p&gt;
&lt;p&gt;If you sort by the prefetch files recently written to, &lt;strong&gt;you can see the executables recently deployed by both the user and the computer itself.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;dir &lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;C:\Windows\Prefetch&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sort &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LastWriteTime&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-desc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/6-1024x683.png&#34; alt=&#34;6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we look very closely at the prefetch files (.PF), we can see that &lt;strong&gt;Mimikatz&lt;/strong&gt; makes a special guest appearance!! This &lt;strong&gt;evidences that Mimikatz has been executed&lt;/strong&gt;, but we don&amp;rsquo;t get any more context from the name of the prefetch file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7-edited-1.png&#34; alt=&#34;7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Prefetch: PECmd&lt;span class=&#34;absolute -mt-20&#34; id=&#34;prefetch-pecmd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#prefetch-pecmd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The contents of a prefetch file cannot be simply read to gather more execution context! This is where &lt;a href=&#34;https://github.com/EricZimmerman/PECmd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eric Zimmerman’s PEcmd&lt;/a&gt; comes to save the day. &lt;strong&gt;This tool will carve through the prefetch directory or a prefetch file&lt;/strong&gt;, and &lt;strong&gt;make it easier for investigators&lt;/strong&gt; to see the discrete info about the prefetched data. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;# I’d advise picking the -f flag, and picking on one of the prefetch files you see in the directory
.\PECmd .exe -f &amp;#39;C:\Windows\prefetch\MIMIKATZ.EXE-599C44B5.pf&amp;#39; 

#get granular timestamps by adding -mp flag
.\PECmd .exe -f &amp;#39;C:\Windows\prefetch\MIMIKATZ.EXE-599C44B5.pf&amp;#39; -mp

# If you don’t know what file you want to process, get the whole directory. Will be noisy though and I wouldn’t recommend
.\PECmd .exe -d &amp;#39;C:\Windows\Prefetch&amp;#39; --csv . #dot at the end means write in current directory&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/8-edited.png&#34; alt=&#34;8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You get a whole load more with PECmd. Let’s look in more detail at what you’re given. &lt;/p&gt;
&lt;p&gt;First, we can see the various times associated with this executable (creation, modification etc). We’re also told about the executable name and file size. Interestingly, on the last line &lt;strong&gt;we can see the amount of times the executable has been run&lt;/strong&gt; (once, on our instance) as well as the time it was last run.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/9.png&#34; alt=&#34;9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, we are given &lt;strong&gt;insight into the directories and then the files that were involved in this execution&lt;/strong&gt; - this is again another excellent way to better map the granular behaviour the adversary had during their attack. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.png&#34; alt=&#34;10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note that Eric Zimmerman is kind enough to highlight the offending executable. PEcmd can do even more if you want to &lt;a href=&#34;https://binaryforay.blogspot.com/2016/01/introducing-pecmd.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;check out some other blog posts and docs&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/11-1024x433.png&#34; alt=&#34;11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are some caveats for this second technique:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, prefetch exists from Windows XP onwards, but PEcmd &lt;strong&gt;will only work from Windows 8 above;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Second, &lt;strong&gt;you don’t retrieve the arguments or parameters used&lt;/strong&gt; and so can only know the base executable that the adversary leveraged;&lt;/li&gt;
&lt;li&gt;Third, the relevancy of prefetch is &lt;strong&gt;time-based&lt;/strong&gt; - so if you do not collect it after an incident and the machine continues to be used then you may lose the evidence;&lt;/li&gt;
&lt;li&gt;Fourth and most important, &lt;strong&gt;prefetch has to be enabled on servers, as &lt;a href=&#34;https://www.forensicfocus.com/forums/mobile-forensics/prefetch-on-windows-servers/#:~:text=1.-,Is%20there%20a%20technical%20reason%20that%20this%20is%20off%3F,like%2C%20well%E2%80%A6running%20applications.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft disables recording prefetch on Windows servers by default&lt;/a&gt;. It is enabled on normal Windows endpoints.&lt;/strong&gt; You can &lt;strong&gt;&lt;a href=&#34;https://truesecdev.wordpress.com/2015/11/25/how-to-enable-prefetch-in-windows-server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;enable prefetch recording&lt;/a&gt;&lt;/strong&gt; with the following on a Windows Server:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Session Manager\Memory Management\PrefetchParameters&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EnablePrefetcher&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REG_DWORD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;reg&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;add&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Prefetcher&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;v&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MaxPrefetchFiles&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;REG_DWORD&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;8192&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Enable-MMAgent&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OperationAPI&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;net&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;start &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sysmain&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;h1&gt;Shimcache&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://www.fireeye.com/content/dam/fireeye-www/services/freeware/shimcache-whitepaper.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Shimcache&lt;/a&gt; analysis is our third technique to gather insight into an attacker’s past activities. &lt;/p&gt;
&lt;p&gt;Shimcache - called AppCompatCache on a Windows machine - was originally made to determine interoperability issues between Windows versions and applications.  Like prefetch, &lt;a href=&#34;https://www.youtube.com/watch?v=7byz1dR_CLg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;we can leverage shimcache to identify evidence of execution&lt;/a&gt; on a machine when we do not have event logs. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ericzimmerman.github.io/#!index.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Another Eric Zimmerman tool&lt;/a&gt; called &lt;strong&gt;AppCompatCacheParser&lt;/strong&gt; can give us insight into what was run on the system. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AppCompatCacheParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-t&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-csvf&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;shimcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;csv&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/12-edited.png&#34; alt=&#34;12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This will create a CSV, which you could import to your spreadsheet of choice… but some quick PowerShell can give you some visibility. There will be a lot of noise here, but if we filter through we can find something quite interesting.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;import-csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;shimcache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;csv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sort &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;lastmodified&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Descending&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;last&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/13-edited.png&#34; alt=&#34;13&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Despite not having access to the event logs, if we query &lt;strong&gt;shimcache we can see proof of Mimikatz’ execution&lt;/strong&gt;, once again. Shimcache is a relatively straightforward artefact to query. It does however have &lt;strong&gt;some complications&lt;/strong&gt;, as its implementation varies in Windows versions over the years. And again, if an investigator is not quick enough to gather the shimcache data then it may be lost!&lt;/p&gt;
&lt;h1&gt;BONUS: USN Journal&lt;/h1&gt;&lt;p&gt;The USN journal isn’t as easy an artefact to investigate as it is &lt;strong&gt;extremely&lt;/strong&gt; &lt;strong&gt;verbose.&lt;/strong&gt; I’ve included it as &lt;strong&gt;a bonus fourth tip&lt;/strong&gt;, in case the above three techniques fail to deliver you any insight for your log-less investigation. &lt;/p&gt;
&lt;p&gt;The USN journal leverages some of the artefacts we have previously encountered (like prefetch). &lt;strong&gt;It also can reach much further back&lt;/strong&gt; into the past, compared to other volatile artefacts, and identify files that were long deleted - excellent for DFIR purposes [&lt;a href=&#34;https://www.youtube.com/watch?v=1mwiShxREm8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=_qElVZJqlGY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Velocidex/velociraptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dr Michael Cohen’s Velociraptor&lt;/a&gt; is an excellent tool to help us leverage the USN journal to see what an adversary did. Fortunately, there is &lt;a href=&#34;https://velociraptor.velocidex.com/carving-usn-journal-entries-72d5c66971da&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a dedicated blog&lt;/a&gt; that offers step-by-step advice on how best to leverage Velociraptor to hunt USN details.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;I’d recommend Velociraptor for its low technical barrier&lt;/strong&gt; to &lt;a href=&#34;https://www.hackingarticles.in/threat-hunting-velociraptor-for-endpoint-monitoring/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deploy many other advanced forensic techniques&lt;/a&gt;, including prefetch hunts.&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;USN Journal: Velociraptor&lt;span class=&#34;absolute -mt-20&#34; id=&#34;usn-journal-velociraptor&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#usn-journal-velociraptor&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We can download Velociraptor on a machine we are investigating and launch it straight there - n&lt;strong&gt;o need to set up any server-client infrastructure&lt;/strong&gt;, when in an emergency: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;velociraptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;gui&lt;/span&gt;  &lt;span class=&#34;c&#34;&gt;#spin this up as admin&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/14-1024x395.png&#34; alt=&#34;14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The web browser will pop up, and we will be met with Velociraptor&amp;rsquo;s GUI. We can traverse to the main hunting page and name our hunt. We can then pick the &lt;strong&gt;USN&lt;/strong&gt; &lt;strong&gt;forensic&lt;/strong&gt; &lt;strong&gt;hunt&lt;/strong&gt;, and fire it off.&lt;/p&gt;
&lt;p&gt;Whilst the results are being collected and parsed, we can write some VQL (&lt;a href=&#34;https://velociraptor.velocidex.com/the-velociraptor-query-language-pt-1-d721bff100bf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Velociraptor Query Language&lt;/a&gt;) to &lt;strong&gt;sort the results by timestamp&lt;/strong&gt;, and filter out some other headers we don’t care about: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;SELECT&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Usn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Timestamp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Filename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Fullpath&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FileAttributes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Reason&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SourceInfo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;FROM&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;ORDER&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;BY&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;Timestamp&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;desc&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;In our USN journal results, we can see &lt;strong&gt;the relics of a Mimikatz&lt;/strong&gt; execution, along with the timestamp that we can use to map the adversaries timeline. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/15-edited-1.png&#34; alt=&#34;15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Unfortunately, the USN journal is often &lt;strong&gt;challenging to navigate when used in a real life incident.&lt;/strong&gt; My arbitrary example with Mimikatz doesn’t quite convey the &lt;strong&gt;complexity&lt;/strong&gt; and &lt;strong&gt;verbosity&lt;/strong&gt; that you will face when leveraging the USN journal in a real investigation. For example, in our artificial scenario, just &lt;strong&gt;a few runs&lt;/strong&gt; of Mimikatz resulted in near &lt;strong&gt;97 rows&lt;/strong&gt; in the USN journal, via Velociraptor.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/16.png&#34; alt=&#34;16&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Burn the logs, see if I care!&lt;/h1&gt;&lt;p&gt;This has been an overview into a number of &lt;strong&gt;easy to use, highly-reliable, rapid digital forensics techniques&lt;/strong&gt;. I have found these techniques &lt;strong&gt;useful in investigations where the event logs can no longer be trusted or accessed&lt;/strong&gt; due to adversarial tampering, or perhaps where &lt;strong&gt;logging was not set up&lt;/strong&gt; in the first place by the client. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/elmo.png&#34; alt=&#34;elmo&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have barely scratched the surface of digital forensics and incident response. There are still a whole load of techniques you can deploy when you find that Windows event logs cannot deliver you the puzzle pieces you need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you want to read about &lt;strong&gt;amcache,&lt;/strong&gt; I can recommend this &lt;a href=&#34;https://www.ssi.gouv.fr/uploads/2019/01/anssi-coriin_2019-analysis_amcache.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;excellent paper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Checkout the rest of &lt;a href=&#34;https://ericzimmerman.github.io/#!index.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eric Zimmerman’s awesome tools!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;If you need to explore a &lt;strong&gt;forensic&lt;/strong&gt; &lt;strong&gt;image&lt;/strong&gt; or &lt;strong&gt;memory dump&lt;/strong&gt;, I can recommend some &lt;a href=&#34;https://github.com/Purp1eW0lf/Blue-Team-Notes#Digital-Forensics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cheat sheets&lt;/a&gt; (shameless plug) on leveraging tools like &lt;a href=&#34;https://github.com/volatilityfoundation/volatility/wiki&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Volatility&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;For more information on DFIR techniques, &lt;a href=&#34;https://www.youtube.com/c/13cubed/videos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Richard Davis 13Cubed videos&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/c/13cubed/videos&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;/a&gt;are essential educational resources&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When you’re next tasked with &lt;strong&gt;a log-less investigation&lt;/strong&gt;, see if you can leverage &lt;strong&gt;PowerShell history, prefetch, shimcache, and the USN journal&lt;/strong&gt; to identify any undiscovered nuance to your adversaries’ campaign. &lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>PowerShell Jobs</title>
      <link>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</link>
      <pubDate>Thu, 07 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/10/2021-10-07-powershell-jobs/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Detection-1.png&#34; alt=&#34;Jumpsec icons Detection 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;JUMPSEC investigators recently observed an adversary weaponising PowerShell Jobs to schedule their attack, whilst responding to an incident. In this article, we discuss what PowerShell jobs are, how they can be leveraged for malicious purposes, and how defenders can protect, detect, and respond to neutralise the threat. &lt;/p&gt;
&lt;h1&gt;What are PowerShell Jobs&lt;/h1&gt;&lt;p&gt;Adversaries are known to &lt;a href=&#34;https://attack.mitre.org/techniques/T1053/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schedule parts&lt;/a&gt; of their campaign once they have infiltrated a target network. They may timetable their attack for an opportune moment (such as during unsociable hours, based on the region in which the infrastructure is hosted, or support teams reside) or set up a recurring task to ensure ongoing &lt;a href=&#34;https://attack.mitre.org/tactics/TA0003/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;persistence&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.microsoft.com/en-us/powershell/module/psscheduledjob/?view=powershell-5.1&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PowerShell jobs&lt;/a&gt; aren’t designed to be inherently malicious and have many legitimate use cases. However, as is often the case in cyber security, the innate functionality of PowerShell Jobs and its susceptibility to abuse means it can also be leveraged by an adversary. &lt;/p&gt;
&lt;h2&gt;Using legitimately&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-legitimately&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-legitimately&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;When using the command line for most operating systems, users have to run a command and wait a microsecond for the system to return with a reply. This can be inconvenient - for example, when running a script that will take a while to run, or when you know that you want to run the command at a specific time or date in the future. &lt;/p&gt;
&lt;p&gt;When using PowerShell, a job allows you to push a task into the background. PowerShell will continue to work on your query behind the scenes and allow you to continue using the shell for other things. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Push command to the background&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Start-Job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Retrieve the results of the backgrounded command&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Receive-job&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image6-1024x407.png&#34; alt=&#34;image6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;According to schedule&lt;span class=&#34;absolute -mt-20&#34; id=&#34;according-to-schedule&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#according-to-schedule&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;PowerShell jobs can also be &lt;strong&gt;scheduled&lt;/strong&gt; to execute on very particular conditions&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#organise when the task should trigger&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Daily&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;4:15 AM&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-DaysInterval&lt;/span&gt; &lt;span class=&#34;mf&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#register the PowerShell job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Collect_date&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScriptBlock&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image15-1-1024x234.png&#34; alt=&#34;image15 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There are numerous ways to go and find where our scheduled job is located&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#Either of these work just fine&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-id&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-taskname&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image14-1024x155.png&#34; alt=&#34;image14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image10-1024x166.png&#34; alt=&#34;image10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can also find out a scheduled job’s date, time, and frequency are due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image4.png&#34; alt=&#34;image4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Malicious scheduled jobs&lt;/h1&gt;&lt;p&gt;In the above example, we’re completing the rather boring scheduled job of collecting the date. A more interesting representative example of how PowerShell jobs can be leveraged by attackers was found during our response to a recent incident. &lt;/p&gt;
&lt;p&gt;Whilst this article won’t recreate the exact syntax the attacker used for obvious reasons, we’ve provided a functionally similar example below.&lt;/p&gt;
&lt;h2&gt;Using for evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;using-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#using-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let’s schedule a malicious PowerShell Job to run at &lt;strong&gt;3 o’clock in the morning on Christmas Day&lt;/strong&gt; - a gift to incident responders and sysadmins everywhere!&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#schedule the job for Christmas&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-JobTrigger&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Once&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-At&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;12/25/2021 3:00 AM&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#point to the malicious script to execute&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;C:&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SuperEvil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;ps1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#try to hide this job from the Task Scheduler GUI….will still show up in the command line and GUI (if the right options are selected in ‘View’)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;New-ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;HideInTaskScheduler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#and now schedule the job&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Register-ScheduledJob&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-FilePath&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$file&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trigger&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$trigger&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;–&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ScheduledJobOption&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$options&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image13-1024x228.png&#34; alt=&#34;image13&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ve emulated how an adversary could weaponise a PowerShell job to strike when the defenders are less likely to be able to manually react and respond. In these cases, automated measures to prevent and detect the threat are essential.&lt;/p&gt;
&lt;h1&gt;Hunting Malicious Jobs&lt;/h1&gt;&lt;p&gt;Now, you know me, I&amp;rsquo;m not about to show you something malicious without showing you the defensive counterpart! Let&amp;rsquo;s put our Blue Team hat on&lt;/p&gt;
&lt;h2&gt;Monitoring&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;From a monitoring and detection point of view, if we combine &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Sysmon&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Florian Roth’s&lt;/a&gt; config of rules, we can see how a PowerShell job would be flagged&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image11.png&#34; alt=&#34;image11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The BLUE arrows: event info
&lt;ul&gt;
&lt;li&gt;The Event ID 11 involves file creation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The RED arrows: specific info
&lt;ul&gt;
&lt;li&gt;TargetFileName shows that the scheduled job has been written to the Task directory&lt;/li&gt;
&lt;li&gt;Notice, however, we have no visibility to WHAT this task does….we just know it has been registered.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;The PINK arrow: MITRE ATT&amp;amp;CK reference
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However Florian Roth includes the MITRE ATT&amp;amp;CK tactic number in a particular event. This allows security analysts to schematise the event data they are observing with the wider TTPs of an adversary. &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the above sysmon/endpoint log based SIEM, we would &lt;em&gt;have&lt;/em&gt; some visibility of scheduled jobs. However this data won&amp;rsquo;t be enough for an analyst to work with. We need to dig deeper beyond &lt;strong&gt;passive monitoring&lt;/strong&gt; to &lt;strong&gt;active threat hunting&lt;/strong&gt; to identify exactly what this scheduled job is about. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image8.png&#34; alt=&#34;image8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Hunting&lt;span class=&#34;absolute -mt-20&#34; id=&#34;hunting&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#hunting&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In our JUMPSEC clients’ environments, we have found no system-level usage of scheduled jobs. This suggests that scheduled jobs you identify are deliberately put there and are worth investigation.&lt;/p&gt;
&lt;p&gt;You can query the scheduled jobs on a machine with this straight forward command&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image5-1024x177.png&#34; alt=&#34;image5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also examine &lt;em&gt;when&lt;/em&gt; this scheduled job is due to be executed&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ScheduledJob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-JobTrigger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Ft &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-Property&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Label&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;ScheduledJob&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Expression&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;={&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;JobDefinition&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}},&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Enabled&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;At&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;frequency&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DaysOfWeek&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image7-1024x162.png&#34; alt=&#34;image7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Knowing that this premeditated attack will ruin Christmas for an incident responder, let’s neutralise the malicious PowerShell job that has been scheduled. &lt;/p&gt;
&lt;h2&gt;Responding&lt;span class=&#34;absolute -mt-20&#34; id=&#34;responding&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#responding&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;You can remove a PowerShell scheduled job in two different ways, neither of which present a disadvantage. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option one&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledTask&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-TaskName&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#option two&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Unregister-ScheduledJob&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Christmas_Day&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Confirm:&lt;/span&gt;&lt;span class=&#34;vm&#34;&gt;$false&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/image3-1024x95.png&#34; alt=&#34;image3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image12-1024x79.png&#34; alt=&#34;image12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can confirm that the malicious tasks have been eradicated from this machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image9.png&#34; alt=&#34;image9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Scheduling Security&lt;/h1&gt;&lt;p&gt;This article took inspiration from a real life attack, and examined how an adversary could abuse PowerShell scheduled Jobs to both gain persistence, and quietly dwell on a network before picking the opportune moment to strike. Scripted attacks must be proactively identified and eliminated, as automated attack chains can be speedily operated by an attacker, reducing the opportunity for defenders to respond. &lt;strong&gt;It’s important you are scouring your network for the recurring tasks that can give an attack a backdoor into your environment.&lt;/strong&gt;  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Related articles&lt;/strong&gt;: We recently wrote about how &lt;a href=&#34;https://labs.jumpsec.com/running-once-running-twice-pwned-windows-registry-run-keys/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;registry run keys&lt;/a&gt; can offer adversaries a stealthy persistence mechanism&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Detect and investigate any recurring tasks you see in your environment, and you may just catch an adversarial campaign before they can cause any damage. Deny them the pleasure of striking on Christmas Day!&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/image2.png&#34; alt=&#34;image2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Burp Suite and Beyond: Exploring non-HTTP protocols using MITM_RELAY</title>
      <link>//localhost:1313/articles/2021/08/2021-08-24-burpsuite-and-beyond/</link>
      <pubDate>Tue, 24 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-24-burpsuite-and-beyond/</guid>
      <description>
        
        
        &lt;p&gt;By &lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Muhammet Ali A&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rıtürk&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In this article, Muhammet takes us on a deep technical journey to persevere beyond the limitations of the proxy tool Burp Suite, and explore non-HTTP, application-layer protocols using ‘MITM RELAY’.&lt;/p&gt;
&lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;As an offensive security tester, we often rely on Burp Suite. While an excellent resource when penetration testing, it’s not without limitations, as we explored in our previous article on &lt;a href=&#34;https://labs.jumpsec.com/burp-suite-python-scripter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;utilising custom python scripts.&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;To get around some particular limitations in a recent case, I used a cool tool called &lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;MITM_RELAY&lt;/strong&gt;&lt;/a&gt; which is described as a “hackish way to intercept and modify non-HTTP protocols through Burp &amp;amp; others”. &lt;/p&gt;
&lt;p&gt;This tool allows us to compensate for Burp Suite’s limitations and extend it’s proxying capabilities for protocols beyond HTTP. Let’s explore why this is important when looking to secure an application. &lt;/p&gt;
&lt;h1&gt;Simulating a man-in-the-middle&lt;/h1&gt;&lt;p&gt;Imagine &lt;strong&gt;a mobile application&lt;/strong&gt;. We’ll call it &lt;strong&gt;Alpaca App.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/alpaca_app.png&#34; alt=&#34;alpaca app&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It has loads of great features that keep you connected with your favourite Alpaca friends. Besides being cool, the mobile app needs to be &lt;strong&gt;secure&lt;/strong&gt; when you’re using it to access the big bad internet. &lt;/p&gt;
&lt;p&gt;Our task in this article is to understand if the app is broadcasting and transferring data securely or insecurely enough for an adversary to &lt;strong&gt;intercept&lt;/strong&gt; the traffic. This can also be understood as &lt;strong&gt;man-in-the-middle&lt;/strong&gt; (MITM) attack, whereby a malicious (and nosy) actor eavesdrops on the network traffic that a machine is innocently transmitting and steals or manipulates the data for their evil purposes. &lt;/p&gt;
&lt;p&gt;An important tool for MITM research involves &lt;strong&gt;proxying&lt;/strong&gt;, which acts as an intermediate between two machines - and can be weaponized for evil purposes. &lt;a href=&#34;https://portswigger.net/burp/documentation/desktop/tools/proxy/getting-started&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Burp Suite&lt;/strong&gt;&lt;/a&gt; is a staple tool for studying web app and mobile app communications, as it proxies the information between the client and server so we can research exactly how the application works.&lt;/p&gt;
&lt;p&gt;Definitions aside, let’s talk about the technical complications for proxying our specific mobile app. Take a big old sip of coffee, and let&amp;rsquo;s get to work.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/coffee.png&#34; alt=&#34;coffee&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;The limits of Burp Suite&lt;/h1&gt;&lt;p&gt;Burp Suite is able to catch &lt;strong&gt;HTTP&lt;/strong&gt; &lt;strong&gt;communications.&lt;/strong&gt; This is a specific application-layer protocol. The diagram below shows the process by which Burp Suite proxies communications over HTTP protocol. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/burp.png&#34; alt=&#34;burp&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;However, Burp Suite is &lt;strong&gt;ONLY&lt;/strong&gt; able to proxy this specific protocol. &lt;strong&gt;Unfortunately, Alpaca App doesn’t use HTTP to communicate. It uses XMPP instead.&lt;/strong&gt; So what now? &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The Extensible Messaging and Presence Protocol (XMPP for short) is another application-layer protocol that is some decades old now, and originally went by the name &lt;strong&gt;Jabber.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Thankfully, we can use our new tool to intercept anything we want.&lt;/strong&gt; &lt;/p&gt;
&lt;h1&gt;Proxying XMPP traffic using MITM Relay&lt;/h1&gt;&lt;p&gt;As mentioned earlier, we are trying to understand whether &lt;strong&gt;Alpaca App is communicating securely.&lt;/strong&gt; Because it communicates via XMPP, we need to intercept that traffic and then study it. Let’s explain that again through a diagram: &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/xmpp.png&#34; alt=&#34;xmpp&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Not bad. So now we have a limited tool (Burp Suite) and we have a tool that can upgrade it (MITM_RELAY), so let’s get to work combining this so Burp Suite can understand Alpaca App’s XMPP!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Burp Suite has &lt;a href=&#34;https://portswigger.net/burp/documentation/desktop/tools/extender&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;its own extension&lt;/strong&gt;&lt;/a&gt; for &lt;a href=&#34;https://portswigger.net/bappstore/1d0986521ace4b2dbf0b70836efa999d&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;XMPP protocol interception&lt;/strong&gt;&lt;/a&gt;, but I didn’t find this to be as effective as the MITM_RELAY tool. &lt;/p&gt;
&lt;p&gt;The Burp XMPP extension would occasionally drop packets, which is obviously not ideal when trying to build a robust picture of the security of the app. The Burp extension, while having some good features, needed quite a bit of tinkering to make it work. &lt;/p&gt;
&lt;p&gt;In contrast, I found the MITM_RELAY tool easier to use, but really, you can use anything that you feel comfortable with!&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;creators&lt;/strong&gt;&lt;/a&gt; of the tool made a nice diagram below about how the tool works, and how to intercept different types of traffic via HTTP (Burp Suite) Proxy.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mitm.png&#34; alt=&#34;mitm&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Digging deeper, the relay server has &lt;strong&gt;three&lt;/strong&gt; &lt;strong&gt;key&lt;/strong&gt; functions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Relay Listener&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;strong&gt;listener&lt;/strong&gt; for a specific protocol and a specific source port will &lt;strong&gt;forward&lt;/strong&gt; the traffic to our &lt;strong&gt;target IP and target PORT&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Packet Wrapper and Unwrapper&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This component will wrap all traffic into HTTP form and deliver it to the proxy tool. When the proxy tool forwards the traffic on, it will unwrap the traffic to it’s original protocol)&lt;/li&gt;
&lt;li&gt;So XMPP &amp;mdash;&amp;raquo; HTTP &amp;mdash;&amp;raquo; XMPP&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Echo Web Server&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;This web server is a required part of this. As we’re sending the request over out proxy tool there will need to be a response after we finish sending the request&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/1.png&#34; alt=&#34;1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s go through this step by step. Assume our first XMPP packet has left &lt;strong&gt;Alpaca App,&lt;/strong&gt; and was intending to reach &lt;strong&gt;Alpaca Inc.’s servers&lt;/strong&gt; out in the big internet. &lt;/p&gt;
&lt;p&gt;1. It will pass through our relay server, be wrapped in HTTP, and sent to the Proxy server (Burp Suite)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2.png&#34; alt=&#34;2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;2. After completing the wrapping-modification of the initial request, we will send it to the &lt;strong&gt;Echo Web server.&lt;/strong&gt; This will forward it to the upper level to unwrap it to the original protocol (XMPP) readying it to send to the Alpaca Inc. Server as originally intended:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3.png&#34; alt=&#34;3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;3. So far we have managed to successfully send Alpaca App’s XMPP traffic to the Alpaca Inc. server, situated on the internet. It is now the Alpaca Inc. server’s turn to answer us. Lets see how that works in return:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The application server then answers in the Alpaca app. We now have the ability to modify our requests to change the information we receive. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5.png&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;4. When we are done examining Alpaca Inc.’s server response, we will let the XMPP packet go back to the client-side, (the Alpaca App). The same wrapping, unwrapping, and echo repeating occurs here to deliver the traffic back. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/6.png&#34; alt=&#34;6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;So far, so good? Are you doing alright? Here’s an alpaca meme to lighten things up.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/bags.png&#34; alt=&#34;bags&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We have followed the process from the first XMPP traffic from Alpaca App on our mobile phone, through our Burp Suite-MITM_RELAY that wraps it up in HTTP, and then when it unwraps it back to XMPP and gives it the Alpaca Inc. Server - and then back again through this whole apparatus.&lt;/p&gt;
&lt;p&gt;I hope you enjoyed the visuals, and they provided some benefit. &lt;strong&gt;Let’s open up the command-line, so you can replicate this and set this up too!&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Getting hands-on!&lt;/h1&gt;&lt;p&gt;Are you ready to do this yourself? You’ll need:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/jrmdev/mitm_relay&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MITM_RELAY script&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A proxy tool&lt;/strong&gt; (Burp, in our case)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Two mobile clients:&lt;/strong&gt; talking to each other using an the app’s XMPP protocol, &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;A firewall rule:&lt;/strong&gt; needed to route the traffic from mobile client to relay server.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Setting up the environment&lt;span class=&#34;absolute -mt-20&#34; id=&#34;setting-up-the-environment&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#setting-up-the-environment&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;MITM_RELAY&lt;span class=&#34;absolute -mt-20&#34; id=&#34;mitm_relay&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#mitm_relay&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;For our MITM_RELAY setup, let&amp;rsquo;s look at the parameters we need:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/params-1-1024x114.png&#34; alt=&#34;params 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-r&lt;/code&gt;:  Relaying settings. This parameter helps us to configure the relay
&lt;ul&gt;
&lt;li&gt;[local port] : [dest_host] : [dest_port]&lt;/li&gt;
&lt;li&gt;Or adding protocol: [udp:|tcp:] lport: rhost : rport&lt;/li&gt;
&lt;li&gt;Example: tcp:8083:142.250.187.238:443 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-l&lt;/code&gt; &lt;strong&gt;:&lt;/strong&gt; Relay listener. This is the address the relays will listen on. 
&lt;ul&gt;
&lt;li&gt;Be careful when setting this address, your relay listening address must be reachable from the client of you.&lt;/li&gt;
&lt;li&gt;And must be the same in  &amp;ndash;to&amp;ndash;destination  in iptables rule you use&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt; The proxy parameter, in this case our proxy server will be in place&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Our MITM relay is now ready&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/mitmready.png&#34; alt=&#34;mitmready&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Proxy Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;proxy-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#proxy-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We then can set up the rest of our proxy tooling and client-side Alpaca mobile app communication. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Our proxy tool (Burp Suite) is listening on &lt;strong&gt;192.168.1.184:8083&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;I am using a XMPP based chat mobile application. You, however, can choose any kind of application you would like to test. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Firewall Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;firewall-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#firewall-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;We will need to manipulate the firewall for our task. Fortunately for us, my colleague SHD already talks about how to use &lt;a href=&#34;https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;iptables&lt;/strong&gt;&lt;/a&gt; to create super specific firewall changes.&lt;/p&gt;
&lt;p&gt;Lets leverage a visual to show what we’ll need our firewall to do: &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/firewall.png&#34; alt=&#34;firewall&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Our firewall will need to do some very specific port forwarding…there are two ways to utilise &lt;strong&gt;iptables&lt;/strong&gt; to achieve this task.&lt;/p&gt;
&lt;p&gt;You can either forward one specific port on TCP/UDP for all destinations to the relay: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A OUTPUT -p tcp --dport &lt;span class=&#34;m&#34;&gt;5222&lt;/span&gt; -j DNAT --to-destination 192.168.1.184:9876&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Or you can forward one specific port on TCP/UDP for one specific destination to the relay:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;iptables -t nat -A OUTPUT -p tcp -s DEST_IP--dport &lt;span class=&#34;m&#34;&gt;5222&lt;/span&gt; -j DNAT --to-destination 192.168.1.184:9876&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;For the application you are researching, you have the task of identifying which ports to use and forward to - I unfortunately do not have the answers for your application. But I do have the answers for the Alpaca App, so let’s keep going. &lt;/p&gt;
&lt;h2&gt;Ready to start testing? &lt;span class=&#34;absolute -mt-20&#34; id=&#34;ready-to-start-testing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#ready-to-start-testing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Now that our environment is set up, let&amp;rsquo;s fire up our mobile application (Alpaca App) and see where the packets go.&lt;/p&gt;
&lt;h3&gt;Client to Server&lt;span class=&#34;absolute -mt-20&#34; id=&#34;client-to-server&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#client-to-server&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;In the top half of the screenshot (below), we can see MITM_RELAY confirm its listening configuration and then confirm it has received the new client (new connection)  that it will forward on. &lt;/p&gt;
&lt;p&gt;The lower half of the screenshot is our Burp Suite proxy tool that is receiving relay’s forwarded information.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/client_to_server.png&#34; alt=&#34;client to server&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Server to Client&lt;span class=&#34;absolute -mt-20&#34; id=&#34;server-to-client&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#server-to-client&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;And on return from the Alpaca Inc. servers, Burp Suite intercepts the communication destined for the Alpaca mobile app.  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;X-Mitm_Relay-to&lt;/strong&gt; and &lt;strong&gt;X-Mitm_Relay-From&lt;/strong&gt; indicates the changes between &lt;strong&gt;thick&lt;/strong&gt; &lt;strong&gt;client&lt;/strong&gt; and &lt;strong&gt;application&lt;/strong&gt; &lt;strong&gt;server&lt;/strong&gt; addresses dynamically, based on the where the packets come from.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/server_to_client.png&#34; alt=&#34;server to client&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;Alpaca App chat&lt;span class=&#34;absolute -mt-20&#34; id=&#34;alpaca-app-chat&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#alpaca-app-chat&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let’s use the cool chat in the Alpaca App to send our best buddy a message.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/buddy.png&#34; alt=&#34;buddy&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This message goes from Alpaca App &amp;mdash;&amp;raquo; MITM_RELAY &amp;mdash;&amp;raquo; Burp Suite proxy. If we recall, this converts the original XMPP into HTTP, which Burp Suite can understand.&lt;/p&gt;
&lt;p&gt;We can see the intercepted contents in Burp Suite:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/intercepte.png&#34; alt=&#34;intercepte&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Now we have intercepted the message in the Alpaca App chat, we can drop or forward the message further. Let’s make sure it gets through.&lt;/p&gt;
&lt;p&gt;Here we can see the actual conversation between the two mobile devices. Both are using the Alpaca App and communicating through XMPP. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/comms.png&#34; alt=&#34;comms&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;There and back again&lt;/h1&gt;&lt;p&gt;The moral of this story is that we do not have to give up on our security tooling if it has default limitations. On the contrary, we can layer up the tools we use and extend the capability of the tools that we are comfortable with. &lt;/p&gt;
&lt;p&gt;In our example, we extended Burp Suite’s HTTP-default capabilities with MITM_RELAY so we could assess the Alpaca App that uses the XMPP protocol. &lt;/p&gt;
&lt;p&gt;I hope you found this useful, and remember it next time you need to research TEXT-based traffic in Non-HTTP protocols. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Intercept everything and enjoy my friends!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/alpaca_cool.png&#34; alt=&#34;alpaca cool&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Muhammet Ali Arıtürk&lt;/strong&gt; is a Security Researcher @ JUMPSEC. &lt;/p&gt;
&lt;p&gt;You can &lt;a href=&#34;https://twitter.com/hit1t&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;follow him on Twitter&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Running Once, &lt;del&gt;Running Twice&lt;/del&gt;, Pwned! Windows Registry Run Keys</title>
      <link>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</link>
      <pubDate>Wed, 11 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-11-running-once-running-twice-pwned-windows-registry-run-keys/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;By Dray Agha&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/Jumpsec_icons_Physical-security-2.png&#34; alt=&#34;Jumpsec icons Physical security 2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The Windows registry is a vast and complex topic and cannot be understood and defended in one article. One particular area of interest from a security perspective is registry run keys. In this article, we discuss who uses run keys, how to uncover abuse, and how to eradicate evil from them. &lt;/p&gt;
&lt;h2&gt;An Introduction to Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;an-introduction-to-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#an-introduction-to-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;&lt;em&gt;What are registry run keys?&lt;/em&gt;&lt;/strong&gt; Run keys are an obscure mechanism of the registry to execute something on a Windows system when a user logs in or the machine boots up. &lt;/p&gt;
&lt;p&gt;A number of advanced adversaries have abused run keys due to their problematic nature. For example, &lt;a href=&#34;https://securelist.com/sofacy-apt-hits-high-profile-targets-with-updated-toolset/72924/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Fancy Bear&lt;/strong&gt;&lt;/a&gt; (also known as &lt;a href=&#34;https://download.bitdefender.com/resources/media/materials/white-papers/en/Bitdefender_In-depth_analysis_of_APT28%E2%80%93The_Political_Cyber-Espionage.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;APT28&lt;/strong&gt;&lt;/a&gt;), &lt;a href=&#34;https://www.proofpoint.com/us/blog/threat-insight/i-knew-you-were-trouble-ta456-targets-defense-contractor-alluring-social-media&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;TA456&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://blog.talosintelligence.com/2018/01/korea-in-crosshairs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Group 123&lt;/strong&gt;&lt;/a&gt; enjoy weaponizing run keys to achieve persistent access to a compromised network. Run keys have housed all manner of malicious content - from simple executables to macro-riddled spreadsheets.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MITRE ATT&amp;amp;CK® records this particular persistence tactic as the sub-technique &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;T1547.001&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt; It is not a super common technique for adversarial campaigns, however it can offer ardent persistence - all the more reason for you and I to explore this obscurity further. &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-53.png&#34; alt=&#34;2021 07 28 16 53&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Though advanced attackers abuse run keys on occasion, &lt;strong&gt;I find it is a mechanism that is not discussed widely enough, even though it is quite straightforward to query run keys for evil.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;The silence on this registry capability isn’t from technical gaps across the infosec community. &lt;strong&gt;Rather, run keys are an unexpected executable component of the ‘config database’ that is the Windows registry.&lt;/strong&gt; This means they often don’t get the same level of attention compared to bigger, more well-known attacker techniques and OS components. However, I recently came across this interesting snippet on the infosec social circuit:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_17-15.png&#34; alt=&#34;2021 08 02 17 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Before we get into how to hunt for malicious run keys, &lt;strong&gt;let’s detour down the Windows registry.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;The Windows Registry&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-windows-registry&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-windows-registry&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;The Windows registry is a labyrinthine place. On the surface it presents itself as a &lt;a href=&#34;https://docs.microsoft.com/en-us/troubleshoot/windows-server/performance/windows-registry-advanced-users&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;centralised database&lt;/strong&gt;&lt;/a&gt; to store information pertaining to user and machine settings. &lt;strong&gt;The reality is that it’s more a menagerie of weird and wonderful capabilities&lt;/strong&gt; that Microsoft sometimes obscurely document, despite these capabilities possessing devastating potential.&lt;/p&gt;
&lt;p&gt;I could spend hours writing about the inconsistencies and capriciousness of the Windows registry. Trying to understand the limits and parameters of its potential is truly maddening. It seems like the byzantine &lt;strong&gt;nature of the registry offers an adversary an unfair advantage&lt;/strong&gt; to stash away their persistence mechanisms and skulk outside the network until the Blue Team has averted their gaze. &lt;/p&gt;
&lt;p&gt;Trying to decipher what is benign and what is malevolent in the windows registry can be considered Sisyphean, especially during an incident.&lt;/p&gt;
&lt;h2&gt;Run keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;I hope so far I have conveyed just how difficult it is to tame the registry. To make matters worse, run key capabilities are criminally under-documented by Microsoft, who &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/setupapi/run-and-runonce-registry-keys&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;devote a mere six paragraphs&lt;/strong&gt;&lt;/a&gt; to them.&lt;/p&gt;
&lt;p&gt;Run keys live in the registry. They are configurable to allow a program to execute when a user logs in or the computer is turned on.  “&lt;em&gt;But hold on!&lt;/em&gt;”, I hear you angrily cry, “&lt;em&gt;Windows already has a&lt;/em&gt; &lt;strong&gt;&lt;em&gt;Task Scheduler&lt;/em&gt;&lt;/strong&gt;, &lt;em&gt;THAT’S how you schedule tasks!!!&lt;/em&gt;”&lt;/p&gt;
&lt;p&gt;Well, not according to our Lord and Saviour Bill Gates. Moreover, run keys have some crucial differences that make comparisons to Windows’ &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/win32/taskschd/task-scheduler-start-page&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Task Scheduler&lt;/strong&gt;&lt;/a&gt; somewhat limited.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/memes-1.png&#34; alt=&#34;memes 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In contrast to Windows Task Scheduler, &lt;strong&gt;registry run keys possess a number of unique characteristics&lt;/strong&gt;:&lt;/p&gt;
&lt;h3&gt;Character Limitations&lt;span class=&#34;absolute -mt-20&#34; id=&#34;character-limitations&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#character-limitations&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Run keys can only store commands that are less than 280 characters.&lt;/strong&gt; So an adversaries’ one-liner must form as few characters as a Tweet. I hope Microsoft didn’t intend for THAT to be a low-tier defence mechanism, as your basic script-kiddie reverse shell will barely cost you 50 characters. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-43.png&#34; alt=&#34;2021 07 28 15 43&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Moreover, compiling your own malicious executable and firing it off via the run keys will cost you very few characters but achieve maximum effect. So whilst the character limitation is unique compared to other system timers, it’s a trivial obstacle. &lt;/p&gt;
&lt;h3&gt;Special Character Behaviour&lt;span class=&#34;absolute -mt-20&#34; id=&#34;special-character-behaviour&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#special-character-behaviour&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Another unique feature of run key considers how special characters change the behaviour of the scheduled command.&lt;/strong&gt; Specifically, the &lt;strong&gt;exclamation mark&lt;/strong&gt;  ( ! ) and the &lt;strong&gt;asterisk /&lt;/strong&gt; &lt;strong&gt;wildcard&lt;/strong&gt; ( * ). By default, the run key wipes itself after execution - whether it fails to execute its task or not. These two special characters can be deployed to alter this behaviour.&lt;/p&gt;
&lt;p&gt;If, on your next threat hunting session or incident response, you see this bad boy right here with an exclamation mark, you have encountered a run key that will persist until it has run its allocated command for sure. &lt;strong&gt;If for whatever reason the evil command does not run, the exclamation mark ensures that it will not delete itself until it runs successfully.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-24.png&#34; alt=&#34;2021 07 28 09 24&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The prefixed exclamation of a run key can be defeated by booting the computer in Safe Mode.&lt;/strong&gt; To ensure that a run key is executed regardless of boot mode, &lt;strong&gt;an adversary can leverage an asterisk / wildcard which forces the command to run.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-26.png&#34; alt=&#34;2021 07 28 09 26&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Run keys are configured to wipe themselves after running, by default, which means that unless your logging and detection is sharp, these kinds of malicious activities could go by unnoticed, unless you go through the painstaking  process of forensically recovering the image of the machine&lt;/p&gt;
&lt;h1&gt;Hunting Run Keys&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;images/2021-07-28_16-11.png&#34; alt=&#34;2021 07 28 16 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Is this your face right now? This was my face when I first encountered run keys. This may actually be my face all the time, to be honest. &lt;em&gt;#blueteamproblems&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Although run keys may seem complicated and obscure, &lt;strong&gt;I promise you they are anything but.&lt;/strong&gt; They are wonderfully easy to query and monitor, and they show up fabulously in a SIEM when an adversary manipulates their values. &lt;strong&gt;Let’s prove it together.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are a number of places where malicious run keys can be deployed. We’re just going to focus on the top four locations, but if you read some &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;red team documentation&lt;/strong&gt;&lt;/a&gt; you’ll find some more registry locations to deploy run key persistence. &lt;/p&gt;
&lt;p&gt;Anyway, in the Windows registry, if you look under HKey Local Machine and Current User, and traverse a couple of directories, you’ll find &lt;strong&gt;Run&lt;/strong&gt; and &lt;strong&gt;RunOnce.&lt;/strong&gt; &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;The directories are important here.&lt;/strong&gt; The behaviour of the run key is contingent on the registry location it is written in: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;HKLM:\&lt;/strong&gt; it means this was written as a &lt;strong&gt;high-privileged&lt;/strong&gt; user (most likely Admin) or SYSTEM.
&lt;ul&gt;
&lt;li&gt;Run keys written here can &lt;strong&gt;execute when the machine boots up&lt;/strong&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something something written in &lt;strong&gt;HKCU:\&lt;/strong&gt; it means this was written as just a &lt;strong&gt;normal user&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Run keys written here will &lt;strong&gt;only execute when the user logs in&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;If you see something written to &lt;strong&gt;\RunOnce&lt;/strong&gt; it &lt;strong&gt;will&lt;/strong&gt; be removed after execution&lt;/li&gt;
&lt;li&gt;If you see something written in &lt;strong&gt;\Run&lt;/strong&gt; it &lt;strong&gt;will not&lt;/strong&gt; be removed after execution
&lt;ul&gt;
&lt;li&gt;These can be complicated by the &lt;strong&gt;special character behaviour&lt;/strong&gt; that we already discussed.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;What do Run Keys look like IRL ?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;what-do-run-keys-look-like-irl-&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#what-do-run-keys-look-like-irl-&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;In real life, you actually have to sift a little bit of the registry’s noise to get to the meat of a run key.&lt;/strong&gt; Allow me to share with you two examples, where the first has not been filtered with PowerShell, and the second is enjoying a luxurious yet temporal life as filtered PowerShell.&lt;/p&gt;
&lt;p&gt;Look at this mess. What even is this? &lt;strong&gt;We don’t even need the stuff highlighted in the red box, it’s just noise.&lt;/strong&gt; We know this is the ‘HKLM’ Drive and ‘Run’ ChildName…&amp;hellip;we know that because we are the ones who traversed here! Honestly…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-20-1024x349.png&#34; alt=&#34;2021 07 28 17 20&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Let’s filter out the noise with some PowerShell:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/124326535-76c64680-db7e-11eb-9b98-261b3704d30a.png&#34; alt=&#34;124326535 76c64680 db7e 11eb 9b98 261b3704d30a&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Look at how superior this is. Imagine running this glorious filtered-one-liner, and getting thousands of endpoints returning information in this kind of clear, noise-free way; the stuff Blue Team dreams are made of. &lt;strong&gt;This kind of filtered PowerShell is fantastically suited to be run enterprise-wide to identify anomalies beyond the standard builds across your network.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;If you look in the run keys, you&amp;rsquo;ll find the entries’ name and accompanying commands &lt;em&gt;(name: command).&lt;/em&gt; The legitimate contents of the run keys can vary and it’s your task to understand what is normal in your enterprise, as this will allow abnormal inconsistencies to stand out. &lt;/p&gt;
&lt;p&gt;As you hunt, you may want to filter out legitimate startup items in the registry runkeys. This is easily done. Using the same PowerShell as above, we can use the `-exclude` flag which already removes `PS*`. Just add a comma, and remove the other run key names that you don’t want to see. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Vmware&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bginfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-03_16-21.png&#34; alt=&#34;2021 08 03 16 21&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Malicious Run Keys&lt;span class=&#34;absolute -mt-20&#34; id=&#34;malicious-run-keys&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#malicious-run-keys&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Let us emulate some of the adversaries&amp;rsquo; behaviour. We will insert some malice onto a run key, and then I will show you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;First,&lt;/strong&gt; how to loop through and find it automatically;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Second,&lt;/strong&gt; how you eradicate it from the machine without damaging the other legitimate run keys.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Pretend we have pwned a machine, and are looking to maintain persistence. We compile evilcommand.exe, which bypasses all anti-virus known to man and gives us a reverse shell. &lt;strong&gt;We can force one of the run keys to execute our malicious program&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Set-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;!Delete After Running&amp;#39;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Value&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;evilcommand.exe&amp;#34;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;If you append `-whatif` to the end of a lot of powershell one-liners, it will not actually run your command. Instead, it will show you what the effect COULD be if you ran it. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-04-1024x110.png&#34; alt=&#34;2021 07 28 09 04&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When you want to really run something, tag on `-verbose` so you can get confirmation that the PowerShell you expected has taken effect.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-06-1024x128.png&#34; alt=&#34;2021 07 28 09 06&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Without all of the noise, this is what we have forcibly co-opted the run key to do for us: we have created a run key named “&lt;strong&gt;Delete_After_Running&lt;/strong&gt;”, whose execution &lt;strong&gt;value&lt;/strong&gt; will be “&lt;strong&gt;evilcommand.exe&lt;/strong&gt;”. Notice the &lt;strong&gt;exclamation point&lt;/strong&gt;, which as we have discussed will ensure the program will run before it self-deletes, guaranteeing our successful re-entry to this compromised machine.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-11-1024x142.png&#34; alt=&#34;2021 07 28 09 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The Task Scheduler is oblivious to this&lt;/strong&gt;. It does not and cannot recognise that this run key task has been scheduled. If I were Microsoft, I’d probably include that functionality in Task Scheduler…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_15-36-1024x491.png&#34; alt=&#34;2021 07 28 15 36&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;Finding Run Key evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;finding-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#finding-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;A quick Powershell ‘for loop’ can collect the contents of these four registry locations.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;When drafting this script, I (and now you, too) made life easier by ensuring the code produced output that was &lt;strong&gt;pre-filtered and added colours&lt;/strong&gt;. This will make our task that bit easier to determine &lt;strong&gt;IF&lt;/strong&gt; something &lt;strong&gt;abnormal&lt;/strong&gt; (read: evil) exists and &lt;strong&gt;WHERE&lt;/strong&gt; it exists.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;@&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\Run&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$items&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;write-host&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;----Reg location is &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;----&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-ForegroundColor&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;nb&#34;&gt;get-itemproperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$item&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;  &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;fl
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_09-22.png&#34; alt=&#34;2021 07 28 09 22&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;And if we look hard enough, &lt;strong&gt;we identify something abnormal&lt;/strong&gt;. Once we take the executable and reverse engineer it, we can determine it is a malicious executable from the adversary. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_17-42-1024x315.png&#34; alt=&#34;2021 07 28 17 42&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you identify a malicious run key, you are of course obliged to remove it from the machine. Let’s discuss how in a moment, &lt;strong&gt;after we discuss what this evil looks like from a SIEM / SOC perspective.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Monitoring for Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;monitoring-for-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#monitoring-for-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Let’s discuss what this looks like from a detection and monitoring perspective.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;For our example, we are using the built-in &lt;strong&gt;Windows Event Viewer&lt;/strong&gt;, and then adding &lt;a href=&#34;https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon#:~:text=System%20Monitor%20%5c%28Sysmon%5c%29%20is%20a,changes%20to%20file%20creation%20time.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Sysmon&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/Neo23x0/sysmon-config&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Florian&lt;/strong&gt; &lt;strong&gt;Roth’s&lt;/strong&gt;&lt;/a&gt; config of rules for detection. You could then feed this sysmon log data into a SIEM, and monitor hundreds of thousands of endpoints for run key malice (and other stuff too).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_18-15.png&#34; alt=&#34;2021 07 28 18 15&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;There is a wealth of information here worth considering: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;BLUE&lt;/strong&gt; arrows: event info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;Event ID 13 involves registry values&lt;/strong&gt; &lt;strong&gt;modification&lt;/strong&gt;, and this ID will be consistent in any environment. &lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;EventType&lt;/strong&gt; and &lt;strong&gt;Task Category&lt;/strong&gt; spell out exactly what is happening here too: &lt;strong&gt;a registry value is being set&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;RED&lt;/strong&gt; arrows**:** specific info&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;strong&gt;TargetObject&lt;/strong&gt; shows the &lt;strong&gt;full path&lt;/strong&gt; for the run key registry we are changing. It also shows the &lt;strong&gt;name&lt;/strong&gt; we called it, and includes the special character that modifies the behaviour&lt;/li&gt;
&lt;li&gt;The &lt;strong&gt;Details&lt;/strong&gt; section shows the command / executable the run key is forced to run&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;strong&gt;PINK&lt;/strong&gt; arrow: MITRE ATT&amp;amp;CK reference&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This may not be in every sysmon config. However &lt;strong&gt;Florian Roth&lt;/strong&gt; includes the MITRE ATT&amp;amp;CK tactic number in a particular event.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Rather than get attack alerts for every Event 13, I’d recommend you go on a bit of a discovery exercise of what the run keys in your environment normally do.&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;Across the entire enterprise do they have the same consistent contents? &lt;/p&gt;
&lt;p&gt;Or does the finance department run software that legitimately alters the run key? &lt;/p&gt;
&lt;p&gt;Would you be able to baseline this and then create a small alert for any new, inconsistent run key changes to a workstation in the finance department?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;This has greater value than hoping to catch one rogue Event 13 out of a million.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3&gt;Interactive detection&lt;span class=&#34;absolute -mt-20&#34; id=&#34;interactive-detection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#interactive-detection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;If you want a more interactive detection experience, might I recommend a tool like &lt;a href=&#34;https://docs.velociraptor.app/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Dr Michael Cohen’s Velociraptor?&lt;/strong&gt;&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Velocitaptor is a tool (and philosophy) that deserves its own article, so I will be brief here. Velociraptor is an endpoint response agent that you can install on every single endpoint across your enterprise, and orchestrate from one server via a web-app. This distributed tool allows us to then query thousands of machines at once. &lt;/p&gt;
&lt;p&gt;Built in to Velociraptor is a hunt that queries every Windows machine specifically for their startup process, and part of this hunt includes &lt;a href=&#34;https://github.com/Velocidex/velociraptor/blob/master/artifacts/definitions/Windows/Sys/StartupItems.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;querying run keys&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;.&lt;/strong&gt;  As you can see, this hunt targets a number of the registry run keys that our previous PowerShell query also hunted for. Velociraptor targets an additional few run keys, as well as some other startup locations (but I leave that to you to investigate this all further).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-30-1024x519.png&#34; alt=&#34;2021 08 02 10 30&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we fire off this startup detection hunt, we will be given a beautifully formatted table of results. In real production environments, you will find more noise than this so be warned! But look at what we detected - a single machine in our domain currently running &lt;strong&gt;C:\evil.exe&lt;/strong&gt;, shocking stuff. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-02_10-18-1024x665.png&#34; alt=&#34;2021 08 02 10 18&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Fortunately now we know and can eradicate it from the host - I’ll show you how.&lt;/strong&gt; &lt;/p&gt;
&lt;h2&gt;Eradicating Run Key Evil&lt;span class=&#34;absolute -mt-20&#34; id=&#34;eradicating-run-key-evil&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#eradicating-run-key-evil&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;It’s time. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/showtime.png&#34; alt=&#34;showtime&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Be surgical here.&lt;/strong&gt; If you aren’t precise in your commands, you will &lt;strong&gt;accidentally remove&lt;/strong&gt; run key entries that are &lt;strong&gt;legitimate&lt;/strong&gt;.  It&amp;rsquo;s important you remove with &lt;strong&gt;-verbose&lt;/strong&gt; too and double-check it has gone, to make sure you have removed what you think you have. &lt;/p&gt;
&lt;p&gt;Off the back of our PowerShell for loop, copy and paste the &lt;strong&gt;full path&lt;/strong&gt; location that the evil was detected. And double check this is where the malicious run key resides.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-07-1024x276.png&#34; alt=&#34;2021 07 28 19 07&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then pick the EXACT name of the run key entry you want to remove. Copy paste it, include any special characters too please. &lt;strong&gt;Don’t copy&lt;/strong&gt; the executable details that come &lt;strong&gt;after the colon&lt;/strong&gt; ( : )&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Remove-ItemProperty&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Path&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-Name&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;*Run Safe Mode too&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-verbose&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-11-1024x202.png&#34; alt=&#34;2021 07 28 19 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We get our verbose message returned to us confirming that we are indeed removing the run key we think we are.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_19-12-1024x127.png&#34; alt=&#34;2021 07 28 19 12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then check again to be sure it&amp;rsquo;s gone. If you still have the malicious run key here, double check you have copied and pasted appropriately, as fat-fingering paths and registry names are very real problems.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;Get-ItemProperty&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;HKLM:\Software\Microsoft\Windows\CurrentVersion\RunOnce&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;select &lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-property&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-exclude&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;PS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;*|&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fl&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/empty-1024x124.png&#34; alt=&#34;empty&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;Unpicking Run Keys&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Run keys are obscure mechanisms of persistence for sure. But I hope this article has instilled confidence in how straightforward it is to monitor, detect, control, and remove any malicious activity involving your run keys.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;As a defender, sometimes our roles are framed as being consistently at a disadvantage compared to the adversary. They can leverage zero-days, they can trick users, they can run across time zones with bigger budgets. &lt;strong&gt;Whilst we must consistently be at the top of our game, they only need to be lucky once.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All of this is true, but I find that sometimes we could invert this framing to focus on the advantages we possess compared to the attacker.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is &lt;strong&gt;OUR&lt;/strong&gt; environment. This is &lt;strong&gt;OUR&lt;/strong&gt; registry. And these are &lt;strong&gt;OUR&lt;/strong&gt; run keys. We know how it all works, and we should be here waiting for the adversary to so much as sneeze in our domain without us knowing about it. Sure, have a foothold. But we aren’t naive, we expect compromise. And we will catch you, kick you out, and ensure your future attempts at re-entry are that bit harder. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/sparta-1024x577.jpg&#34; alt=&#34;sparta&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Understand what is normal for your environment so you know when a registry run key manipulation is out of place, and foster a hostile network so an adversary can’t move an inch without you knowing about it and containing them.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;There’s a lot to do and never enough time or resource to do it, but that’s why we’re in infosec right? &lt;/p&gt;
&lt;h2&gt;Some Bedside Reading&lt;span class=&#34;absolute -mt-20&#34; id=&#34;some-bedside-reading&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#some-bedside-reading&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are so many other janky registry entries that can do weird things with run keys. We didn’t mention, for example, how entire folders can become mechanisms of persistence via registry run keys! You can read more &lt;a href=&#34;https://www.picussecurity.com/resource/blog/picus-10-critical-mitre-attck-techniques-t1060-registry-run-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://dmcxblue.gitbook.io/red-team-notes/persistence/registry-keys-startup-folder&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;, and &lt;a href=&#34;https://attack.mitre.org/techniques/T1547/001/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;here&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you enjoyed this article or especially if you DIDN’T enjoy this article, give these other ones a go: looking at &lt;a href=&#34;https://labs.jumpsec.com/car-hacking-manual-bypass-of-modern-rolling-code-implementations/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;hacking cars&lt;/strong&gt;&lt;/a&gt; and breaking their keyfob encryption; evaluating the potential &lt;a href=&#34;https://labs.jumpsec.com/can-depix-deobfuscate-your-data/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;de-obfuscate redacted text&lt;/strong&gt;&lt;/a&gt; in sensitive documents; and advanced techniques to defend your &lt;a href=&#34;https://labs.jumpsec.com/obfuscating-c2-during-a-red-team-engagement/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;C2&amp;rsquo;s&lt;/strong&gt;&lt;/a&gt; honour.&lt;/p&gt;
&lt;p&gt;Any questions, comments, or criticisms please drop me a line&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://twitter.com/Purp1eW0lf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;/a&gt; &lt;a href=&#34;https://github.com/Purp1eW0lf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Dray Agha,&lt;/strong&gt; Security Researcher&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-08-10_21-10.png&#34; alt=&#34;2021 08 10 21 10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Can Depix deobfuscate your data?</title>
      <link>//localhost:1313/articles/2021/08/2021-08-03-can-depix-deobfuscate-your-data/</link>
      <pubDate>Tue, 03 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/08/2021-08-03-can-depix-deobfuscate-your-data/</guid>
      <description>
        
        
        &lt;h2&gt;&lt;strong&gt;&lt;em&gt;The censored text cracking tool&lt;/em&gt;&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;the-censored-text-cracking-tool&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#the-censored-text-cracking-tool&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;By Caleb Herbert&lt;/p&gt;
&lt;p&gt;In this post, Caleb explores &lt;strong&gt;Depix&lt;/strong&gt; and its potential to recover sensitive text from reports that were redacted by the original authors. You can use our guidance to enter the challenge and test your GPU’s mettle against the gauntlet we’ve thrown down!&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;1. What is Depix and how is it used?&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;When sensitive information is about to be displayed to a reader, an author may &lt;strong&gt;blur the sensitive text&lt;/strong&gt; so it can no longer be recognised. &lt;strong&gt;Blurring&lt;/strong&gt; is intended to be used to redact text &lt;strong&gt;FOREVER&lt;/strong&gt;… but I think that isn’t true anymore. We have some tooling that can unblur that text, and uncover quite interesting things that the original authors would have rather we didn&amp;rsquo;t know.&lt;/p&gt;
&lt;p&gt;This &lt;a href=&#34;https://twitter.com/nieldk/status/1416659174759469057?s=20&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;fascinating Twitter exchange&lt;/a&gt; offers the perfect example of how the &lt;strong&gt;Depix&lt;/strong&gt; tool could be deployed to steal redacted, sensitive credit card information?!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;images/2021-07-30_10-13.png&#34; alt=&#34;2021 07 30 10 13&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;images/2021-07-30_15-55-1.png&#34; alt=&#34;2021 07 30 15 55 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;&lt;strong&gt;2.What is Depix and what can it do?&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/beurtschipper/Depix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Depix is a Python program&lt;/a&gt; designed to recover censored text to a readable format via a simple command. &lt;em&gt;Sounds too good to be true right?&lt;/em&gt; In this post, we’ll be evaluating how effective Depix is at defeating obfuscation.&lt;/p&gt;
&lt;p&gt;The Depix tool assumes that all text positioning of all characters is done at pixel level. Pixelation is an author’s attempt to redact and obfuscate specific chunks of text they consider to be sensitive. For example, a test report may pixelate and blur a user’s password that the tester had been able to recover. As a high-level overview, leveraging pixelation-as-redaction lowers the resolution and quality of an image to undermine its readability.&lt;/p&gt;
&lt;p&gt;A big caveat to Depix’s use-case is that it &lt;strong&gt;relies on the redaction tool operating in a specific way&lt;/strong&gt;: the text must have been pixelated with a linear box filter, since it processes every block separately. What this means is that the tool takes a quadrant of the pixels and overwrites them based on specific averages of those collected pixels. If you have obfuscated your sensitive text by using a &lt;strong&gt;nice thick, opaque box&lt;/strong&gt; then you don’t have anything to worry about….but if you used pixelation as obfuscation, then &lt;strong&gt;you may have 99 problems and de-obfuscation is one&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-28_10-24-edited.png&#34; alt=&#34;2021 07 28 10 24&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;2.1 Reversing pixelation&lt;span class=&#34;absolute -mt-20&#34; id=&#34;21-reversing-pixelation&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#21-reversing-pixelation&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Given that the &lt;em&gt;algorithm&lt;/em&gt; that Depix un-pixelates the text follows a specific ‘recipe’, it may not always be effective.&lt;/p&gt;
&lt;p&gt;Depix deploys almost a &lt;strong&gt;brute force&lt;/strong&gt; method to recover the original text. It takes all printable characters and then begins to pixelate these characters in different combinations. This brute force is compared with the original, blurred text and continues until the same pixelated, numeric value can be replicated.&lt;/p&gt;
&lt;h2&gt;2.2 Why is there a concern? &lt;span class=&#34;absolute -mt-20&#34; id=&#34;22-why-is-there-a-concern&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#22-why-is-there-a-concern&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Depix &lt;strong&gt;&lt;em&gt;could&lt;/em&gt;&lt;/strong&gt; have a serious impact on the existing archive of documents and videos that exist across the internet.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_17-40.png&#34; alt=&#34;2021 07 27 17 40&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The possibility of this tool means any files which have been redacted and publicly disclosed, or YouTube videos which have passwords/texts or IPs redacted can be recovered and stolen. If malicious actors, organisation competitors, or even script kiddies got their hands on this, the censored private information would be at serious risk. &lt;/p&gt;
&lt;p&gt;They would only need to screenshot/download the files or images and run Depix against it. Granted, they’d have to have used a specific set of tools to censor the text but if so, the risk remains. &lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;3. Depix in action&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;We’ve teased you enough, let’s see this tool in action!&lt;/p&gt;
&lt;p&gt;We’re going to do this twice. The &lt;strong&gt;first time&lt;/strong&gt; we’ll be using the author’s practice example, to ensure the tooling works as expected. The &lt;strong&gt;second time&lt;/strong&gt; we’ll conjure up our own redacted, pixelated image and see how well the tooling still recovers the original text. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.1 Setup Depix&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;31-setup-depix&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#31-setup-depix&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Go to the &lt;a href=&#34;https://github.com/beurtschipper/Depix&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Github repo for Depix&lt;/a&gt;, and download the .ZIP that contains all of the tooling. Extract the .ZIP in a directory you are happy with.&lt;/p&gt;
&lt;p&gt;You’ll want to traverse to two directories down (/Depix-main/Depix-main) and then install the requirements that Depix requires to work&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase646f4446a5516dec7d.png&#34; alt=&#34;pngbase646f4446a5516dec7d&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;3.2 Test images&lt;span class=&#34;absolute -mt-20&#34; id=&#34;32-test-images&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#32-test-images&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;There are two important directories we’ll need for this experiment: /&lt;strong&gt;testimages/&lt;/strong&gt; and /&lt;strong&gt;searchimages&lt;/strong&gt;/ &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The test image directory includes censored text which you can practice recovering. &lt;/li&gt;
&lt;li&gt;The search image directory includes images which are used like a dictionary to recover pixelated text. The image includes all upper- and lower-case alphanumeric letters with and without spaces for testing purposes. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed.png&#34; alt=&#34;unnamed&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Close up, the above image looks like this - a collection of printable characters. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-30_16-00.png&#34; alt=&#34;2021 07 30 16 00&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;3.2.1 De Bruijn sequence &lt;span class=&#34;absolute -mt-20&#34; id=&#34;321-de-bruijn-sequence&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#321-de-bruijn-sequence&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Interestingly, the above image can actually be re-created fresh on your own local machine. You don’t have to do this, as a sequence is already provided for you. However, it is interesting to see how it is produced.&lt;/p&gt;
&lt;p&gt;In the ether of the internet, there is this orphaned &lt;a href=&#34;https://gist.github.com/rgov/891712#file-debruijn-py-L16&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;script&lt;/a&gt; that will produce the sequence of printable characters necessary to also use &lt;strong&gt;Depix.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-1.png&#34; alt=&#34;unnamed 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_14-56.png&#34; alt=&#34;2021 07 27 14 56&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;3.3 Test recovery&lt;span class=&#34;absolute -mt-20&#34; id=&#34;33-test-recovery&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#33-test-recovery&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To recover redacted text there are specific methods, depending on the tools that obfuscated the original text. This is a &lt;strong&gt;significant limitation&lt;/strong&gt; that the original author recognises, however we’ll put that aside for now and come back to it later. &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;Notepad&lt;/strong&gt; is used and pixelated with &lt;strong&gt;Greenshot&lt;/strong&gt; we need the following command: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimage3_pixels&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruinseq_notepad_Windows10_closeAndSpaced&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The command specifies the Path to the Pixelated Image (-p), Path to the Search Image (-s) and Path to Output (-o). &lt;/p&gt;
&lt;p&gt;If &lt;strong&gt;sublime&lt;/strong&gt; text editor is used and pixelated with &lt;strong&gt;Gimp&lt;/strong&gt;, this command is used: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python3&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;testimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sublime_screenshot_pixels_gimp&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruin_sublime_Linux_small&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;backgroundcolor&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;41&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;--&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;averagetype&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;linear&lt;/span&gt; &lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;em&gt;backgroundcolour&lt;/em&gt; option filters out the coloured background of the editor and specifies the linear &lt;em&gt;averagetype&lt;/em&gt; as that’s the default averaging within Gimp. &lt;/p&gt;
&lt;h3&gt;3.3.1 Example&lt;span class=&#34;absolute -mt-20&#34; id=&#34;331-example&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#331-example&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This &lt;strong&gt;example&lt;/strong&gt; leverages the first instance of Notepad &amp;amp; Greenshot. &lt;/p&gt;
&lt;p&gt;In the image below, we see that depix begins brute forcing the images for a match.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Remember, it isn’t actually attacking the &lt;strong&gt;pixelated image&lt;/strong&gt;. Rather, it leverages the De Bruijn image (with all the printable characters) to generate combinations of letters that can be pixelated to match the &lt;strong&gt;obfuscated image.&lt;/strong&gt; &lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase646a8a043faedc72c4.png&#34; alt=&#34;pngbase646a8a043faedc72c4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Depending on the size of the redacted image this can take a while. We used the author’s original, example image. As this was the ‘ideal’ condition to operate under, the brute force took around 60-90 seconds to complete! &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pngbase64195247c857a273c2.png&#34; alt=&#34;pngbase64195247c857a273c2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.4 Results&lt;/strong&gt; &lt;span class=&#34;absolute -mt-20&#34; id=&#34;34-results&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#34-results&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;This was the censored file we tested against - not a very pretty sight, but very redacted nonetheless. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-2.png&#34; alt=&#34;unnamed 2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This obfuscated image was fed into &lt;strong&gt;Depix.&lt;/strong&gt; These are the results from the brute force.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-1-1.png&#34; alt=&#34;unnamed 1 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Although the results aren’t perfect. We are still able to interpret the results. For reference, the original message said, “&lt;em&gt;Hello from the other side.”&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Not bad. &lt;em&gt;It’s pretty good&lt;/em&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-2-1.png&#34; alt=&#34;unnamed 2 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;We&amp;rsquo;re 10 layers deep in meme culture with this one&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1&gt;&lt;strong&gt;4. Re-creating the test&lt;/strong&gt; &lt;/h1&gt;&lt;p&gt;In our example we were operating under &lt;strong&gt;ideal conditions.&lt;/strong&gt; As we know, in the real world, nefarious activities hardly ever take place under ideal conditions!&lt;/p&gt;
&lt;p&gt;Let’s &lt;strong&gt;recreate the experiment&lt;/strong&gt;. This time, it will be original content, not the author’s supplied example: &lt;strong&gt;we’ll create our own text, obfuscate it, and try to brute force it.&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;4.1 Setup part two&lt;span class=&#34;absolute -mt-20&#34; id=&#34;41-setup-part-two&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#41-setup-part-two&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;We opened &lt;strong&gt;Notepad&lt;/strong&gt; on our Windows machine. We added the shameless plug text we wanted to redact:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/pasted-image-0.png&#34; alt=&#34;pasted image 0&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In order to &lt;strong&gt;pixelate&lt;/strong&gt; this text, I used Depix’s example obfuscator: &lt;strong&gt;genpixed.py&lt;/strong&gt; I was able to redact the text inside the image. Greenshot would be useful if only key words were redacted but to show it’s capability I redacted the whole thing: &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;genpixed&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNG&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PNG&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;with -i being the input image and -o being the output image.&lt;/p&gt;
&lt;h2&gt;4.2  A disappointing recovery&lt;span class=&#34;absolute -mt-20&#34; id=&#34;42-a-disappointing-recovery&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#42-a-disappointing-recovery&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To then &lt;strong&gt;recover&lt;/strong&gt; this &lt;strong&gt;obfuscated&lt;/strong&gt; text, we ran this big old one-liner:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;python&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;depix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;py&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Capture1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;searchimages&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;debruinseq_notepad_Windows10_closeAndSpace&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;images&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output1&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;png&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;After around &lt;strong&gt;45/50 minutes&lt;/strong&gt;, Depix finally had a returned output… unfortunately it &lt;strong&gt;failed to&lt;/strong&gt; &lt;strong&gt;recover the pixelated text.&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/unnamed-3.png&#34; alt=&#34;unnamed 3&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We wondered if this was due to the length of the text we offered Depix. So we re-created this experiment with &amp;ldquo;Hello World&amp;rdquo;. The results still did not yield success.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img src=&#34;images/hi-1.png&#34; alt=&#34;hi 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;li&gt;&lt;img src=&#34;images/bi.png&#34; alt=&#34;bi&#34; loading=&#34;lazy&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This could be due to a number of reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Minor issues in the pixel layout&lt;/li&gt;
&lt;li&gt;The character font is different&lt;/li&gt;
&lt;li&gt;A faulty De Bruijn image is leveraged for the dictionary attack&lt;/li&gt;
&lt;li&gt;Or good old human error&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Regardless, one or more of these issues frustrated Depix and it failed to depixelate our original content. &lt;strong&gt;Whereas I’m sure it has a strong potential in the future, It currently has a  limited scope of what it can return.&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;5. Reviewing Depix&lt;/h1&gt;&lt;p&gt;Depix’s python program was straightforward to use. Under the ideal demo example conditions, the results were impressive considering how pixelated the sample was beforehand. But it wasn’t perfect and failed to work for our real-life original content, though we gave some reasons why that could be the case.&lt;/p&gt;
&lt;p&gt;In addition, Depix isn’t the answer to deobfuscating all pixelated text. There are only a couple of situations where it works. If the pixelation scale or cell size was different, the results would return nothing. If the pixelation was done with a tool other than the supported ones, it simply does not work. Moreover, you’d have to arbitrarily know or guess the specific tools used and hope that the Depix tool would work at de-obfuscating them. In the author’s Github, they recognise this current limitation. &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The Depix tool poses minimal risk to security at present, as it requires specific criteria to be met to be effective.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;For now, however, there is a small chance that users can depixelate images, so it’s recommended to use a &lt;strong&gt;full box at full opacity&lt;/strong&gt; to redact files. &lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-27_16-25.png&#34; alt=&#34;2021 07 27 16 25&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;You can pick a less offensive colour of course&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1&gt;&lt;strong&gt;5. Challenge&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;If you fancy having a go at this yourself, and your GPU is beefy enough for the Herculean challenge, we’d love for you to have a go at de-obfuscating this image. If you crack the code, @ us on Twitter and we’ll &lt;strong&gt;organise for something interesting to be delivered to you&lt;/strong&gt;. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/memes.png&#34; alt=&#34;memes&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you do use Depix (even outside of our challenge), we would be interested to hear about your experience. &lt;strong&gt;Let us know on twitter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/jumpseclabs?lang=en&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;@JumpsecLabs&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Caleb Herbert&lt;/strong&gt; is a Red Team Researcher @ JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Car Hacking - Manual Bypass of Modern Rolling Code Implementations</title>
      <link>//localhost:1313/articles/2021/07/2021-07-22-car-hacking-manual-bypass-of-modern-rolling-code-implementations/</link>
      <pubDate>Thu, 22 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/07/2021-07-22-car-hacking-manual-bypass-of-modern-rolling-code-implementations/</guid>
      <description>
        
        
        &lt;h1&gt;Introduction&lt;/h1&gt;&lt;p&gt;I recently researched modern algorithms used by keyfobs to open cars. Since most of the blogs online talking about the topic are unfortunately quite old and in general and do not precisely describe the exact path followed in detail, nor the code used. I thought that talking about my experience could be interesting and inspiring for other researchers.&lt;/p&gt;
&lt;p&gt;I won’t go in depth on certain topics and I will assume that the reader has a general background in basic signals theory and is comfortable with terms like radio frequencies, gain, filters…&lt;/p&gt;
&lt;p&gt;All the scripts used to reproduce the attack are downloadable at the following link:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/0x5c4r3/Rolling_Code_Bypass&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Github.com: Rolling_Code_Bypass&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: This thread is the first part of a research that focuses on finding a way to automatically bypass car mechanisms implementing different algorithms. Following posts will be shared during the next few months.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;: All the information provided on this post is for educational purposes only. JUMPSEC is no way responsible for any misuse of the information.&lt;/p&gt;
&lt;h1&gt;Background&lt;/h1&gt;&lt;h2&gt;Algorithms&lt;span class=&#34;absolute -mt-20&#34; id=&#34;algorithms&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#algorithms&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Two are the main algorithms used to send opening signals to cars:&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;Single code&lt;/strong&gt;: The keyfob always sends the same code to the car that accepts it and opens. This is an old implementation used by cars manufactured until ~2002. This legacy implementation lacks basic security since whoever intercepts the signal is able to use it to open the car (known as a replay attack). Surprisingly, in my experience, I still found modern cars implementing such algorithms. &lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;Rolling code&lt;/strong&gt;: The keyfob uses an array of codes, each of which is only usable once. This much safer implementation that protects against replay attacks and is mostly used in modern cars, the most recent version will be our main focus for this research. [2]&lt;/p&gt;
&lt;h1&gt;My Path&lt;/h1&gt;&lt;h2&gt;Tools Used&lt;span class=&#34;absolute -mt-20&#34; id=&#34;tools-used&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#tools-used&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In order to detect Radio frequencies from a computer, there’s the need to use radio peripherals capable of converting radio signals from analog to digital . In my experience, I tried to use all of the most well known ones, to then choose which is the best for transmitting, receiving and jamming (see section 3.3).&lt;/p&gt;
&lt;p&gt;My choices have been the following:&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;HackRF&lt;/strong&gt;: Best device for RFHacking so far. Wide range of frequencies handled, versatile, easy to use, quite a lot of documentation online. It’s been the most used hardware device for the entire research. [3]&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;Yard Stick One&lt;/strong&gt;: Not much documentation online, I personally did not like the way it’s implemented with the RFcat firmware loaded. I ended up using it only for jamming. [4]&lt;/p&gt;
&lt;p&gt;- &lt;strong&gt;RTL SDR&lt;/strong&gt;: Only able to receive signals. I’m not happy about this piece, it gets overheated very often until there’s the need to unplug it and wait for it to cool down. I used it initially to track signals, but once I started testing with the HackRF, there has not been the need to use it anymore.&lt;/p&gt;
&lt;h2&gt;First Test: Replay Attack&lt;span class=&#34;absolute -mt-20&#34; id=&#34;first-test-replay-attack&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#first-test-replay-attack&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To start playing around with radio frequencies, I bought a cheap radio doorbell - made of a transmitter (an actual button to stick out of the doorstep) and a couple of receivers that ring when the doorbell is clicked, then I started playing around with that. Since doorbells are quite cheap and do not need an enhanced security, they implement a basic single code algorithm, useful for testing.&lt;/p&gt;
&lt;p&gt;With that in mind, the first step was to see the signal sent from the remote doorbell using HackRF and &lt;em&gt;gqrx&lt;/em&gt;, a tool that visualises radio frequencies. Once the frequency and other settings have been set up, I observed the output shown in Figure 1.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/1.gif&#34; alt=&#34;1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 1 - gqrx tracking the signal of the doorbell when the button is clicked.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Note that usually the real frequency can be slightly moved from the one detected, depending also on the temperature of the room. From the specs, we know that the doorbell works at 433.92 MHz.&lt;/p&gt;
&lt;p&gt;Once visualized, I tried to dump the data the doorbell is sending.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2-1024x337.png&#34; alt=&#34;2&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 2 - Universal Radio Hacker (urh) [6] showing the recorded signal as a waveform.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt; If carefully analyzed, we can see that the waveform is actually containing 4 equal repeated signals. Below the waveform, the software is able to convert the signal to bytes. This happens through the specified modulation (in the picture on the left, Amplitude-shift keying, aka ASK). The problem with approaching modulations is that since it can totally change the output code, we should know which type the signal is using and that is often not specified.&lt;/p&gt;
&lt;p&gt;To bypass that problem, I chose to work at Signal level, modifying the actual signal and not dealing with the output code.&lt;/p&gt;
&lt;p&gt;Once I recorded the signal, I cropped it to a single repetition and transmitted it through the HackRF, making the doorbell receiver ring and proving that the path followed was right.&lt;/p&gt;
&lt;h1&gt;Rolling Code Bypass Theory&lt;/h1&gt;&lt;p&gt;Since hacking into a doorbell was not as satisfying as I expected, I tried to raise the level of the research to Rolling codes, trying first to understand the exact process needed.&lt;/p&gt;
&lt;p&gt;The methodology I am going to describe requires both some exploitation techniques and a little bit of social engineering.&lt;/p&gt;
&lt;p&gt;The  basic “Rolljam Attack” - that’s how various blogs online call it - is based on forcing the victim to send 2 (instead of 1) opening signals, intercepting them in a way that the owner of the car will not notice that one of the two codes has been stolen and is ready to be used. Also, the attacker needs to be close enough to the car so that the signal can be both sent and received.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/3-1-edited.png&#34; alt=&#34;3 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 3 - Basic functionality of a general Keyfob.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The key of such attack is &lt;strong&gt;Jamming&lt;/strong&gt;, sending a strong signal that blocks the car receiver from detecting the message sent from the keyfob.&lt;/p&gt;
&lt;p&gt;Since the frequency of a signal depends on different factors, some of which are casual - like the temperature - the receiver has a range of accepted frequencies, also called bandwidth.&lt;/p&gt;
&lt;p&gt;The Jamming signal must be sent within the car’s receiving window (or bandwidth), at a slightly moved frequency from the one used from the keyfob.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/4.png&#34; alt=&#34;4&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 4 - A representation of a Rolling Code Bypass attack, showing the jamming frequency within the car receiving window.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The tricky part of the attack is that, while jamming, the attacker has to be able to detect and filter the signal sent by the owner of the car trying to open his vehicle. If the attacker is able to do so, the rest of the path is just a matter of implementation.&lt;/p&gt;
&lt;p&gt;Looking at Figure 4, we can clearly see all the signals we are dealing with: the &lt;strong&gt;Jamming&lt;/strong&gt; signal (Green), slightly moved from the actual frequency used from the &lt;strong&gt;keyfob&lt;/strong&gt; (Pink), both within the car receiving window (Red).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/5.png&#34; alt=&#34;5&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 5 - A device jamming and storing the first code simultaneously.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once the first code has been stored from the device used by the attacker (that usually is a computer with some radio dongles) and not received by the car because of the jamming, the owner of the car will think that the car did not received the signal because of other reasons and will try to open it again. While clicking the button the second time, the device will store the second signal, stop jamming and send the first signal in a matter of milliseconds.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/6.png&#34; alt=&#34;6&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 6 - A device jamming and storing the second code simultaneously.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/7-edited.png&#34; alt=&#34;7&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 7 - A device sending the 1st code received, opening the car.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The car will receive the 1st signal from the device and open and the owner will think that now everything worked properly, but the reality is that the attacker will still own the 2nd code able to open the car.&lt;/p&gt;
&lt;h1&gt;Implementation&lt;/h1&gt;&lt;p&gt;In this example, I will explain how I hacked into a Peugeot 208 from 2020 that implements rolling code. Since the key to the rolling code attack and the most difficult part of its bypass is the ability to jam and record at the same time, I will focus on the explanation of such functionality, skipping the rest of the process since it is only a matter of implementation and it is easily replicable.&lt;/p&gt;
&lt;p&gt;Note that the car and keyfob communicate at a frequency of 433.92 MHz.&lt;/p&gt;
&lt;p&gt;After several tests and implementations that ended up being not functional, I reached a proper one using the Yard Stick One to jam and the HackRF to deal with the unlocking signals sent from the keyfobs.&lt;/p&gt;
&lt;p&gt;Here’s the really simple Python3 script I wrote to jam the signal:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;rflib&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RfCat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setFreq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;433800000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setMdmModulation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MOD_ASK_OOK&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setMdmDRate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4800&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Starting&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;	&lt;span class=&#34;n&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RFxmit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sa&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\x17\x17\x17\x17\x17\x17\x17\x00\x00\x00\x00\x00\x00&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;As you can see from the script, the jamming frequency is set at 433.80 MHz, exactly 120 kHz below the frequency used by the keyfob but still in the range accepted by the car.&lt;/p&gt;
&lt;p&gt;Once the script is run, the car won’t be able to receive other signals and will keep being closed even if the owner clicks the opening button.&lt;/p&gt;
&lt;p&gt;Meanwhile we are jamming, we need to use a tool able to both record and send signals from my laptop. I personally found &lt;em&gt;GNU Radio&lt;/em&gt; the best tool to do so, and I wrote two scripts, one to record and the other one to replay the signal recorded.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/8-1024x555.png&#34; alt=&#34;8&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 8 - 1st script used to save the signal received in a file.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The first script is made of a &lt;em&gt;osmocom&lt;/em&gt; [5] Source block that is set to work with the HackRF, recording a signal at a central frequency of 433.92MHz with a bandwidth of 100 kHz. The bandwidth setting will allow the HackRF to cut out the jamming signal, cleaning it and recording only the part we need (the actual keyfob opening signal). It will then send it to a live GUI that will show us the peaks in the frequency spectrum and save it to a file called &lt;em&gt;Peugeot_208&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;All of these must happen while the Python3 jamming script represented in the portion of code above keeps running.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/9-1024x409.png&#34; alt=&#34;9&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Figure 9 - 2nd script used to replay the signal previously saved.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Once the python script has been interrupted, the second script will grab the &lt;em&gt;Peugeot 208&lt;/em&gt; file with the filtered signal in it, multiply it and send it to both a GUI and to the HackRF, which will transmit it to the car.&lt;/p&gt;
&lt;p&gt;And here’s the magic:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/10.gif&#34; alt=&#34;10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The car will receive the signal and open.&lt;/p&gt;
&lt;h2&gt;References&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;[1] &lt;a href=&#34;https://en.wikipedia.org/wiki/Remote_keyless_system&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Remote_keyless_system&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a href=&#34;https://en.wikipedia.org/wiki/Rolling_code&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://en.wikipedia.org/wiki/Rolling_code&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a href=&#34;https://greatscottgadgets.com/hackrf/one/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://greatscottgadgets.com/hackrf/one/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[4] &lt;a href=&#34;https://greatscottgadgets.com/yardstickone/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://greatscottgadgets.com/yardstickone/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[5] &lt;a href=&#34;https://osmocom.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://osmocom.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[6] &lt;a href=&#34;https://github.com/jopohl/urh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/jopohl/urh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[7] &lt;a href=&#34;https://gqrx.dk/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://gqrx.dk/&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Obfuscating C2 During a Red Team Engagement</title>
      <link>//localhost:1313/articles/2021/07/2021-07-16-obfuscating-c2-during-a-red-team-engagement/</link>
      <pubDate>Fri, 16 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/07/2021-07-16-obfuscating-c2-during-a-red-team-engagement/</guid>
      <description>
        
        
        &lt;h4&gt;&lt;strong&gt;By shd&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;by-shd&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#by-shd&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h4&gt;&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/5gxpvd-684x1024.jpeg&#34; alt=&#34;5gxpvd&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Red Team and Magicians&amp;hellip;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h1&gt;&lt;strong&gt;1.What is Command and Control&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;Command-and-Control (C2) infrastructure is one the most important tools in a red teamer’s arsenal. In this article, we introduce a few simple methods that red teams use to harden their C2 infrastructure. &lt;/p&gt;
&lt;p&gt;C2 comes in various forms - but regardless they all share a basic function: &lt;strong&gt;they allow the red teamer (or threat actor) to communicate with a compromised machine.&lt;/strong&gt; During an offensive campaign, testers may accumulate a number of compromised machines but it can be difficult and overwhelming to &lt;strong&gt;maintain, orchestrate, and control&lt;/strong&gt; them in large numbers. On top of this to guarantee the campaign’s longevity, malicious communications back and forth to the compromised machine must be &lt;strong&gt;secure, obfuscated, and reliable,&lt;/strong&gt; adding a further layer of complexity.&lt;/p&gt;
&lt;h2&gt;1.1 C2 in the Wild&lt;span class=&#34;absolute -mt-20&#34; id=&#34;11-c2-in-the-wild&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#11-c2-in-the-wild&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Not all C2s are born equal.&lt;/strong&gt; Leveraging the right apparatus, with particular design, is paramount to the success of the engagement. Covert offensive engagement can &lt;strong&gt;last weeks if not months when simulating a realistic, stealthy attacker&lt;/strong&gt;. This places significant demands and &lt;strong&gt;pressures on the C2 infrastructure.&lt;/strong&gt; Ethical red teamers and real-world adversaries begrudgingly share many tools and tricks. Both are purveyors of the finest C2 frameworks to manage their malicious campaign from.&lt;/p&gt;
&lt;p&gt;In the field, there are some choice C2 frameworks for red teamers. &lt;a href=&#34;https://docs.rapid7.com/metasploit/manage-meterpreter-and-shell-sessions/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Metasploit&lt;/strong&gt;&lt;/a&gt; is incredibly popular for it’s &lt;strong&gt;intuitive&lt;/strong&gt; use and stripped-back command line approach (script-kiddie-friendly indeed!). However, &lt;strong&gt;Metasploit&lt;/strong&gt; loses major points for its &lt;strong&gt;fragility&lt;/strong&gt; and lack of &lt;strong&gt;maintainability&lt;/strong&gt; - the red team can’t trust &lt;strong&gt;unreliable&lt;/strong&gt; tools! There are other C2 frameworks like &lt;a href=&#34;https://www.powershellempire.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;PowerShell Empire&lt;/strong&gt;&lt;/a&gt; or it’s (GUI-version) &lt;a href=&#34;https://stealthbits.com/blog/next-gen-open-source-c2-frameworks/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;successor Covenant&lt;/strong&gt;&lt;/a&gt; that offer a red team the &lt;strong&gt;malleability&lt;/strong&gt; they desire from a C2 infrastructure. However, there is a particular C2 that meets most if not all the red team’s requirements, and are the &lt;a href=&#34;https://intel471.com/blog/cobalt-strike-cybercriminals-trickbot-qbot-hancitor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;evidenced-favourite&lt;/strong&gt;&lt;/a&gt; of the adversary: &lt;strong&gt;Cobalt Strike.&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;At JUMPSEC&lt;/strong&gt;  we’ve come up against adversaries who have leveraged Cobalt Strike in incredibly sneaky ways. We’ve identified some interesting detections to hunt this C2 down, however it really is a &lt;strong&gt;cat and mouse game&lt;/strong&gt;. As defenders tune and improve their monitoring controls, adversaries will shift their behaviour over time to evade detection - meaning that that defenders must identify new behaviours and techniques to monitor for. &lt;/p&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Regardless of the obfuscation, C2’s must be commanded and reported back. This &lt;strong&gt;beaconing&lt;/strong&gt; is an ebb and flow that must occur and therefore is something a defender can zero in on to detect across their network. This is no easy feat of course. JUMPSEC’s &lt;strong&gt;red team and blue team work togethe&lt;/strong&gt;r to apply the innovate offensive security research from the red team in defensive context to continuously develop detection for the latest techniques.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;As criminal adversaries often choose &lt;strong&gt;Cobalt Strike as their&lt;/strong&gt; &lt;a href=&#34;https://www.recordedfuture.com/2020-adversary-infrastructure-report/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;weapon of choice&lt;/strong&gt;&lt;/a&gt;, blue teams have given it acute attention. Defensive security researchers have &lt;a href=&#34;https://talos-intelligence-site.s3.amazonaws.com/production/document_files/files/000/095/031/original/Talos_Cobalt_Strike.pdf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;devoted entire reports&lt;/strong&gt;&lt;/a&gt; to detecting Cobalt Strike C2 communication! The uncomfortable attention of the blue team has compelled red team operators to ensure that their C2 infrastructure is &lt;strong&gt;customised&lt;/strong&gt; for each assessment, remains &lt;strong&gt;covert&lt;/strong&gt;, and should elude blue team sight for an extended period.&lt;/p&gt;
&lt;p&gt;In this article, we share some &lt;strong&gt;red team tips&lt;/strong&gt; on &lt;strong&gt;hardening&lt;/strong&gt; command-and-control that ensure offensive engagements remain &lt;strong&gt;flexible, reliable, and elusive.&lt;/strong&gt; There are many ways to harden one&amp;rsquo;s C2 infrastructure. Let&amp;rsquo;s zero in on one particular component - &lt;strong&gt;redirectors&lt;/strong&gt; - which we have found are rather important for obfuscation.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;2. Redirectors&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;2-redirectors&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#2-redirectors&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;h3&gt;2.1 What is a Redirector?&lt;span class=&#34;absolute -mt-20&#34; id=&#34;21-what-is-a-redirector&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#21-what-is-a-redirector&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Redirectors are an essential component for advanced red teaming. Redirectors allow malicious traffic to come and go as it pleases, but remain &lt;strong&gt;hidden from detection&lt;/strong&gt;. The objective of a redirector is to &lt;strong&gt;mask the core C2 infrastructure from prying blue team eyes&lt;/strong&gt;, and allow the red team operator &lt;strong&gt;hidden communication with a compromised machine&lt;/strong&gt;. Redirectors seek to mask and protect their backend server, the main orchestration server for all C2.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_10-55-1024x572.png&#34; alt=&#34;2021 07 16 10 55&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;Simplified, but you get the idea&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Redirectors offer many advantages around obfuscation but they also offer a &lt;strong&gt;resilience&lt;/strong&gt; and &lt;strong&gt;persistence&lt;/strong&gt; advantage. If the blue team are able to successfully identify and block an IP address associated with the C2 infrastructure, the red team operator can quickly spin up a redirector and continue to keep the core backend server IP address hidden. &lt;/p&gt;
&lt;h3&gt;2.2 Example of C2 without a Redirector&lt;span class=&#34;absolute -mt-20&#34; id=&#34;22-example-of-c2-without-a-redirector&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#22-example-of-c2-without-a-redirector&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To understand the benefit of a redirector, let’s demonstrate how easy an attentive blue team defender can shut down and ruin a red team engagement that uses a vanilla C2. &lt;/p&gt;
&lt;p&gt;We can use &lt;strong&gt;msfvenom&lt;/strong&gt; to generate a payload that doesn’t do anything special, it simply creates an executable that will call back to our C2 server. There’s no obfuscation, no clever C2-over-DNS techniques, no redirection - &lt;strong&gt;nothing!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-02.png&#34; alt=&#34;2021 07 16 11 02&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If we take this C2 payload and execute it on a machine, we will inevitably be caught by any blue team worth their salt. Using &lt;strong&gt;netstat&lt;/strong&gt; on the target machine, from a defender’s perspective it’s clear to see the machine is currently communicating to a strange and new IP address on port 8080, based on an unusual executable (C2test.exe).&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-02_1.png&#34; alt=&#34;2021 07 16 11 02 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This would invariably stand out to a defender as suspicious - they would not recognise the executable (even if it was called something less obvious) and would not recognise the private IP in the conversation. The blue team would quarantine the machine and sever the malicious connection we worked so hard to establish.&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;3. Redirectors save the Red Team’s day&lt;/strong&gt; &lt;/h1&gt;&lt;p&gt;The above is a textbook example of red team bad practice. A better approach is to use &lt;strong&gt;redirectors&lt;/strong&gt; to prevent the infrastructure from being exposed at the first hurdle.&lt;/p&gt;
&lt;p&gt;There are a plethora of redirection techniques, and we couldn’t possibly spoil all of our own fun by sharing them (the blue team can read too you know?). We’ll focus on the technical approach behind network traffic redirection. &lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.1 Dumb Pipe Redirection&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;31-dumb-pipe-redirection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#31-dumb-pipe-redirection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Dumb pipe redirection does exactly what it says on the tin. It blindly forwards our malicious traffic from node to node, but lacks sophistication for controlling the traffic. It does however allow us to obfuscate the IP of the core server, so that’s all that matters for now.&lt;/p&gt;
&lt;p&gt;To achieve dumb pipe redirection we can rely on &lt;strong&gt;socat,&lt;/strong&gt; with different &lt;strong&gt;firewall&lt;/strong&gt; implementations to improve it.  &lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.1.1 Socat&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;311-socat&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#311-socat&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;The following socat command would be run on our &lt;strong&gt;burnable redirector server&lt;/strong&gt; to enable  dumb pipe redirection towards our C2 server. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo socat TCP4-LISTEN:8080,fork TCP:c2address:PORT&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-09.png&#34; alt=&#34;2021 07 16 11 09&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This allows TCP network traffic on port 8080 of the &lt;strong&gt;redirection&lt;/strong&gt; &lt;strong&gt;machine&lt;/strong&gt; to communicate on port 8080 of the &lt;strong&gt;C2 server.&lt;/strong&gt; So now our C2 server can communicate with our disposable redirection server, we now need to put the compromise machine in communication with the redirection server. This then allows a nice &lt;strong&gt;chain of communication from C2 server, to redirector, to compromised machine,&lt;/strong&gt; which remains hidden from the eyes of defenders. &lt;/p&gt;
&lt;p&gt;We now need to generate a payload that will complete the link in the chain and allow the compromised machine to communicate to our redirect server, the middle-man.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-10.png&#34; alt=&#34;2021 07 16 11 10&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We can take this executable payload and detonate it on the target machine.When executed, it connects to our redirector server, which then forwards TCP port 8080 to our core C2 server blindly. In the screenshot below, we can see that there is a three-machine relay for communication: the top image shows the &lt;strong&gt;172.16.15.135&lt;/strong&gt; target machine in communication with the &lt;strong&gt;redirector&lt;/strong&gt; &lt;strong&gt;server&lt;/strong&gt; on &lt;strong&gt;x.x.13.49:8080,&lt;/strong&gt; the redirector machine is then in communication with the &lt;strong&gt;C2 server&lt;/strong&gt; on &lt;strong&gt;x.x.x.223:8080&lt;/strong&gt;. If the blue team catch us now, &lt;strong&gt;all we will lose is the redirector server&lt;/strong&gt; and not our core infrastructure.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-11-1024x835.png&#34; alt=&#34;2021 07 16 11 11&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.1.2 Socat and Uncomplicated Firewall&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;312-socat-and-uncomplicated-firewall&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#312-socat-and-uncomplicated-firewall&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There is, however, one &lt;strong&gt;disavantadge&lt;/strong&gt; to this method of &lt;strong&gt;socat dumb pipe redirection&lt;/strong&gt;. Anyone with the &lt;strong&gt;redirector&amp;rsquo;s&lt;/strong&gt; &lt;strong&gt;IP&lt;/strong&gt; &lt;strong&gt;address&lt;/strong&gt; can now connect to our listener via the specified port. Let’s illuminate this using the network scanning tool &lt;strong&gt;nmap,&lt;/strong&gt; which shows that we’re running a &lt;strong&gt;proxy&lt;/strong&gt; (the redirector). A defender would definitely notice if there was an unrecognised web proxy in communication with a machine in their internal network. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-12-1024x248.png&#34; alt=&#34;2021 07 16 11 12&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To avoid this situation, let’s maker our dumb pipe redirector a bit smarter. We can configure a &lt;strong&gt;firewall&lt;/strong&gt; that will protect our infrastructure and allow only the redirector to directly connect. In this case, we&amp;rsquo;re going to use &lt;strong&gt;ufw&lt;/strong&gt;, which stands for &lt;strong&gt;Uncomplicated Firewall&lt;/strong&gt; and is available for a variety of UNIX distributions. &lt;/p&gt;
&lt;p&gt;Let’s configure UFW on our &lt;strong&gt;core C2 server&lt;/strong&gt; and &lt;strong&gt;redirector server&lt;/strong&gt; to allow for traffic monitoring:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Let’s configure Port &lt;strong&gt;22&lt;/strong&gt;, which is usually reserved for SSH services. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Let’s configure Traffic from our &lt;strong&gt;redirector&lt;/strong&gt; IP &lt;strong&gt;outbound&lt;/strong&gt; and &lt;strong&gt;inbound&lt;/strong&gt; from TCP port &lt;strong&gt;8080&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And then let’s finish up by &lt;strong&gt;disallowing outbound traffic&lt;/strong&gt; anywhere else&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-14.png&#34; alt=&#34;2021 07 16 11 14&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;What we have here is a firewall configuration that allows C2 communication from our malicious core server to our malicious core redirector.  We then need to duplicate our efforts on the &lt;strong&gt;redirector server’s firewall.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-27.png&#34; alt=&#34;2021 07 16 11 27&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;When we’re all done, our tracks should be covered. We can confirm this using &lt;strong&gt;nmap&lt;/strong&gt;. When we scan our Core C2 IP address, it now displays as filtered, indicating that traffic is secured and is only accessible via the redirector server. &lt;strong&gt;Awesome for us&lt;/strong&gt;, not so much for the blue team!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-29.png&#34; alt=&#34;2021 07 16 11 29&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.1.3 IPTables Redirection&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;313-iptables-redirection&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#313-iptables-redirection&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;IPtables&lt;/strong&gt; is a unix tool that allows granular control of network traffic, down to the packet level. It’s an incredibly powerful tool that can be leveraged for both defense and offense - let’s try the latter. &lt;/p&gt;
&lt;p&gt;It is possible to acheive &lt;strong&gt;same&lt;/strong&gt; &lt;strong&gt;result&lt;/strong&gt; as socat dumb pipe redirection but using &lt;strong&gt;IPTables&lt;/strong&gt; instead. Here, we specify exactly which network traffic &lt;strong&gt;packets&lt;/strong&gt; should accepted or dropped, and where they should be &lt;strong&gt;forwarded&lt;/strong&gt; or &lt;strong&gt;rerouted&lt;/strong&gt; in order to meet our tailored specification for masking the traffic to and from our core C2 server. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-30.png&#34; alt=&#34;2021 07 16 11 30&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The end result is similar to &lt;strong&gt;socat&lt;/strong&gt; and &lt;strong&gt;ufw&lt;/strong&gt;, and we manage to communicate from C2 server, to redirector, to compromised endpoint all without revealing the C2 server to the blue team! In the screenshot below, we’re actively running malicious commands to the compromised machine whilst leveraging the granular iptables rules to obfuscate our rerouted malicious network traffic. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-30_1.png&#34; alt=&#34;2021 07 16 11 30 1&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;3.2 Redirection using Apache mod_rewrite&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;32-redirection-using-apache-mod_rewrite&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#32-redirection-using-apache-mod_rewrite&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An alternate method to dumb pipe redirection employs &lt;strong&gt;Apache mod_rewrite&lt;/strong&gt;, which offers a number of techniques to strengthen our infrastructure. &lt;/p&gt;
&lt;p&gt;Essentially, apache mod_rewrite allows a proxy to behave differently if fed different arbitrary information - such as user agent, operating system, IP address and more. This creates more varied network traffic, as the rules we give will dictate if traffic should be dropped, accepted, or redirected according to particular prescribed behaviour. There is significant time and effort consumption to using this method compared to socat and the firewalls, delivering improved results in return. &lt;/p&gt;
&lt;p&gt;We can accomplish this by specifying rulesets and a &lt;em&gt;.htaccess&lt;/em&gt; file in the webserver&amp;rsquo;s root directory. In our case, we&amp;rsquo;re going to create a rule that redirects curious visitors to our labs.jumpsec.com page. Let’s take a deep dive into setting this up. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-32-1024x616.png&#34; alt=&#34;2021 07 16 11 32&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.2.1 Configuring Apache Mod_Rewrite&lt;/strong&gt; &lt;span class=&#34;absolute -mt-20&#34; id=&#34;321-configuring-apache-mod_rewrite&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#321-configuring-apache-mod_rewrite&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;To begin, we need Apache2 on our redirection server. We then need to open up its configurations file, and change &lt;em&gt;AllowOverride&lt;/em&gt; from &lt;strong&gt;None&lt;/strong&gt; to &lt;strong&gt;All&lt;/strong&gt; inside &lt;em&gt;/etc/apache2/apache.conf&lt;/em&gt; to begin the process of abusing mod_rewrite for our own malicious intent. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-33.png&#34; alt=&#34;2021 07 16 11 33&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;We then can &lt;strong&gt;enable&lt;/strong&gt; Apache2 module rewrite, and follow up by restarting the apache web service so the change can take effect. &lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo a2enmod rewrite proxy proxy_http
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo service apache2 restart&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-34.png&#34; alt=&#34;2021 07 16 11 34&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Then, within the web server&amp;rsquo;s root directory, we must create a &lt;strong&gt;.htaccess&lt;/strong&gt; file. This will filter traffic based on our specified criteria and is therefore a crucial component in this whole operation (so let’s not make any mistakes here!). Set  &lt;strong&gt;.htaccess&lt;/strong&gt; file&amp;rsquo;s &lt;em&gt;chmod&lt;/em&gt; permissions to &lt;strong&gt;644&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-37.png&#34; alt=&#34;2021 07 16 11 37&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.2.2 Malicious Rules&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;322-malicious-rules&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#322-malicious-rules&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that we’ve installed the necessities, let’s get to work. We need to create our ruleset that will filter proxy traffic based on arbitrary behaviours / strings that we give to the web server. &lt;/p&gt;
&lt;p&gt;Let’s create a rule that behaves differently depending on if an incoming request has a particular &lt;strong&gt;directory.&lt;/strong&gt; Only we will know the secret directory that will facilitate malicious traffic. To everyone else, we will forward them to this awesome site we know…&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-39.png&#34; alt=&#34;2021 07 16 11 39&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;In the above ruleset, we can see that if the directory &lt;strong&gt;/jstest&lt;/strong&gt; is explicitly included in the http(s) traffic, it will be forwarded to our &lt;strong&gt;C2 core server&lt;/strong&gt; running on &lt;strong&gt;x.x.x.223.&lt;/strong&gt; If any traffic attempts to come that does not include that specific &lt;strong&gt;/jstest&lt;/strong&gt; directory, then the apache web server will behave differently and reroute the nosey, inquisitive investigator to &lt;strong&gt;&lt;em&gt;labs.jumpsec.com&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;To the unwitting visitor to our redirector middle-man server, they are simply visiting the JUMPSEC labs website. They did include the secret &lt;strong&gt;/jstest&lt;/strong&gt; directory in their request, and therefore they will not discover the hidden malicious infrastructure we have set up.&lt;/p&gt;
&lt;p&gt;Conversely, by offering the &lt;strong&gt;/jstest&lt;/strong&gt; directory in a request, we are able to control and issue commands across our obfuscated communication line. In our example below, we could have had something incredibly sophisticated and malicious&amp;hellip;instead we chose to issue a warning.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-40.png&#34; alt=&#34;2021 07 16 11 40&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h3&gt;&lt;strong&gt;3.2.3 Integrating mod_rewrite elsewhere&lt;/strong&gt;&lt;span class=&#34;absolute -mt-20&#34; id=&#34;323-integrating-mod_rewrite-elsewhere&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#323-integrating-mod_rewrite-elsewhere&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;It’s awesome to use mod_rewrite to arbitrarily change the behaviour of our web server. However the default C2 usability of this method is unwieldy. In the example below, we can see it’s a bit clunky and doesn’t lend itself to the rapid action that a red team operator needs. &lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-41-1024x158.png&#34; alt=&#34;2021 07 16 11 41&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It is possible to fit this apache mod_rewrite technique in as a component to other C2 infrastructure. Earlier, we spoke about &lt;strong&gt;Metasploit&lt;/strong&gt;, and whilst it isn’t the most reliable of it’s peers it is quite flexible and good at fitting new components in. We can make &lt;strong&gt;Metasploit&lt;/strong&gt; and &lt;strong&gt;apache mod_rewrite&lt;/strong&gt; play nicely with each other, which will make our ability to issue commands that much easier.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;Metasploit&lt;/strong&gt;, we can leverage the &lt;em&gt;-URI uriflag&lt;/em&gt;. If we run a meterpreter payload on the compromised machine, we can ensure that only payloads with this URI flag can connect to our C2 Server, preventing anybody interested from peeking into our domains. This step doesn’t just ensure our C2 remains &lt;strong&gt;hidden&lt;/strong&gt; but also &lt;strong&gt;improves&lt;/strong&gt; the &lt;strong&gt;usability&lt;/strong&gt; of our redirections.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;images/2021-07-16_11-42.png&#34; alt=&#34;2021 07 16 11 42&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;4. Beyond C2&lt;/strong&gt;&lt;/h1&gt;&lt;p&gt;This article only covered one of the many elements of the offensive security arsenal. Robust and obfuscated C2 is one of the most critical actions that successful red teamers and real-world attacker’s alike take when compromising a network. I hope that this high-level article demonstrates that creating a covert infrastructure is a critical step in effective and covert attack simulation.&lt;/p&gt;
&lt;p&gt;There is much more to talk about overall about the red team’s attack path repertoire. And there is still more to talk about C2 itself! There are so many ways to customise a C2 infrastructure that some have even written and deployed &lt;a href=&#34;https://labs.f-secure.com/tools/c3/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C3 infrastructure&lt;/a&gt; as part of their engagements. Adversaries in real life have used C3 to create kernel-level APIs that they then use to communicate, rather than utilising the protocols and services that C2 uses (like SSH or HTTPs). The limits are truly endless for command-and-control.&lt;/p&gt;
&lt;p&gt;Shd is a Red Team Operator @ JUMPSEC&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
