<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JUMPSEC – Burp-Suite-Extension</title>
    <link>//localhost:1313/tags/burp-suite-extension/</link>
    <description>Recent content in Burp-Suite-Extension on JUMPSEC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <lastBuildDate>Wed, 28 Apr 2021 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="//localhost:1313/tags/burp-suite-extension/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Overcoming Issues Using Custom Python Scripts with Burp Suite Professional</title>
      <link>//localhost:1313/articles/2021/04/2021-04-28-burp-suite-python-scripter/</link>
      <pubDate>Wed, 28 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/articles/2021/04/2021-04-28-burp-suite-python-scripter/</guid>
      <description>
        
        
        &lt;h3&gt;Summary / TL:DR&lt;span class=&#34;absolute -mt-20&#34; id=&#34;summary--tldr&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#summary--tldr&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;I recently encountered some issues when using Burp Suite Professional which led me to playing around with the Python Scripter extension. The extension allows running custom Python scripts on every request/response processed by Burp, including those generated by functionality such as Burp&amp;rsquo;s active scanner. This has a number of potential use cases, but I found it particularly useful to re-implement client-side functions that prevented the active scanner from identifying vulnerabilities it would normally detect. The extension is quite simple to use but has a somewhat steep learning curve, so I have shared some of my processes, findings and code samples which may be useful for others in similar situations.&lt;/p&gt;
&lt;h3&gt;Background&lt;span class=&#34;absolute -mt-20&#34; id=&#34;background&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#background&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;When working on a recent client project I encountered an issue where the login functionality base64 encoded the username and password before sending it in a JSON request to the server. An example of this is shown below.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;{
	&amp;#34;payload&amp;#34;:&amp;#34;eyJ1c2VybmFtZSI6InRlc3R1c2VyIiwicGFzc3dvcmQiOiJ0ZXN0cGFzcyJ9&amp;#34;
}&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;The base64 encoded string decodes to {&amp;ldquo;username&amp;rdquo;:&amp;ldquo;testuser&amp;rdquo;,&amp;ldquo;password&amp;rdquo;:&amp;ldquo;testpass&amp;rdquo;} which is another JSON body with the input username and password. Unfortunately, at the time this format caused a lot of issues with fuzzing tools such as Burp Suite Professional’s active scanner. When scanning the endpoint Burp wasn’t quite smart enough to handle the encoding and decoding and didn’t fuzz the inner parameters inside the base64 encode input. Knowing that the web server logic wouldn’t correctly decode the fuzzed input, I set out to find a way to scan the parameters before they are encoded and have Burp automatically encode the input before it’s sent to the server.&lt;/p&gt;
&lt;p&gt;I found a number of extensions which appeared to work with base64 encoded values. However, none of these worked when the request to the server was sent in a JSON format. Eventually, I came across the Python Scripter extension [&lt;a href=&#34;https://portswigger.net/bappstore/eb563ada801346e6bdb7a7d7c5c52583&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1&lt;/a&gt;] which claimed to allow the execution of custom Python scripts on every request/response processed by Burp. As someone who enjoys writing Python scripts this sounded perfect for me and I decided to learn how to use it. Unfortunately, there was very little documentation about the extension and the user interface was simply an empty text box with no additional information.&lt;/p&gt;
&lt;p&gt;At this point I spent time googling and finding any existing code samples online to try and figure out how to actually use the extension. A particularly useful resource I found was lanmaster53’s pyscripter-er github repo [&lt;a href=&#34;https://github.com/lanmaster53/pyscripter-er&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;2&lt;/a&gt;] which is worth checking out if you want to learn more advanced usage. Eventually, I managed to get a good enough understanding to be able to make a python script that would take a normal request with a username and password parameter and format it as a base64 encoded string sent in a JSON request. Since carrying out the test and writing this blog post, Burp has been updated and the active scanner now performs fuzzing of base64 encoded input. However, I thought I’d still write this up to provide a resource for understanding how to actually use the Python Scripter extension as base64 encoding was just one example of where it could be useful.&lt;/p&gt;
&lt;h3&gt;Basic Setup&lt;span class=&#34;absolute -mt-20&#34; id=&#34;basic-setup&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#basic-setup&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Along with installing the extension, I recommend installing the logger++ extension [&lt;a href=&#34;https://portswigger.net/bappstore/470b7057b86f41c396a97903377f3d81&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;3&lt;/a&gt;] as this is useful for viewing the request after it has been modified by the python script. Overall, the basic setup involves three areas:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The extension script window – For writing the python code&lt;/li&gt;
&lt;li&gt;The extension output/error window – For debugging the python code&lt;/li&gt;
&lt;li&gt;Logger++ – Seeing the transformed request as it is sent to the server&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscript_1b.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Print statements or other python console output will be displayed here, with errors shown in the “Errors” tab.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Intercepting and Viewing Requests&lt;span class=&#34;absolute -mt-20&#34; id=&#34;intercepting-and-viewing-requests&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#intercepting-and-viewing-requests&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Perhaps the most difficult part when using the extension is figuring out how to actually intercept the requests sent so that you can begin modifying it. As mentioned previously, there isn’t much in the way of documentation, but as the extension makes use of the Burp Suite extender API [&lt;a href=&#34;https://portswigger.net/burp/extender/api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;4&lt;/a&gt;] we can use the documentation for that to learn a bit more about how to interact with requests. We know the extension implements the following variables and after reviewing the extender API documentation we can get a rough estimate of what class or value they correspond to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;extender – IBurpExtender class&lt;/li&gt;
&lt;li&gt;callbacks – IBurpExtenderCallbacks class&lt;/li&gt;
&lt;li&gt;helpers – IExtensionHelpers class&lt;/li&gt;
&lt;li&gt;toolFlag – Integer value defining which Burp tool created the request&lt;/li&gt;
&lt;li&gt;messageIsRequest – Boolean value indicating whether the current message being processed is a request&lt;/li&gt;
&lt;li&gt;messageInfo – IHttpRequestResponse class&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After reviewing the documentation of these classes, we can make a simple script to print out core information about the request such as the HTTP request headers and the body of a POST request. This includes all the information we likely want to modify such as any request parameters.&lt;/p&gt;
&lt;p&gt;GET Request:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;if messageIsRequest:
	reqbytes = messageInfo.getRequest()
	req = helpers.bytesToString(reqbytes)
	print(req)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;POST Request:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;if messageIsRequest:
	reqbytes = messageInfo.getRequest()
	req = helpers.analyzeRequest(reqbytes)
	headers = req.getHeaders()
	parameters = reqbytes[(req.getBodyOffset()):].tostring()
	print(parameters)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_2a.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_2b.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;With the script included the request headers are stored in the req variable and can be printed to the output window.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_3a.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_3b.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Similarly, using a script we can access the POST request parameters.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Modifying a Request&lt;span class=&#34;absolute -mt-20&#34; id=&#34;modifying-a-request&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#modifying-a-request&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Now that we can get core information about the request, we can write whatever Python code we want to start extracting specific information from the request and change it. This could be using regular expressions or simply functions such as split and strip to process the input and combine it with specific functions based on the context of the application, e.g. base64 encoding the input.&lt;/p&gt;
&lt;p&gt;After we have modified our input value the request will need to be recreated using the new modified input. For GET requests this process is simple, we simply need to convert the modified request back to byte format and then set the message as the new request. For POST requests we will need to build a new request that combines the previous HTTP headers with the modified body and then set this as the new request.&lt;/p&gt;
&lt;p&gt;GET Request:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;newreq_bytes = helpers.stringToBytes(modified_req)
messageInfo.setRequest(newreq_bytes)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;POST Request:&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;newreq_bytes = helpers.buildHttpMessage(headers,output_body)
messageInfo.setRequest(newreq_bytes)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Putting it together with the previous code an example GET request where we want to base64 encode an input we could use the following code.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;import re
import base64

if messageIsRequest:
	reqbytes = messageInfo.getRequest()
	req = helpers.bytesToString(reqbytes)
	
	input_val = re.findall(r&amp;#39;input=[^\s]*&amp;#39;, req)[0].split(&amp;#39;&amp;amp;&amp;#39;)[0].split(&amp;#39;=&amp;#39;)[1]
	output_val = base64.b64encode(input_val)
	
	output_param = r&amp;#39;input=%s&amp;#39; % (output_val)
	output_req = req.replace(input_param, output_param)
	
	newreq = helpers.stringToBytes(output_req)
	messageInfo.setRequest(newreq)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;There isn’t really much more required to use the extension and whilst there is a lot more that can be done with it, this blog is only intended to help understand how to get started with it by providing some basic usage examples. In the final section of this blog, I’ve added an example showing how to use it to bypass a simple request signing implementation.&lt;/p&gt;
&lt;h3&gt;Practical Example – Message Request Signing&lt;span class=&#34;absolute -mt-20&#34; id=&#34;practical-example--message-request-signing&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#practical-example--message-request-signing&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;As I mentioned previously, Burp is now smart enough to recognise the base64 encoded input and inject payloads into the body before its encoded – the original reason I had for using the extension. However, there are a number of potential use cases for the extension. As such, I thought I’d provide an example of another use for it.&lt;/p&gt;
&lt;p&gt;Another penetration test I conducted featured an application that implemented request signing, where every request sent to the server sent a signature generated from the request. As the signing was carried out by client-side code, it was possible to review the implementation and sign any request we make to the server. However, the signature would break a lot of Burp functionality, including the active scanner, as this isn’t automatically updated for every new request. To overcome this, once the signing implementation is understood, we can then use the Python Scripter extension to carry out the signing process on each request that Burp processes.&lt;/p&gt;
&lt;p&gt;As an example, I’ve created a very basic PHP web app that simply takes a base64 JSON encoded string containing two user input values and reflects those inputs in the web response. The application also requires a “Signature” header to be sent which contains a SHA256 hash of the length of the body of the POST request. This application is obviously vulnerable to reflected cross-site scripting, but if we try to use Burp’s active scanner to identify this it will fail. This happens as the request signature isn’t updated when fuzzing with XSS payloads, so Burp won’t detect the payloads in the response.&lt;/p&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5a-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Simple PHP web app vulnerable to cross-site scripting.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5b.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Base64 string sent as input along with the signature header. Input is reflected in the web response&lt;/strong&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5c-1.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Using&lt;/em&gt; B_urp&amp;rsquo;s_ a_ctive scanner fails to pick up any cross-site scripting issues_&lt;/strong&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;We want our python script to do a number of things including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extract two input values (input1 and input2) from the starting request.&lt;/li&gt;
&lt;li&gt;Format them in to a JSON request body.&lt;/li&gt;
&lt;li&gt;Base64 encode the JSON request body.&lt;/li&gt;
&lt;li&gt;Use the base64 encoded value as the value of the input parameter.&lt;/li&gt;
&lt;li&gt;Create a SHA256 hash of the length of the POST request body.&lt;/li&gt;
&lt;li&gt;Add the hash as a HTTP request header.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following snippet of python code can be used to carry out all of this. We can then copy this into the extension script window, and it will automatically update a basic request with input1 and input2 parameters to the desired format. This will happen for all requests Burp Suite processes including those generated by functionality such as the active scanner, meaning the scanner should now pick up any vulnerabilities.&lt;/p&gt;
&lt;div class=&#34;code-block relative mt-6 first:mt-0 group/code&#34;&gt;&lt;pre&gt;&lt;code&gt;import re
import base64
import hashlib

if messageIsRequest:
	reqbytes = messageInfo.getRequest()
	req = helpers.analyzeRequest(reqbytes)
	parameters = reqbytes[(req.getBodyOffset()):].tostring()
	headers = req.getHeaders()

	val_1 = re.findall(r&amp;#39;input1=[^\s]*&amp;#39;, parameters)[0].split(&amp;#39;&amp;amp;&amp;#39;)[0].split(&amp;#39;=&amp;#39;)[1]
	val_2 = re.findall(r&amp;#39;input2=[^\s]*&amp;#39;, parameters)[0].split(&amp;#39;&amp;amp;&amp;#39;)[0].split(&amp;#39;=&amp;#39;)[1]
	
	input_val = &amp;#39;{&amp;#34;input1&amp;#34;:&amp;#34;%s&amp;#34;,&amp;#34;input2&amp;#34;:&amp;#34;%s&amp;#34;}&amp;#39; % (val_1, val_2)
	base64_val = base64.b64encode(input_val)
	output_body = r&amp;#39;input=%s&amp;#39; % base64_val
	
	hash_body_len = hashlib.sha256(str(len(output_body)).encode(&amp;#39;utf-8&amp;#39;)).hexdigest()
	sig = &amp;#34;Signature: &amp;#34; &amp;#43; hash_body_len
	headers.add(sig)
	
	newreq = helpers.buildHttpMessage(headers, output_body)
	messageInfo.setRequest(newreq)&lt;/code&gt;&lt;/pre&gt;&lt;div class=&#34;opacity-0 transition group-hover/code:opacity-100 flex gap-1 absolute m-[11px] right-0 top-0&#34;&gt;
    &lt;button
      class=&#34;code-copy-btn group/copybtn transition-all active:opacity-50 bg-primary-700/5 border border-black/5 text-gray-600 hover:text-gray-900 rounded-md p-1.5 dark:bg-primary-300/10 dark:border-white/10 dark:text-gray-400 dark:hover:text-gray-50&#34;
      title=&#34;Copy code&#34;
    &gt;
      &lt;div class=&#34;group-[.copied]/copybtn:hidden copy-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
      &lt;div class=&#34;hidden group-[.copied]/copybtn:block success-icon pointer-events-none h-4 w-4&#34;&gt;&lt;/div&gt;
    &lt;/button&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5e.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;With the script, we can now send a valid request without the signature and without the base64 encoding.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5f.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Using logger++ we can see that the script automatically modifies the request and adds the signature as well as converts the input into a base64 encoded string.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
&lt;p&gt;&lt;img src=&#34;images/pyscripter_5g.png&#34; alt=&#34;&#34; loading=&#34;lazy&#34; /&gt;&lt;/p&gt;
&lt;figcaption&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Now if we active scan the request the scanner will instantly pick up cross-site scripting vulnerabilities.&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3&gt;Conclusion&lt;span class=&#34;absolute -mt-20&#34; id=&#34;conclusion&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#conclusion&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;There are a vast number of potential use cases for the Python Scripter extension when conducting testing using Burp Suite Professional. In particular, it is useful for any scenario where client-side code disrupts the function of automated tools by heavily modifying user input or the request before it is sent to the server. Some potential examples include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Encoding / encrypting user input (where keys and algorithms are known)&lt;/li&gt;
&lt;li&gt;HTTP request signature algorithms&lt;/li&gt;
&lt;li&gt;Weak captcha implementations&lt;/li&gt;
&lt;li&gt;Functionality which requires a unique value per request to the server&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;By following the processes outlined in this blog, you should be able to write your own Python scripts which can be executed on any request sent through Burp Suite and use this to overcome application specific complications that interfere with automated testing tools.&lt;/p&gt;
&lt;p&gt;Sample scripts for using the Python Scripter extension can be found at the JumpsecLabs GitHub repository [&lt;a href=&#34;https://github.com/JumpsecLabs/python-burp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;5&lt;/a&gt;].&lt;/p&gt;
&lt;h3&gt;References&lt;span class=&#34;absolute -mt-20&#34; id=&#34;references&#34;&gt;&lt;/span&gt;
    &lt;a href=&#34;#references&#34; class=&#34;subheading-anchor&#34; aria-label=&#34;Permalink for this section&#34;&gt;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;[1] &lt;a href=&#34;https://portswigger.net/bappstore/eb563ada801346e6bdb7a7d7c5c52583&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://portswigger.net/bappstore/eb563ada801346e6bdb7a7d7c5c52583&lt;/a&gt;&lt;br&gt;
[2] &lt;a href=&#34;https://github.com/lanmaster53/pyscripter-er&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/lanmaster53/pyscripter-er&lt;/a&gt;&lt;br&gt;
[3] &lt;a href=&#34;https://portswigger.net/bappstore/470b7057b86f41c396a97903377f3d81&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://portswigger.net/bappstore/470b7057b86f41c396a97903377f3d81&lt;/a&gt;&lt;br&gt;
[4] &lt;a href=&#34;https://portswigger.net/burp/extender/api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://portswigger.net/burp/extender/api/&lt;/a&gt;&lt;br&gt;
[5] &lt;a href=&#34;https://github.com/JumpsecLabs/python-burp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/JumpsecLabs/python-burp&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
